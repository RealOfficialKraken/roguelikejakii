    ;;-*-Lisp-*-
    (in-package goal)

    ;; name: mod-custom-code.gc
    ;; name in dgo: mod-custom-code
    ;; dgos: TODO

#| TODO:
--------------------------------------------------------------------------------------------------
- Traffic-kill whenever you buy or collect buffed-vehicles
- Remake randomized missions to use knuth random
- Getting to end after you've beaten ending before, softlocks jak
- Debug the f out of the cheat menu
- Make the item spawning work with (-> *game-info* total-trys) in cheat menu
- Add curse and luck stat to cheat menu
- Add free health refill and invulnerability in cheat menu
vv--optional ideas--vv
- Add a chance of random challenges that reward skull gems per stage, to make acquiring gems to buy items easier.
- Add a way to get items at the start of runs, at the cost of gems
- After 100%ing items, for 1000 gems unlock the cheats menu.
- Make a way to access shop from not just HipHog
- Create intro msg for accessing dark act for the first time, selecting 1 of 3 equal boons to carry to the end.
- Create items off of pc-settings.gc (pending), the most OP items ever. It's a separate shop and is only accessible after karma 3.0/4.0.
- Create crit, a way for Jak's mechanical abilities to improve damage on chance (based off luck). It's damage can be boosted with items or by doing damage with punches or twirls
- Make more rng elements in missions alone, like teleporting entities. This will be important to not cause burnout
- Make cursed bosses, alongside making vanilla bosses harder
- Level 9 curse will shoot guard projectiles from all directions towards jak, at rng chance.
- Maybe after you beat the game, you unlock consite to enter into as the (black market) area, buying cursed items only.

After most of the top ones, the mod will be completed and I can get on with my life

--------------------------------------------------------------------------------------------------

ITEM IDEAS (4 items left, all cursed items)
Run items should be centered around 3 core aspects: Luck, Damage, and Mechanical advantages. All of which you should become strong with just one of the three.

- Big Bomb (On chance (luck stat), proj impacts create 30 grenades at set vectors with 0 timer)
- Bounce Shot
- Yellow Sage Shot (Fires yellow shots rain down-forward from above jak)
- Red Sage Shot (works as a barrier, in front of jak a bunch of red shots come out in one direction. Gets bigger with more skull gems. 7 Levels max)
- Blue Sage Shot (Bunch of blue shot facing upwards shoot from underneath jak)
- Red Dot Sight (crit level up +2)

--------------------------------------------------------------------------------------------------

BOON IDEAS (infinite items, infinite scaling)
The idea is to create an infinitely scaling item that'll eventually be OP the more you put into it.
These items are usually very expensive to both put in your run, and to buy in the hiphog shop.
It's taken off of the pc-settings clone made by barg/zed, making the item amount unlimited.
You can scale these items by doing a randomized task, set completely at the beginning of runs.
Example: When jak takes damage, scale up Fire Rate of All Weapons

Another note to add is that these items are cheap, and are very slowly procked.

(STAT ATTRIBUTES)
- Fire Rate of all weapons
- Random Projectile
- Crits (firing a peacemaker shot off a projectile's impact vector)
- Upgraded Peacemaker Ability

(STAT SCALERS)
- Every time Jak takes damage,
- Every time Jak kills a Krimzon Guard,
- Every time Jak kills a Dark Eco entity
- Every time Jak collects an in-level orb
- Every time Jak collects a skull gem,
- Every time Jak bonks, a chance to 

--------------------------------------------------------------------------------------------------

IF ADDING A NEW ITEM:

- Make item var in game-info-h.gc
- edit the var into the next shopid, then add to roll-shopitems, roll-randomitem, and for in-menu2's "(cpad-pressed? 0 x)".
- Make the item var saveable, and loadable
- Make item purchaseable through a store in the hub area

--------------------------------------------------------------------------------------------------

|#
    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Begin function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

(define matt-str (new 'global 'string 2048 (the-as string #f)))
(define *pc-encoded-matt-str* (new 'global 'string 2048 (the-as string #f)))




(defun give-item ((arg0 string) (arg1 int))
(when 
(and
(not (string= arg0 "red"))
(not (string= arg0 "blue"))
(not (string= arg0 "redrof"))
(not (string= arg0 "damage"))
(not (string= arg0 "ammo"))
(not (string= arg0 "vehicles"))
(not (string= arg0 "double"))
(not (string= arg0 "explosive"))
(not (string= arg0 "clover"))
(not (string= arg0 "2hp"))
(not (string= arg0 "mpunch"))
(not (string= arg0 "clone"))
(not (string= arg0 "weight"))
(not (string= arg0 "rapid"))
(not (string= arg0 "darkupgrade"))
)
(format #t "ERROR: Unknown Item. Please use: ~%red~%blue~%dark~%redrof~%ammo~%damage~%vehicles~%double~%explosive~%clover~%2hp~%mpunch~%clone~%weight~%rapid~%darkupgrade")
)
(when (and (!= arg1 1) (!= arg1 0))
(format #t "ERROR: Please choose either 0 or 1:~%1 = You have it~%0 = You don't have it")
)

(when 
(and 
(string= arg0 "red")
(= arg1 1)
(= (/ (mod (-> *game-info* task-deaths) 10) 1) 0)
)
 (+! (-> *game-info* task-deaths) 1)
)
(when 
(and 
(string= arg0 "red")
(= arg1 0)
(= (/ (mod (-> *game-info* task-deaths) 10) 1) 1)
)
 (-! (-> *game-info* task-deaths) 1)
)

(when 
(and 
(string= arg0 "blue")
(= arg1 1)
(= (/ (mod (-> *game-info* task-deaths) 100) 10) 0)
)
 (+! (-> *game-info* task-deaths) 10)
)
(when 
(and 
(string= arg0 "blue")
(= arg1 0)
(= (/ (mod (-> *game-info* task-deaths) 100) 10) 1)
)
 (-! (-> *game-info* task-deaths) 10)
)

(when 
(and 
(string= arg0 "dark")
(= arg1 1)
(= (/ (mod (-> *game-info* task-deaths) 1000) 100) 0)
)
 (+! (-> *game-info* task-deaths) 100)
)
(when 
(and 
(string= arg0 "dark")
(= arg1 0)
(= (/ (mod (-> *game-info* task-deaths) 1000) 100) 1)
)
 (-! (-> *game-info* task-deaths) 100)
)

(when 
(and 
(string= arg0 "redrof")
(= arg1 1)
(= (/ (mod (-> *game-info* task-deaths) 10000) 1000) 0)
)
 (+! (-> *game-info* task-deaths) 1000)
)
(when 
(and 
(string= arg0 "redrof")
(= arg1 0)
(= (/ (mod (-> *game-info* task-deaths) 10000) 1000) 1)
)
 (-! (-> *game-info* task-deaths) 1000)
)

(when 
(and 
(string= arg0 "ammo")
(= arg1 1)
(= (/ (mod (-> *game-info* task-deaths) 100000) 10000) 0)
)
 (+! (-> *game-info* task-deaths) 10000)
)
(when 
(and 
(string= arg0 "ammo")
(= arg1 0)
(= (/ (mod (-> *game-info* task-deaths) 100000) 10000) 1)
)
 (-! (-> *game-info* task-deaths) 10000)
)

(when 
(and 
(string= arg0 "damage")
(= arg1 1)
(= (/ (mod (-> *game-info* task-deaths) 1000000) 100000) 0)
)
 (+! (-> *game-info* task-deaths) 100000)
)
(when 
(and 
(string= arg0 "damage")
(= arg1 0)
(= (/ (mod (-> *game-info* task-deaths) 1000000) 100000) 1)
)
 (-! (-> *game-info* task-deaths) 100000)
)

(when 
(and 
(string= arg0 "vehicles")
(= arg1 1)
(= (/ (mod (-> *game-info* task-deaths) 10000000) 1000000) 0)
)
 (+! (-> *game-info* task-deaths) 1000000)
)
(when 
(and 
(string= arg0 "vehicles")
(= arg1 0)
(= (/ (mod (-> *game-info* task-deaths) 10000000) 1000000) 1)
)
 (-! (-> *game-info* task-deaths) 1000000)
)

(when 
(and 
(string= arg0 "double")
(= arg1 1)
(= (/ (mod (-> *game-info* task-deaths) 100000000) 10000000) 0)
)
 (+! (-> *game-info* task-deaths) 10000000)
)
(when 
(and 
(string= arg0 "double")
(= arg1 0)
(= (/ (mod (-> *game-info* task-deaths) 100000000) 10000000) 1)
)
 (-! (-> *game-info* task-deaths) 10000000)
)

(when 
(and 
(string= arg0 "explosive")
(= arg1 1)
(= (/ (mod (-> *game-info* task-deaths) 1000000000) 100000000) 0)
)
 (+! (-> *game-info* task-deaths) 100000000)
)
(when 
(and 
(string= arg0 "explosive")
(= arg1 0)
(= (/ (mod (-> *game-info* task-deaths) 1000000000) 100000000) 1)
)
 (-! (-> *game-info* task-deaths) 100000000)
)


(when 
(and 
(string= arg0 "clover")
(= arg1 1)
(= (/ (mod (-> *game-info* continue-deaths) 10) 1) 0)
)
 (+! (-> *game-info* continue-deaths) 1)
)
(when 
(and 
(string= arg0 "clover")
(= arg1 0)
(= (/ (mod (-> *game-info* continue-deaths) 10) 1) 1)
)
 (-! (-> *game-info* continue-deaths) 1)
)

(when 
(and 
(string= arg0 "2hp")
(= arg1 1)
(= (/ (mod (-> *game-info* continue-deaths) 100) 10) 0)
)
 (+! (-> *game-info* continue-deaths) 10)
)
(when 
(and 
(string= arg0 "2hp")
(= arg1 0)
(= (/ (mod (-> *game-info* continue-deaths) 100) 10) 1)
)
 (-! (-> *game-info* continue-deaths) 10)
)

(when 
(and 
(string= arg0 "mpunch")
(= arg1 1)
(= (/ (mod (-> *game-info* continue-deaths) 1000) 100) 0)
)
 (+! (-> *game-info* continue-deaths) 100)
)
(when 
(and 
(string= arg0 "mpunch")
(= arg1 0)
(= (/ (mod (-> *game-info* continue-deaths) 1000) 100) 1)
)
 (-! (-> *game-info* continue-deaths) 100)
)

(when 
(and 
(string= arg0 "clone")
(= arg1 1)
(= (/ (mod (-> *game-info* continue-deaths) 10000) 1000) 0)
)
 (+! (-> *game-info* continue-deaths) 1000)
)
(when 
(and 
(string= arg0 "clone")
(= arg1 0)
(= (/ (mod (-> *game-info* continue-deaths) 10000) 1000) 1)
)
 (-! (-> *game-info* continue-deaths) 1000)
)

(when 
(and 
(string= arg0 "weight")
(= arg1 1)
(= (/ (mod (-> *game-info* continue-deaths) 100000) 10000) 0)
)
 (+! (-> *game-info* continue-deaths) 10000)
)
(when 
(and 
(string= arg0 "weight")
(= arg1 0)
(= (/ (mod (-> *game-info* continue-deaths) 100000) 10000) 1)
)
 (-! (-> *game-info* continue-deaths) 10000)
)

(when 
(and 
(string= arg0 "rapid")
(= arg1 1)
(= (/ (mod (-> *game-info* continue-deaths) 1000000) 100000) 0)
)
 (+! (-> *game-info* continue-deaths) 100000)
)
(when 
(and 
(string= arg0 "rapid")
(= arg1 0)
(= (/ (mod (-> *game-info* continue-deaths) 1000000) 100000) 1)
)
 (-! (-> *game-info* continue-deaths) 100000)
)

(when 
(and 
(string= arg0 "darkupgrade")
(= arg1 1)
(= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 0)
)
 (+! (-> *game-info* continue-deaths) 1000000)
)
(when 
(and 
(string= arg0 "darkupgrade")
(= arg1 0)
(= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 1)
)
 (-! (-> *game-info* continue-deaths) 1000000)
)
(set! item-refresh #t)
(none)
)





  (deftype vin-npc (process-taskable)
  ()
  )


(defskelgroup skel-vin vin vin-lod0-jg vin-idle-ja
              ((vin-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 10)
              :shadow vin-shadow-mg
              :origin-joint-index 3
              )


(defmethod init-art! ((this vin-npc))
  "@see [[initialize-skeleton]]"
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-vin" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (none)
  )

(defbehavior vin-npc-init-by-other vin-npc ((vec vector)) ;spawn vinny
  (stack-size-set! (-> self main-thread) 512)
  (process-taskable-method-31 self)
  (logior! (-> self mask) (process-mask actor-pause))
  (vector-copy! (-> self root trans) vec)
  (quaternion-identity! (-> self root quat))
  (vector-identity! (-> self root scale))
  (set! (-> self task) (new 'process 'game-task-control (game-task-actor vin-vinroom)))
  (init-art! self)
  (process-taskable-method-32 self)
  (set! (-> self event-hook) (-> (method-of-object self idle) event))
  (go (method-of-object self hide))
  (none)
  )

;this is to make the dm-play-task-with-continue macro work in retail-mode
(defun debug-menu-make-task-menu ((arg0 debug-menu-context))
  (local-vars (sv-16 debug-menu-context))
  (let* ((s5-0 (new 'debug 'debug-menu arg0 "Task menu"))
         (s4-0 (new 'debug 'debug-menu-item-submenu "Task" s5-0))
         )
    (let* ((s3-0 '(city
                    fortress
                    stadium
                    palace
                    castle
                    ruins
                    atoll
                    sewer
                    strip
                    mountain
                    forest
                    drill
                    tomb
                    dig
                    canyon
                    consite
                    under
                    nest
                    default
                    test
                    )
                 )
           (a0-3 (car s3-0))
           )
      (while (not (null? s3-0))
        (let ((s2-0 debug-menu-append-item)
              (s1-0 s5-0)
              (s0-0 debug-menu-make-from-template)
              )
          (set! sv-16 arg0)
          (let ((a1-2 (debug-menu-make-task-sub-menu (the-as symbol a0-3))))
            (s2-0 s1-0 (s0-0 sv-16 a1-2))
            )
          )
        (set! s3-0 (cdr s3-0))
        (set! a0-3 (car s3-0))
        )
      )
    s4-0
    )
  )

(defun dm-play-task-with-continue ((arg0 game-task) (arg1 string))
  (let* ((t9-0 play-task)
         (a1-1 'debug)
         (a2-0 (cond
                 ((cpad-hold? 0 l1)
                  'pre-play
                  )
                 ((cpad-hold? 0 r1)
                  'kiosk
                  )
                 )
               )
         (a1-2 (t9-0 arg0 a1-1 a2-0))
         )
    (if arg1
        (set! a1-2 arg1)
        )
    (start 'play (get-continue-by-name *game-info* a1-2))
    )
  (set-master-mode 'game)
  0
  (none)
  )



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    (defun runs-every-frame ()

(when (and 
(!= (-> *progress-state* which-slot) -1)
(!= (-> *progress-state* which-slot) save-slot)
)
  (set! save-slot (-> *progress-state* which-slot))
)

(when (= autosave-delayed #t)
  (+! save-w 1)
  (when (= save-w 120)
    (set! save-w 0)
    (set! autosave-delayed #f)
    (when 
    (or
      (= save-slot 0)
      (= save-slot 1)
      (= save-slot 2)
      (= save-slot 3)
    )
      (auto-save-command 'save 0 save-slot *default-pool* #f)
    )
  )
)

;Checks to see if there's a new game, then sets you to look-around camera with the main menu.
(when ;is new game started?
(and 
*target*
(= tutorial-completed? #f)
(= (pause-allowed?) #t)
(= (-> *game-info* total-trys) 0)
(<= (-> *game-info* karma) 1.0)
(= (-> (level-get-target-inside *level*) name) 'prison)
)
  (set! wait-tutorial #t)
  (set! (-> *game-info* total-trys) 4)
)

;Checks to see if you're in consite with tutorial completed to set variables to play.
(when 
(and 
*target*
(= tutorial-completed? #f)
(= (pause-allowed?) #t)
(>= (-> *game-info* karma) 1.0)
(= (-> (level-get-target-inside *level*) name) 'consiteb)
)
  (set! (-> *target* fact health) 8.0)
  (play-task (game-task drill-eggs) 'debug #f)
  (set! vin-talk 4)
  (set! wait-start #t)
  (set! act-before1 0)
  (set! act-before2 0)
  (set! act-before3 0)
  (set! act-before4 0)
  (set! act-before5 0)
  (set! act-before6 0)
  (set! act-before7 0)
  (set! act-before8 0)
  (set! act-before9 0)
  (set! act-before10 0)
  (set! act-before11 0)
  (set! act-before12 0)
  (set! display-run #f)
  (set! p-red-gun #f)
  (set! p-blue-gun #f)
  (set! p-dark-gun #f)
  (set! p-upgrade-red #f)
  (set! p-upgrade-ammo #f)
  (set! p-upgrade-damage #f)
  (set! p-double-shot #f)
  (set! p-upgrade-vehicles #f)
  (set! wait-tutorial #f)
  (set! tutoriali 0)
  (set! tin-game? #f)
  (set! tin-game-wait #f)
  (set! tin-wait 0)
  (set! post-item-display? #t)
  (set! item-display? #f)
  (set! teleport-hiphog #f)
  (set! already-teleported? #f)
  (set! teleport-back? #f)
  (set! teleport-w 0)
  (set! teleport-wait #f)
  (set! traffic-metalheads? #f)
  (set! boss-cursed #f)
  (set! please-reward #f)
  (set! roll-randomitem #f)
  (set! tp-bf #f)
  (set! nest-mission #f)
  (set! nest-enemyc 55)
  (set! stat-menu #f)
  (set! dark-mode #f)
  (set! in-cheat #f)
  (set! stat-menu-intro #f)
  (set! rngspeed (meters 5))
  (set! rngspeed2 (meters 5))
  (set! rngspeed3 (meters 5))
  (set! rngspeed4 (meters 5))
  (set! scoutmission? #f)
  (set! tomb-boss-mission? #f)
  (set! krew-boss-mission? #f)
  (set! under-sig-mission? #f)
  (set! pleasewait #f)
  (set! temp-skullgemamount 0.0)
  (set! temp-health 8.0)
  (set! temp-orbs 0.0)
  (color-gem)
  (set! (-> *game-info* buzzer-total) 0.0)
  (set! (-> *mood-control* overide-weather-flag) #f)
  (set! (-> *time-of-day-context* overide-enable) #f)
  (set! (-> *game-info* task-deaths) 1000000000)
  (set! (-> *game-info* continue-deaths) 1000000000)
  (set! (-> *game-info* auto-save-count) 1000000000)
  (set! autosave-delayed #t)
  (set! enemy-drop-weapon-once #f)
  (when (= (-> *game-info* total-trys) 4)
    (set! menu-value 5.0)
    (set! mod-s "Peacemaker")
  )
  (when (= (-> *game-info* total-trys) 5)
    (set! menu-value 10.0)
    (set! mod-s "Upgrade Ammo (x2)")
  )
  (when (= (-> *game-info* total-trys) 6)
    (set! menu-value 15.0)
    (set! mod-s "Upgrade Damage (x2)")
  )
  (when (= (-> *game-info* total-trys) 7)
    (set! menu-value 45.0)
    (set! mod-s "Upgraded Vehicles and Speed")
  )
  (when (= (-> *game-info* total-trys) 8)
    (set! menu-value 60.0)
    (set! mod-s "Double Shot")
  )
  (when (= (-> *game-info* total-trys) 9)
    (set! menu-value 77.0)
    (set! mod-s "Four-Leaf Clover")
  )
  (when (= (-> *game-info* total-trys) 10)
    (set! menu-value 85.0)
    (set! mod-s "+2HP Every Level")
  )
  (when (= (-> *game-info* total-trys) 11)
    (set! menu-value 90.0)
    (set! mod-s "Mar's Punch")
  )
  (when (= (-> *game-info* total-trys) 12)
    (set! menu-value 100.0)
    (set! mod-s "Pocket Rift Gate")
  )
  (when (= (-> *game-info* total-trys) 13)
    (set! menu-value 125.0)
    (set! mod-s "Training Weight")
  )
  (when (= (-> *game-info* total-trys) 14)
    (set! menu-value 150.0)
    (set! mod-s "Rapid Fire")
  )
  (when (= (-> *game-info* total-trys) 15)
    (set! menu-value 200.0)
    (set! mod-s "Gol's Unbeknowngst")
  )
  (when (= (-> *game-info* total-trys) 16)
    (set! menu-value 999999.0)
    (set! mod-s "(More coming soon!)")
  )
)

(when (and (>= (-> *game-info* fuel) menu-value)(= vin-shop #t)(cpad-pressed? 0 r1))
  (-! (-> *game-info* fuel) menu-value)
  (when (= (-> *game-info* total-trys) 15)
    (set! (-> *game-info* total-trys) 16)
    (set! menu-value 999999.0)
    (set! mod-s "(More coming soon)")
    (set! autosave-delayed #t)
  )
  (when (= (-> *game-info* total-trys) 14)
    (set! (-> *game-info* total-trys) 15)
    (set! menu-value 200.0)
    (set! mod-s "Gol's Unbeknowngst")
    (set! autosave-delayed #t)
  )
(when (= (-> *game-info* total-trys) 13)
    (set! (-> *game-info* total-trys) 14)
    (set! menu-value 150.0)
    (set! mod-s "Rapid Fire")
    (set! autosave-delayed #t)
  )
  (when (= (-> *game-info* total-trys) 12)
    (set! (-> *game-info* total-trys) 13)
    (set! menu-value 125.0)
    (set! mod-s "Training Weight")
    (set! autosave-delayed #t)
  )
  (when (= (-> *game-info* total-trys) 11)
    (set! (-> *game-info* total-trys) 12)
    (set! menu-value 100.0)
    (set! mod-s "Pocket Rift Gate")
    (set! autosave-delayed #t)
  )
  (when (= (-> *game-info* total-trys) 10)
    (set! (-> *game-info* total-trys) 11)
    (set! menu-value 90.0)
    (set! mod-s "Mar's Punch")
    (set! autosave-delayed #t)
  )
  (when (= (-> *game-info* total-trys) 9)
    (set! (-> *game-info* total-trys) 10)
    (set! menu-value 85.0)
    (set! mod-s "+2HP Every Level")
    (set! autosave-delayed #t)
  )
  (when (= (-> *game-info* total-trys) 8)
    (set! (-> *game-info* total-trys) 9)
    (set! menu-value 77.0)
    (set! mod-s "Four-Leaf Clover")
    (set! autosave-delayed #t)
  )
  (when (= (-> *game-info* total-trys) 7)
    (set! (-> *game-info* total-trys) 8)
    (set! menu-value 60.0)
    (set! mod-s "Double Shot")
    (set! autosave-delayed #t)
  )
  (when (= (-> *game-info* total-trys) 6)
    (set! (-> *game-info* total-trys) 7)
    (set! menu-value 45.0)
    (set! mod-s "Upgraded Vehicles and Speed")
    (set! autosave-delayed #t)
  )
  (when (= (-> *game-info* total-trys) 5)
    (set! (-> *game-info* total-trys) 6)
    (set! menu-value 15.0)
    (set! mod-s "Upgrade Damage (x2)")
    (set! autosave-delayed #t)
  )
  (when (= (-> *game-info* total-trys) 4)
    (set! (-> *game-info* total-trys) 5)
    (set! menu-value 10.0)
    (set! mod-s "Upgrade Ammo (x2)")
    (set! autosave-delayed #t)
  )
)


(when (= wait-loading #t)
  (+! load-w 1)
  (when (= load-w 300)
    (script-eval '(want-load 'vinroom 'consiteb))
    (set! load-w 0)
    (set! wait-loading #f)
  )
)

(when ;tutorial for tp jak out of fortress
(and 
(= wait-tutorial #t)
(= (pause-allowed?) #t)
(or (= (-> (level-get-target-inside *level*) name) 'prison) (= (-> (level-get-target-inside *level*) name) 'forexita))
(= (paused?) #f)
)
  (+! tutoriali 1)
  (set! intro?i 0)
  (when (= tutoriali 1600)
    (send-event *target* 'continue (get-continue-by-name *game-info* "ctyport-hiphog"))
    (set! ohshit #t)
    (set! (-> *game-info* gem) 99999.0)
    (set! tutoriali 0)
    (set! wait-tutorial #f)
    (set! (-> *game-info* total-deaths) 0)
  )
)

#|
(when ;closed off to come back to later on
(and 
(= in-hub? #t)
(= vin-spawned? #f)
*target*
(= (pause-allowed?) #t)
(= (paused?) #f)
)
  (set! wait-vinspawn #t)
)
|#

(when (= wait-vinspawn #t)
  (+! waitspawn 1)
  (when (= waitspawn 300)
  (process-spawn vin-npc (new 'static 'vector :x (meters 755.3596) :y (meters 18.15) :z (meters 907.9631)))
  (set! vin-spawned? #t)
  (set! waitspawn 0)
  (set! wait-vinspawn #f)
  )
)

(when 
(and
(= run-in-progress #t)
(= (-> *setting-control* user-default play-hints) #t)
)
(set! (-> *setting-control* user-default play-hints) #f)
)

(when ;when the easter egg happens from HM+
(and 
(= ohshit #t)
(= (pause-allowed?) #t)
(= (paused?) #f)
)
  (+! ohshiti 1)
  (when (= ohshiti 240)
    (play-sound-file sound-ohshit (the int (* (-> *setting-control* user-current sfx-volume) 100)))
    (set! intro?i 0)
  )
  (when (= ohshiti 241)
    (set! (-> *mood-control* overide-weather-flag) #t)
  )
  (when (and (>= ohshiti 242)(< gt-i 0.9))
      (+! gt-i 0.01)
      (set! (-> *mood-control* overide cloud) gt-i)
    )
    (when (and (>= ohshiti 421)(< gf-i 0.9))
      (set! gf-i 0.01)
      (set! (-> *mood-control* overide fog) gf-i)
    )
  (when (> (-> *game-info* gem) 121.0)
  (-! (-> *game-info* gem) 121.0)
  )
  (when (= (-> *game-info* gem) 53.0)
    (set! (-> *game-info* gem) 0.0)
  )
  (when (= ohshiti 1200)
    (play-sound-file sound-endofworld (the int (* (-> *setting-control* user-current sfx-volume) 100)))
    (set! (-> *game-info* gem) 0.0)
    (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color x) 1.9921)
      (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color y) 1.9921)
      (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color z) 1.9921)
      (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color w) 2.0)
      (set! traffic-metalheads? #t)
      (send-event *traffic-manager* 'set-guard-target-level 100)
      (set! gt-i 0.0)
      (set! gf-i 0.0)
      (set! intro?i 0)
  )
  (when (>= ohshiti 1204)
    (send-event (ppointer->process *time-of-day*) 'change 'ratio 240.0) 
  (set! (-> *time-of-day-context* overide-enable) #f)
  (set! (-> *mood-control* overide-weather-flag) #t)
  (set! (-> *mood-control* overide fog) 1.0)
  (set! (-> *mood-control* overide cloud) 1.0)
  (set! (-> (level-get-target-inside *level*) mood-func)update-mood-nest)
  )
  ;Death params for tutorial
(when 
(or 
(and
(= (pause-allowed?) #t)
(= (-> *target* fact health) 0.0)
*target*
)
(= ohshiti 3290)
)
  (set! waitdie-tutorial #t)
  (set! traffic-metalheads? #f)
  (set! ohshit #f)
  (set! ohshiti 0)
  (send-event (ppointer->process *time-of-day*) 'change 'ratio 1.0) 
  (set! (-> *target* fact health) 8.0)
  (set! intro?i 0)
)
)

(when (= waitdie-tutorial #t)
  (+! waitdiei 1)
  (when (= waitdiei 1)
    (send-event *target* 'continue (get-continue-by-name *game-info* "consite-airlock"))
  )
  (when (= waitdiei 120)
    (play-task (game-task drill-eggs) 'debug #f)
    (script-eval '(want-load 'vinroom 'consiteb))
    (set! in-dialogue? #t)
    (set! log-sec 0)
    (set! log-id 1)
    (set! camera-locked #t)
    (set! di-s "Oh god... I was wrong, I was so so very wrong!")
    (set! di-s2 "") 
    (set! di-s3 "")
    (set! di-s4 "")
  )
  (when (= waitdiei 200)
    (set! waitdiei 0)
    (set! waitdie-tutorial #f)
  )
)


;(script-eval '(want-load 'vinroom 'consiteb))
;(script-eval '(want-display 'vinroom))
;(script-eval '(want-display 'consiteb))
;(set-vector! vin-npc 744.2 11.0 871.5 1.0)


(when 
(and 
(= in-dialogue? #t)
(not (cpad-hold? 0 x))
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>~S~%~S~%~S~%~S~%~%<COLOR_GREEN>Ok"
    di-s
    di-s2
    di-s3
    di-s4
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 300 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and 
(= in-dialogue? #t)
(cpad-hold? 0 x)
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>~S~%~S~%~S~%~S~%~%<COLOR_YELLOW>Ok"
    di-s
    di-s2
    di-s3
    di-s4
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 300 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and 
(= in-dialogue? #t)
(not (cpad-hold? 0 x))
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------~%~%~%~%~%~%~%~%~%-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
    di-s
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 285 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and 
(= in-dialogue? #t)
(cpad-hold? 0 x)
)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW>-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------~%~%~%~%~%~%~%~%~%-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
    di-s
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 285 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)



;self is the randomizer. It teleports the player to a random stage in a certain act, and then sets their task.
    (when (= act1-1 #t)
      (let (
        (level-pick (rand-vu-int-range 1 8))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! roll-shopitems #t)
        (set! enemy-drop-weapon-once #f)
        (when (= level-pick act-before1)
            (set! level-pick (rand-vu-int-range 1 8))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (set! print-stage 1)
          (when (and (= level-pick 1)(!= act-before1 1))
            (dm-play-task-with-continue (game-task ruins-tower) "ruins-start")
            (set! act-before1 1)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(!= act-before1 2))
            (dm-play-task-with-continue (game-task atoll-water) "atoll-start")
            (set! act-before1 2)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(!= act-before1 3))
            (dm-play-task-with-continue (game-task city-krew-delivery) "ctysluma-alley-no-hideout")
            (set! act-before1 4)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(!= act-before1 5))
            (dm-play-task-with-continue (game-task strip-rescue) "strip-start")
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (set! act-before1 7)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(!= act-before1 6))
            (dm-play-task-with-continue (game-task atoll-battle) "atoll-battle")
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (set! act-before1 8)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(!= act-before1 7))
            (dm-play-task-with-continue (game-task city-krew-collection) "ctyport-hiphog")
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node palace-boss-resolution))
            (set! act-before1 9)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(!= act-before1 8))
            (dm-play-task-with-continue (game-task city-keira-delivery) "ctyport-hiphog")
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node drill-eggs-resolution))
            (set! act-before1 12)
            (set! act1-1 #f)
            (set! waitenter #t)
            
          )
          (set! wait-extra-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
          (set! act-act 1)
        )
    )
    (when (= act1-2 #t)
      (let (
        (level-pick (rand-vu-int-range 1 12))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! print-stage 2)
        (when (= level-pick act-before1)
            (set! level-pick (rand-vu-int-range 1 12))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(!= act-before1 1))
            (dm-play-task-with-continue (game-task ruins-tower) "ruins-start")
            (set! act-before2 1)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(!= act-before1 2))
            (dm-play-task-with-continue (game-task atoll-water) "atoll-start")
            (set! act-before2 2)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(!= act-before1 3))
            (dm-play-task-with-continue (game-task fortress-dump) "fordumpa-start")
            (set! act-before2 3)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(!= act-before1 4))
            (dm-play-task-with-continue (game-task city-krew-delivery) "ctysluma-alley-no-hideout")
            (set! act-before2 4)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(!= act-before1 5))
            (dm-play-task-with-continue (game-task atoll-sig) "atoll-start")
            (set! act-before2 5)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(!= act-before1 6))
            (dm-play-task-with-continue (game-task sewer-enemy) "sewer-start")
            (set! act-before2 6)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(!= act-before1 7))
            (dm-play-task-with-continue (game-task strip-rescue) "strip-start")
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (set! act-before2 7)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(!= act-before1 8))
            (dm-play-task-with-continue (game-task atoll-battle) "atoll-battle")
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (set! act-before2 8)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(!= act-before1 9))
            (dm-play-task-with-continue (game-task city-krew-collection) "ctyport-hiphog")
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node palace-boss-resolution))
            (set! act-before2 9)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 10)(!= act-before1 10))
            (dm-play-task-with-continue (game-task city-power) "vinroom-start")
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (set! act-before2 10)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 11)(!= act-before1 11))
            (dm-play-task-with-continue (game-task city-keira-delivery) "ctyport-hiphog")
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node drill-eggs-resolution))
            (set! act-before2 11)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 12)(!= act-before1 12))
            (dm-play-task-with-continue (game-task mountain-lens) "mountain-start")
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (task-node-close! (game-task-node palace-boss-resolution))
            (set! act-before2 12)
            (set! act1-2 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )

    (when (= act1-3 #t)
      (let (
        (level-pick (rand-vu-int-range 1 12))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! print-stage 3)
        (when (= level-pick (or act-before1 act-before2))
            (set! level-pick (rand-vu-int-range 1 12))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(and (!= act-before1 1)(!= act-before2 1)))
            (dm-play-task-with-continue (game-task ruins-tower) "ruins-start")
            (set! act-before3 1)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(and (!= act-before1 2)(!= act-before2 2)))
            (dm-play-task-with-continue (game-task atoll-water) "atoll-start")
            (set! act-before3 2)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(and (!= act-before1 3)(!= act-before2 3)))
            (dm-play-task-with-continue (game-task fortress-dump) "fordumpa-start")
            (set! act-before3 3)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(and (!= act-before1 4)(!= act-before2 4)))
            (dm-play-task-with-continue (game-task city-krew-delivery) "ctysluma-alley-no-hideout")
            (set! act-before3 4)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(and (!= act-before1 5)(!= act-before2 5)))
            (dm-play-task-with-continue (game-task atoll-sig) "atoll-start")
            (set! act-before3 5)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(and (!= act-before1 6)(!= act-before2 6)))
            (dm-play-task-with-continue (game-task sewer-enemy) "sewer-start")
            (set! act-before3 6)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(and (!= act-before1 7)(!= act-before2 7)))
            (dm-play-task-with-continue (game-task strip-rescue) "strip-start")
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (set! act-before3 7)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(and (!= act-before1 8)(!= act-before2 8)))
            (dm-play-task-with-continue (game-task atoll-battle) "atoll-battle")
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (set! act-before3 8)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(and (!= act-before1 9)(!= act-before2 9)))
            (dm-play-task-with-continue (game-task city-krew-collection) "ctyport-hiphog")
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node palace-boss-resolution))
            (set! act-before3 9)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 10)(and (!= act-before1 10)(!= act-before2 10)))
            (dm-play-task-with-continue (game-task city-power) "vinroom-start")
            (task-node-close! (game-task-node drill-eggs-resolution))
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (set! act-before3 11)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 11)(and (!= act-before1 11)(!= act-before2 11)))
            (dm-play-task-with-continue (game-task city-keira-delivery) "ctyport-hiphog")
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node drill-eggs-resolution))
            (set! act-before3 11)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 12)(and (!= act-before1 12)(!= act-before2 12)))
            (dm-play-task-with-continue (game-task mountain-lens) "mountain-start")
            (task-node-close! (game-task-node city-yellow-gun-training-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
            (task-node-close! (game-task-node stadium-board1-resolution))
            (task-node-close! (game-task-node palace-boss-resolution))
            (set! act-before3 12)
            (set! act1-3 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )

    (when (= act1-4 #t)
      (let (
        (level-pick 1)
        )
          (when (= level-pick 1)
            (dm-play-task-with-continue (game-task palace-cable) "palcab-start")
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
          )
        )
        (set! print-stage 4)
        (set! act1-4 #f)
        (set! waitenter #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! (-> *game-info* skill) temp-orbs)
        (set! wait-for-ingame #t)
        
    )    
    (when (= act1-5 #t)
      (let (
        (level-pick 1)
        (gp-0 (-> *game-info* features))
        )
          (when (= level-pick 1)
            (dm-play-task-with-continue (game-task palace-boss) "palroof-boss")
            (task-node-close! (game-task-node mountain-collection-resolution))
            (task-node-close! (game-task-node city-krew-collection-resolution))
          )
        
        (set! print-stage 5)
        (set! act1-5 #f)
        (set! waitenter #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! (-> *game-info* skill) temp-orbs)
        (set! wait-for-ingame #t)
        (set! teleport-hiphog #f)
        (set! teleport-back? #f)
        (set! already-teleported? #f)
        (when (and 
        (not (logtest? gp-0 (game-feature gun-red)))
        (not (logtest? gp-0 (game-feature gun-yellow)))
        (not (logtest? gp-0 (game-feature gun-blue)))
        (not (logtest? gp-0 (game-feature gun-dark)))
        )
        (logior! gp-0 (game-feature gun-red))
        (set! give-gunred? #t)
        )
      )
    )    


;-------------------------ACT 2------------------------------
(when (= act2-1 #t)
      (let (
        (level-pick (rand-vu-int-range 1 11))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! roll-shopitems #t)
        (set! enemy-drop-weapon-once #f)
        (set! print-stage 1)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 11))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (set! act-act 2)
          (when (and (= level-pick 1)(!= act-before4 1))
            (dm-play-task-with-continue (game-task ruins-enemy) "ruins-start")
            (set! act-before4 1)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(!= act-before4 2))
            (dm-play-task-with-continue (game-task forest-scouts) "forest-start")
            (set! act-before4 2)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(!= act-before4 3))
            (dm-play-task-with-continue (game-task dig-knock-down) "dig1-start")
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before4 3)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(!= act-before4 4))
            (dm-play-task-with-continue (game-task strip-grenade) "strip-start")
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before4 4)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(!= act-before4 5))
            (dm-play-task-with-continue (game-task city-port-run) "ctyport-start")
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node drill-ship-resolution))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before4 5)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(!= act-before4 6))
            (dm-play-task-with-continue (game-task city-meet-brutter) "ctyport-hiphog")
            (task-node-close! (game-task-node city-meet-brutter-introduction))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before4 6)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(!= act-before4 7))
            (dm-play-task-with-continue (game-task sewer-board) "sewer-start")
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (task-node-close! (game-task-node drill-ship-resolution))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (set! act-before4 7)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(!= act-before4 8))
            (dm-play-task-with-continue (game-task city-intercept-tanker) "ctymarkb-tanker")
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node city-port-run-post-win))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (set! act-before4 8)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(!= act-before4 9))
            (dm-play-task-with-continue (game-task city-shuttle) "ctysluma-alley-no-hideout")
            (set! act-before4 9)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 10)(!= act-before4 10))
            (dm-play-task-with-continue (game-task dig-find-totem) "dig3-start")
            (task-node-close! (game-task-node city-port-run-post-win))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (task-node-close! (game-task-node forest-hunt-resolution))
            (set! act-before4 10)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 11)(!= act-before4 11))
            (dm-play-task-with-continue (game-task city-destroy-guard-vehicles) "ctysluma-alley-no-hideout")
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before4 11)
            (set! act2-1 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) 8.0)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )
  (when (= act2-2 #t)
      (let (
        (level-pick (rand-vu-int-range 1 11))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! print-stage 2)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 11))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(and (!= act-before4 1)(!= act-before5 1)))
            (dm-play-task-with-continue (game-task ruins-enemy) "ruins-start")
            (set! act-before5 1)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(!= act-before4 2))
            (dm-play-task-with-continue (game-task forest-scouts) "forest-start")
            (set! act-before5 2)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(!= act-before4 3))
            (dm-play-task-with-continue (game-task dig-knock-down) "dig1-start")
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before5 3)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(!= act-before4 4))
            (dm-play-task-with-continue (game-task strip-grenade) "strip-start")
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before5 4)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(!= act-before4 5))
            (dm-play-task-with-continue (game-task city-port-run) "ctyport-start")
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node drill-ship-resolution))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (set! act-before5 5)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(!= act-before4 6))
            (dm-play-task-with-continue (game-task city-meet-brutter) "ctyport-hiphog")
            (task-node-close! (game-task-node city-meet-brutter-introduction))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before5 6)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(!= act-before4 7))
            (dm-play-task-with-continue (game-task sewer-board) "sewer-start")
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (task-node-close! (game-task-node drill-ship-resolution))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (set! act-before5 7)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(!= act-before4 8))
            (dm-play-task-with-continue (game-task city-intercept-tanker) "ctymarkb-tanker")
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node city-port-run-post-win))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (set! act-before5 8)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(!= act-before4 9))
            (dm-play-task-with-continue (game-task city-shuttle) "ctysluma-alley-no-hideout")
            (set! act-before5 9)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 10)(!= act-before4 10))
            (dm-play-task-with-continue (game-task dig-find-totem) "dig3-start")
            (task-node-close! (game-task-node city-port-run-post-win))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (task-node-close! (game-task-node forest-hunt-resolution))
            (set! act-before5 10)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 11)(!= act-before4 11))
            (dm-play-task-with-continue (game-task city-destroy-guard-vehicles) "ctysluma-alley-no-hideout")
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before5 11)
            (set! act2-2 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )

    (when (= act2-3 #t)
      (let (
        (level-pick (rand-vu-int-range 1 11))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! print-stage 3)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 11))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(and (!= act-before4 1)(!= act-before5 1)))
            (dm-play-task-with-continue (game-task ruins-enemy) "ruins-start")
            (set! act-before6 1)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(and (!= act-before4 2)(!= act-before5 2)))
            (dm-play-task-with-continue (game-task forest-scouts) "forest-start")
            (set! act-before6 2)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(and (!= act-before4 3)(!= act-before5 3)))
            (dm-play-task-with-continue (game-task dig-knock-down) "dig1-start")
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before6 3)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(and (!= act-before4 4)(!= act-before5 4)))
            (dm-play-task-with-continue (game-task strip-grenade) "strip-start")
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before6 4)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(and (!= act-before4 5)(!= act-before5 5)))
            (dm-play-task-with-continue (game-task city-port-run) "ctyport-start")
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node drill-ship-resolution))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (set! act-before6 5)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(and (!= act-before4 6)(!= act-before5 6)))
            (dm-play-task-with-continue (game-task city-meet-brutter) "ctyport-hiphog")
            (task-node-close! (game-task-node city-meet-brutter-introduction))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before6 6)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(and (!= act-before4 7)(!= act-before5 7)))
            (dm-play-task-with-continue (game-task sewer-board) "sewer-start")
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (task-node-close! (game-task-node drill-ship-resolution))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (set! act-before6 7)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(and (!= act-before4 8)(!= act-before5 8)))
            (dm-play-task-with-continue (game-task city-intercept-tanker) "ctymarkb-tanker")
            (task-node-close! (game-task-node city-escort-kid-resolution))
            (task-node-close! (game-task-node city-port-run-post-win))
            (task-node-close! (game-task-node dig-find-totem-resolution))
            (task-node-close! (game-task-node city-destroy-guard-vehicles-resolution))
            (set! act-before6 8)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(and (!= act-before4 9)(!= act-before5 9)))
            (dm-play-task-with-continue (game-task city-shuttle) "ctysluma-alley-no-hideout")
            (set! act-before6 9)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 10)(and (!= act-before4 10)(!= act-before5 10)))
            (dm-play-task-with-continue (game-task dig-find-totem) "dig3-start")
            (task-node-close! (game-task-node city-port-run-post-win))
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (task-node-close! (game-task-node forest-hunt-resolution))
            (set! act-before6 10)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 11)(and (!= act-before4 11)(!= act-before5 11)))
            (dm-play-task-with-continue (game-task city-destroy-guard-vehicles) "ctysluma-alley-no-hideout")
            (task-node-close! (game-task-node city-intercept-tanker-resolution))
            (set! act-before6 11)
            (set! act2-3 #f)
            (set! waitenter #t)
            
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )

    (when (= act2-4 #t)
      (let (
        (level-pick 1)
        )
          (set! print-stage 4)
          (when (= level-pick 1)
            (dm-play-task-with-continue (game-task tomb-water) "tomb-boulder-pre")
            (task-node-close! (game-task-node tomb-poles-poles2))
          )
        )
        (set! act2-4 #f)
        (set! waitenter #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! (-> *game-info* skill) temp-orbs)
        (set! wait-for-ingame #t)
        
    )    
    (when (= act2-5 #t)
      (let (
        (level-pick 1)
        (gp-0 (-> *game-info* features))
        )
          (when (= level-pick 1)
            (dm-play-task-with-continue (game-task tomb-boss) "tombboss-start")
          )
        
        (set! print-stage 5)
        (set! act2-5 #f)
        (set! waitenter #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! (-> *game-info* skill) temp-orbs)
        (set! wait-for-ingame #t)
        (when (and 
        (not (logtest? gp-0 (game-feature gun-red)))
        (not (logtest? gp-0 (game-feature gun-yellow)))
        (not (logtest? gp-0 (game-feature gun-blue)))
        (not (logtest? gp-0 (game-feature gun-dark)))
        )
        (logior! gp-0 (game-feature gun-red))
        (set! give-gunred? #t)
        (set! teleport-hiphog #f)
        (set! teleport-back? #f)
        (set! already-teleported? #f)
        )
      )
    )    

;------------------------------------ACT 3----------------------------------------
(when (= act3-1 #t)
      (let (
        (level-pick (rand-vu-int-range 1 9))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! print-stage 1)
        (set! roll-shopitems #t)
        (set! enemy-drop-weapon-once #f)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 9))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (set! act-act 3)
          (when (and (= level-pick 1)(and (!= act-before7 1)(!= act-before7 1)))
            (dm-play-task-with-continue (game-task sewer-escort) "sewesc-start")
            (set! act-before7 1)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(!= act-before7 2))
            (dm-play-task-with-continue (game-task city-stop-bomb-bots) "ctysluma-alley-no-hideout")
            (set! act-before7 2)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(!= act-before7 3))
            (dm-play-task-with-continue (game-task strip-drop) "strip-start")
            (set! act-before7 3)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(!= act-before7 4))
            (dm-play-task-with-continue (game-task city-save-lurkers) "ctymarka-brutter")
            (set! act-before7 4)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(!= act-before7 5))
            (dm-play-task-with-continue (game-task under-sig) "under-start")
            (set! act-before7 5)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(!= act-before7 6))
            (dm-play-task-with-continue (game-task city-defend-stadium) "stadium-blimp-intro")
            (task-node-close! (game-task-node city-meet-brutter-introduction))
            (set! act-before7 6)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(!= act-before7 7))
            (dm-play-task-with-continue (game-task forest-protect) "forest-tree")
            (set! act-before7 7)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(!= act-before7 8))
            (dm-play-task-with-continue (game-task ruins-mech) "ruins-start")
            (set! act-before7 8)
            (set! act3-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(!= act-before7 9))
            (dm-play-task-with-continue (game-task city-escort-kid) "ctysluma-alley-no-hideout")
            (set! act-before7 9)
            (set! act3-1 #f)
            (set! waitenter #t)
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) 8.0)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )


(when (= act3-2 #t)
      (let (
        (level-pick (rand-vu-int-range 1 9))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! print-stage 2)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 9))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(and (!= act-before7 1)(!= act-before7 1)))
            (dm-play-task-with-continue (game-task sewer-escort) "sewesc-start")
            (set! act-before8 1)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(!= act-before7 2))
            (dm-play-task-with-continue (game-task city-stop-bomb-bots) "ctysluma-alley-no-hideout")
            (set! act-before8 2)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(!= act-before7 3))
            (dm-play-task-with-continue (game-task strip-drop) "strip-start")
            (set! act-before8 3)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(!= act-before7 4))
            (dm-play-task-with-continue (game-task city-save-lurkers) "ctymarka-brutter")
            (set! act-before8 4)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(!= act-before7 5))
            (dm-play-task-with-continue (game-task under-sig) "under-start")
            (set! act-before8 5)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(!= act-before7 6))
            (dm-play-task-with-continue (game-task city-defend-stadium) "stadium-blimp-intro")
            (task-node-close! (game-task-node city-meet-brutter-introduction))
            (set! act-before8 6)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(!= act-before7 7))
            (dm-play-task-with-continue (game-task forest-protect) "forest-tree")
            (set! act-before8 7)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(!= act-before7 8))
            (dm-play-task-with-continue (game-task ruins-mech) "ruins-start")
            (set! act-before8 8)
            (set! act3-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(!= act-before7 9))
            (dm-play-task-with-continue (game-task city-escort-kid) "ctysluma-alley-no-hideout")
            (set! act-before7 9)
            (set! act3-1 #f)
            (set! waitenter #t)
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )

    (when (= act3-3 #t)
      (let (
        (level-pick (rand-vu-int-range 1 9))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! print-stage 3)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 9))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (and (= level-pick 1)(and (!= act-before8 1)(!= act-before7 1)))
            (dm-play-task-with-continue (game-task sewer-escort) "sewesc-start")
            (set! act-before8 1)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 2)(and (!= act-before8 2)(!= act-before7 2)))
            (dm-play-task-with-continue (game-task city-stop-bomb-bots) "ctysluma-alley-no-hideout")
            (set! act-before8 2)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(and (!= act-before8 3)(!= act-before7 3)))
            (dm-play-task-with-continue (game-task strip-drop) "strip-start")
            (set! act-before8 3)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(and (!= act-before8 4)(!= act-before7 4)))
            (dm-play-task-with-continue (game-task city-save-lurkers) "ctymarka-brutter")
            (set! act-before8 4)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 5)(and (!= act-before8 5)(!= act-before7 5)))
            (dm-play-task-with-continue (game-task under-sig) "under-start")
            (set! act-before8 5)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 6)(and (!= act-before8 6)(!= act-before7 6)))
            (dm-play-task-with-continue (game-task city-defend-stadium) "stadium-blimp-intro")
            (task-node-close! (game-task-node city-meet-brutter-introduction))
            (set! act-before8 6)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 7)(and (!= act-before8 7)(!= act-before7 7)))
            (dm-play-task-with-continue (game-task forest-protect) "forest-tree")
            (set! act-before8 7)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 8)(and (!= act-before8 8)(!= act-before7 8)))
            (dm-play-task-with-continue (game-task ruins-mech) "ruins-start")
            (set! act-before8 8)
            (set! act3-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 9)(and (!= act-before7 9)(!= act-before8 9)))
            (dm-play-task-with-continue (game-task city-escort-kid) "ctysluma-alley-no-hideout")
            (set! act-before7 9)
            (set! act3-1 #f)
            (set! waitenter #t)
          )
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )






    (when (= act3-4 #t)
      (let (
        (level-pick 1)
        )
          (when (= level-pick 1)
            (dm-play-task-with-continue (game-task castle-break-in) "castle-start")
          )
        )
        (set! print-stage 4)
        (set! act3-4 #f)
        (set! waitenter #t)
        (set! wait-for-ingame #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! (-> *game-info* skill) temp-orbs)
        
    )    
    (when (= act3-5 #t)
      (let (
        (level-pick 1)
        (gp-0 (-> *game-info* features))
        )
          (when (= level-pick 1)
            (dm-play-task-with-continue (game-task castle-boss) "casboss-start")
            ;(set! avoidk-wait #t)
          )
        
        (set! print-stage 5)
        (set! act3-5 #f)
        (set! waitenter #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! (-> *game-info* skill) temp-orbs)
        (set! wait-for-ingame #t)
        (when (and 
        (not (logtest? gp-0 (game-feature gun-red)))
        (not (logtest? gp-0 (game-feature gun-yellow)))
        (not (logtest? gp-0 (game-feature gun-blue)))
        (not (logtest? gp-0 (game-feature gun-dark)))
        )
        (logior! gp-0 (game-feature gun-red))
        (set! give-gunred? #t)
        (set! teleport-hiphog #f)
        (set! teleport-back? #f)
        (set! already-teleported? #f)
        )
      )
    )    



(when (= act4-1 #t)
      (let (
        (level-pick 1)
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! print-stage 1)
        (set! act-act 4)
        (set! enemy-drop-weapon-once #f)
        (update-nestmood)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 4))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (= level-pick 1)
            (all-randomize)
            (set! act4-1 #f)
            (set! waitenter #t)
            
          )
          #|(when (and (= level-pick 2)(and (!= act-before9 2)(!= act-before9 2)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyslumc-slums"))
            ;(set! wait-procws #t)
            (set! act-before9 2)
            (set! act4-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(and (!= act-before9 3)(!= act-before9 3)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "forresca-start"))
            (play-task (game-task fortress-save-friends) 'debug #f)
            (set! act-before9 3)
            (set! act4-1 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(and (!= act-before9 4)(!= act-before9 4)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "throne-ashelin"))
            (play-task (game-task palace-sneak-in) 'debug #f)
            (task-node-close! (game-task-node palace-sneak-in-meeting))
            (set! act-before9 4)
            (set! act4-1 #f)
            (set! waitenter #t)
            
          )|#
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )


(when (= act4-2 #t)
      (let (
        (level-pick 1)
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! print-stage 2)
        (update-nestmood)
        (when (= level-pick act-before4)
            (set! level-pick (rand-vu-int-range 1 4))
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (= level-pick 1)
            (all-randomize)
            (set! act4-2 #f)
            (set! waitenter #t)
            
          )
          #|(when (and (= level-pick 2)(and (!= act-before9 2)(!= act-before10 2)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyslumc-slums"))
            (set! wait-procws #t)
            (set! act-before10 2)
            (set! act4-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(and (!= act-before9 3)(!= act-before10 3)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "forresca-start"))
            (play-task (game-task fortress-save-friends) 'debug #f)
            (set! act-before10 3)
            (set! act4-2 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(and (!= act-before9 4)(!= act-before10 4)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "throne-ashelin"))
            (play-task (game-task palace-sneak-in) 'debug #f)
            (task-node-close! (game-task-node palace-sneak-in-meeting))
            (set! act-before10 4)
            (set! act4-2 #f)
            (set! waitenter #t)
            
          )|#
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )

    (when (= act4-3 #t)
      (let (
        (level-pick (rand-vu-int-range 1 4))
        )
        (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked: ~D" level-pick)
        (set! print-stage 3)
        (update-nestmood)
        (when (= level-pick act-before4)
            (set! level-pick 1)
            (format #t "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Level picked the same mission! Rerolling to: ~D" level-pick)
          )
          (when (= level-pick 1)
            (all-randomize)
            (set! act4-3 #f)
            (set! waitenter #t)
            
          )
          #|(when (and (= level-pick 2)(and (!= act-before10 2)(!= act-before9 2)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "ctyslumc-slums"))
            (set! wait-procws #t)
            (set! act-before11 2)
            (set! act4-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 3)(and (!= act-before10 3)(!= act-before9 3)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "forresca-start"))
            (play-task (game-task fortress-save-friends) 'debug #f)
            (set! act-before11 3)
            (set! act4-3 #f)
            (set! waitenter #t)
            
          )
          (when (and (= level-pick 4)(and (!= act-before10 4)(!= act-before9 4)))
            (send-event *target* 'continue (get-continue-by-name *game-info* "throne-ashelin"))
            (play-task (game-task palace-sneak-in) 'debug #f)
            (task-node-close! (game-task-node palace-sneak-in-meeting))
            (set! act-before11 4)
            (set! act4-3 #f)
            (set! waitenter #t)
            
          )|#
          (set! wait-for-ingame #t)
          (set! (-> *game-info* gem) temp-skullgemamount)
          (set! (-> *target* fact health) temp-health)
          (set! (-> *game-info* skill) temp-orbs)
        )
    )

    (when (and (= dark-mode #f)(>= (-> *game-info* buzzer-total) 16.0))
      (set! dark-mode #t)
    )

    (when (= act4-4 #t)
      (let (
        (level-pick 1)
        )
          (when (= level-pick 1)
            (dm-play-task-with-continue (game-task nest-enter) "nest-gun")
          )
        )
        (set! print-stage 4)
        (set! act4-4 #f)
        (set! waitenter #t)
        (set! wait-for-ingame #t)
        (update-nestmood)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! (-> *game-info* skill) temp-orbs)
        
    )    
    (when (= act4-5 #t)
      (let (
        (level-pick 1)
        (gp-0 (-> *game-info* features))
        )
          (when (= level-pick 1)
            (dm-play-task-with-continue (game-task nest-boss) "nestb-boss-pit")
          )
        
        (set! print-stage 5)
        (set! act4-5 #f)
        (update-nestmood)
        (set! waitenter #t)
        (set! (-> *game-info* gem) temp-skullgemamount)
        (set! (-> *target* fact health) temp-health)
        (set! (-> *game-info* skill) temp-orbs)
        (set! wait-for-ingame #t)
        (when (and 
        (not (logtest? gp-0 (game-feature gun-red)))
        (not (logtest? gp-0 (game-feature gun-yellow)))
        (not (logtest? gp-0 (game-feature gun-blue)))
        (not (logtest? gp-0 (game-feature gun-dark)))
        )
        (logior! gp-0 (game-feature gun-red))
        (set! give-gunred? #t)
        (set! teleport-hiphog #f)
        (set! teleport-back? #f)
        (set! already-teleported? #f)
        )
      )
    )    




;(logior! (-> *game-info* secrets) (game-secrets invulnerable))
;Checks to see if task got completed, then processes the next area.

(when (= level-completed? #t)
  (+! act-stage 1)
  (+! (-> *game-info* buzzer-total) 1.0)
  (set! re-wait #t)
  (set! temp-skullgemamount (-> *game-info* gem))
  (set! temp-orbs (-> *game-info* skill))
  (set! please-reward #t)
  (color-gem)
    (when 
  (and 
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 0)
  )
    (set! total-skill 3)
  )
  (when 
  (and 
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 1)
  )
    (set! total-skill 6)
  )
  (when 
  (and 
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 2)
  )
    (set! total-skill 9)
  )
  (when 
  (and 
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 3)
  )
    (set! total-skill 12)
  )
  (when 
  (and 
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 4)
  )
    (set! total-skill 14)
  )
  (when 
  (and 
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 5)
  )
    (set! total-skill 16)
  )
  (when 
  (and 
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 6)
  )
    (set! total-skill 20)
  )
  (when 
  (and 
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 7)
  )
    (set! total-skill 30)
  )
  (when 
  (and 
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 8)
  )
    (set! total-skill 40)
  )
  (when 
  (and 
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 9)
  )
    (set! total-skill 100)
  )
  (set! autosave-delayed #t)

  (when (and (= print-stage 4)(!= act-act 4)(= teleport-hiphog #f))
    (set! teleport-hiphog #t)
  )
  (when (and (= (-> *game-info* total-deaths) 1)(= act-act 1))
    (set! color-floor #t)
  )
  (when (and (= (-> *game-info* total-deaths) 3)(= act-act 3))
    (set! color-floor #t)
  )
  (when (and (= (-> *game-info* total-deaths) 1)(!= act-act 1))
    (set! color-floor #f)
  )
  (when (and (= (-> *game-info* total-deaths) 3)(!= act-act 3))
  (set! color-floor #f)
  )
    (when (= (-> *game-info* buzzer-total) 1.0)
      (set! act1-1 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 2.0)(= level-completed? #t))
      (set! act1-2 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 3.0)(= level-completed? #t))
      (set! act1-3 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 4.0)(= level-completed? #t))
      (set! act1-4 #t)
      (set! level-completed? #f)
      (when (rand-vu-percent? 0.0)
        (set! boss-cursed #t)
      )
    )
    (when (and (= (-> *game-info* buzzer-total) 5.0)(= level-completed? #t))
      (set! act1-5 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 6.0)(= level-completed? #t))
      (set! act2-1 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 7.0)(= level-completed? #t))
      (set! act2-2 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 8.0)(= level-completed? #t))
      (set! act2-3 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 9.0)(= level-completed? #t))
      (set! act2-4 #t)
      (set! level-completed? #f)
      (when (rand-vu-percent? 0.0)
        (set! boss-cursed #t)
      )
    )
    (when (and (= (-> *game-info* buzzer-total) 10.0)(= level-completed? #t))
      (set! act2-5 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 11.0)(= level-completed? #t))
      (set! act3-1 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 12.0)(= level-completed? #t))
      (set! act3-2 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 13.0)(= level-completed? #t))
      (set! act3-3 #t)
      (set! level-completed? #f)
    )
    (when (and (= (-> *game-info* buzzer-total) 14.0)(= level-completed? #t))
      (set! act3-4 #t)
      (set! level-completed? #f)
      (when (rand-vu-percent? 0.0)
        (set! boss-cursed #t)
      )
    )
    (when (and (= (-> *game-info* buzzer-total) 15.0)(= level-completed? #t))
      (set! act3-5 #t)
      (set! level-completed? #f)
    )
    (when (and (>= (-> *game-info* total-deaths) 4)(= (-> *game-info* buzzer-total) 16.0)(= level-completed? #t))
      (all-randomize)
      (update-nestmood)
      (set! print-stage 1)
      (set! act-act 4)
      (set! level-completed? #f)
      (set! (-> *time-of-day-context* overide-enable) #f)
      (when (= (-> *game-info* karma) 2.0)
        (set! (-> *game-info* karma) 3.0)
      )
    )
    (when (and (< (-> *game-info* total-deaths) 4)(= (-> *game-info* buzzer-total) 16.0)(= level-completed? #t))
      (set! (-> *target* fact health) 0.0)
      (set! win-lose #t)
      (when (= (-> *game-info* karma) 2.0)
        (set! (-> *game-info* karma) 3.0)
      )
      (set! in-game? #t)
      (set! level-completed? #f)
    )
    (when (and (>= (-> *game-info* total-deaths) 4)(= (-> *game-info* buzzer-total) 17.0)(= level-completed? #t))
      (all-randomize)
      (update-nestmood)
      (set! print-stage 2)
      (set! act-act 4)
      (set! level-completed? #f)
    )
    (when (and (>= (-> *game-info* total-deaths) 4)(= (-> *game-info* buzzer-total) 18.0)(= level-completed? #t))
      (all-randomize)
      (update-nestmood)
      (set! print-stage 3)
      (set! act-act 4)
      (set! level-completed? #f)
    )
    (when (and (>= (-> *game-info* total-deaths) 4)(= (-> *game-info* buzzer-total) 19.0)(= level-completed? #t))
      (set! act4-4 #t)
      (update-nestmood)
      (set! print-stage 4)
      (set! act-act 4)
      (set! level-completed? #f)
      (when (rand-vu-percent? 0.0)
        (set! boss-cursed #t)
      )
    )
    (when (and (>= (-> *game-info* total-deaths) 4)(= (-> *game-info* buzzer-total) 20.0)(= level-completed? #t))
      (set! act4-5 #t)
      (set! print-stage 5)
      (set! level-completed? #f)
    )
  (set! level-completed? #f)
  (set! act-stage (the int (-> *game-info* buzzer-total)))
  (when (= blue-eco-spawned? #t)
    (set! blue-eco-spawned? #f)
  )
)

;wait for the in-game to not get the infinite complete mission glitch

(when (and (= in-game? #f)(= randomizer #t)(= wait-for-ingame #t)) ;waits a little bit to give grace period and to fix bugs too
  (+! waiting 1)
  (when (= waiting 800)
    (set! in-game? #t)
    (set! waiting 0)
    (set! wait-for-ingame #f)
    (when (= p-upgrade-ammo #t)
      (send-event *target* 'get-pickup (pickup-type ammo-yellow) 1000.0)
      (send-event *target* 'get-pickup (pickup-type ammo-red) 1000.0)
      (send-event *target* 'get-pickup (pickup-type ammo-blue) 1000.0)
      (send-event *target* 'get-pickup (pickup-type ammo-dark) 1000.0)
    )
  )
)

(when (= re-wait #t)
  (+! re-i 1)
  (when 
    (and
    (= please-reward #t) 
    (!= act-stage 1)
    (!= act-stage 5)
    (!= act-stage 10)
    (!= act-stage 15)
    (!= act-stage 16)
    (!= act-stage 17)
    (!= act-stage 18)
    (!= act-stage 19)
    (!= act-stage 20)
    (= re-i 500)
    )
      (set! reward-orbs #t)
      (set! please-reward #f)
    )
    (when (= re-i 501)
      (set! re-i 0)
      (set! re-wait #f)
      (when (and (= p-drinkable #t)(= (-> *target* fact health) 7.0))
    (+! (-> *target* fact health) 1.0)
  )
      (when (and (= p-drinkable #t)(<= (-> *target* fact health) 6.0))
    (+! (-> *target* fact health) 2.0)
  )
    )
)

(when (and (= in-game? #f)(= randomizer #t)(= wait-extra-for-ingame #t)) ;wait the extra time for in-game? without rewarding orbs.
  (+! waiting 1)
  (when (= waiting 1200)
    (set! in-game? #t)
    (set! waiting 0)
    (set! wait-extra-for-ingame #f)
    (when (= p-upgrade-ammo #t)
      (send-event *target* 'get-pickup (pickup-type ammo-yellow) 1000.0)
      (send-event *target* 'get-pickup (pickup-type ammo-red) 1000.0)
      (send-event *target* 'get-pickup (pickup-type ammo-blue) 1000.0)
      (send-event *target* 'get-pickup (pickup-type ammo-dark) 1000.0)
    )
  )
)

(when (and (= in-hub? #t)(= in-game? #t)) ;Workaround fix where in-game returns #t in hub.
  (set! in-game? #f)
  (set! run-in-progress #f)
)

(when (= reward-orbs #t) ;reward for completing floor with certain health range
  (when (= (-> *target* fact health) 8.0)
      (+! (-> *game-info* skill) (rand-vu-float-range 10.0 15.0))
      (when (!= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 9)
        (+! (-> *game-info* continue-deaths) 10000000)
      )
    )
    (when (= temp-health 7.0)
      (+! (-> *game-info* skill) (rand-vu-float-range 7.0 15.0))
    )
    (when (= temp-health 6.0)
      (+! (-> *game-info* skill) (rand-vu-float-range 6.0 10.0))
    )
    (when (= temp-health 5.0)
      (+! (-> *game-info* skill) (rand-vu-float-range 3.0 7.0))
    )
    (when (= temp-health 4.0)
      (+! (-> *game-info* skill) (rand-vu-float-range 1.0 7.0))
    )
    (when (= temp-health 3.0)
      (+! (-> *game-info* skill) (rand-vu-float-range 1.0 3.0))
    )
    (when (= temp-health 2.0)
      (+! (-> *game-info* skill) (rand-vu-float-range 1.0 2.0))
    )
    (when (= temp-health 1.0)
      (+! (-> *game-info* skill) (rand-vu-float-range 1.0 4.0))
    )
    (set! reward-orbs #f)
    (set! autosave-delayed #t)
)

(when (= roll-randomitem #t) ;Get random item from board-drop
  (let (
    (random-int (rand-vu-int-range 1 (-> *game-info* total-trys)))
    )
    (when 
    (and
     (= random-int 1)
     (!= (/ (mod (-> *game-info* task-deaths) 10) 1) 1)
     )
     (+! (-> *game-info* task-deaths) 1)
     (set! roll-randomitem #f)
    )
    (when 
    (and
     (= random-int 2)
     (!= (/ (mod (-> *game-info* task-deaths) 100) 10) 1)
     )
     (+! (-> *game-info* task-deaths) 10)
     (set! roll-randomitem #f)
    )
    (when 
    (and
     (= random-int 3)
     (!= (/ (mod (-> *game-info* task-deaths) 1000) 100) 1)
     )
     (+! (-> *game-info* task-deaths) 100)
     (set! roll-randomitem #f)
    )
    (when 
    (and
     (= random-int 4)
     (!= (/ (mod (-> *game-info* task-deaths) 10000) 1000) 1)
     )
     (+! (-> *game-info* task-deaths) 1000)
     (set! roll-randomitem #f)
    )
    (when 
    (and
     (= random-int 5)
     (!= (/ (mod (-> *game-info* task-deaths) 100000) 10000) 1)
     )
     (+! (-> *game-info* task-deaths) 10000)
     (set! roll-randomitem #f)
    )
    (when 
    (and
     (= random-int 6)
     (!= (/ (mod (-> *game-info* task-deaths) 1000000) 100000) 1)
     )
     (+! (-> *game-info* task-deaths) 100000)
     (set! roll-randomitem #f)
    )
    (when 
    (and
     (= random-int 7)
     (!= (/ (mod (-> *game-info* task-deaths) 10000000) 1000000) 1)
     )
     (+! (-> *game-info* task-deaths) 1000000)
     (set! roll-randomitem #f)
    )
    (when 
    (and
     (= random-int 8)
     (!= (/ (mod (-> *game-info* task-deaths) 100000000) 10000000) 1)
     )
     (+! (-> *game-info* task-deaths) 10000000)
     (set! roll-randomitem #f)
    )
    (when 
    (and
     (= random-int 9)
     (!= (/ (mod (-> *game-info* task-deaths) 100000000) 10000000) 1)
     )
     (+! (-> *game-info* task-deaths) 10000000)
     (set! roll-randomitem #f)
    )
    (when 
    (and
     (= random-int 10)
     (!= (/ (mod (-> *game-info* continue-deaths) 10) 1) 1)
     )
     (+! (-> *game-info* continue-deaths) 1)
     (when (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 9);luck increase 1
      (+! (-> *game-info* continue-deaths) 10000000)
    )
    (when (<= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 7);luck increase 2
      (+! (-> *game-info* continue-deaths) 20000000)
    )
     (set! roll-randomitem #f)
    )
    (when 
    (and
     (= random-int 11)
     (!= (/ (mod (-> *game-info* continue-deaths) 100) 10) 1)
     )
     (+! (-> *game-info* continue-deaths) 10)
     (set! roll-randomitem #f)
    )
    (when 
    (and
     (= random-int 12)
     (!= (/ (mod (-> *game-info* continue-deaths) 1000) 100) 1)
     )
     (+! (-> *game-info* continue-deaths) 100)
     (set! roll-randomitem #f)
    )
    (when 
    (and
     (= random-int 13)
     (!= (/ (mod (-> *game-info* continue-deaths) 10000) 1000) 1)
     )
     (set! random-int (rand-vu-int-range 1 (-> *game-info* total-trys)))
    )
    (when 
    (and
     (= random-int 14)
     (!= (/ (mod (-> *game-info* continue-deaths) 100000) 10000) 1)
     )
     (set! random-int (rand-vu-int-range 1 (-> *game-info* total-trys)))
    )
    (when 
    (and
     (= random-int 15)
     (!= (/ (mod (-> *game-info* continue-deaths) 1000000) 100000) 1)
     )
     (+! (-> *game-info* continue-deaths) 10000)
     (set! roll-randomitem #f)
    )
    (when 
    (and
     (= random-int 16)
     (!= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 1)
     )
     (+! (-> *game-info* continue-deaths) 1000000)
     (set! roll-randomitem #f)
    )
    (when 
    (and 
    (>= (-> *game-info* karma) 3.0)
    (= roll-randomitem #f)
    (!= (/ (mod (-> *game-info* task-deaths) 1000000000) 100000000) 1)
    (rand-vu-percent? luck)
    )
      (+! (-> *game-info* task-deaths) 100000000)
    )
  )
)

(when 
(and 
(= avoidc-waitb #t)
(not *scene-player*)
(= in-menu2 #f)
(= stat-menu #f)
)
(+! avoidc-wait 1)
  (when (= avoidc-wait 1)
    (send-event *target* 'change-mode 'normal)
    (set! pause-menu-blocked? #t)
    (set! temp-health (-> *target* fact health))
  )
  (when (= avoidc-wait 120)
    (set! avoidc-waitb #f)
    (set! avoidc-wait 0)
    (set! level-completed? #t)
    (set! pause-menu-blocked? #f)
  )
)

  #|
  MODULO/DIVISION
The equation to extract the 0 in the 100's place is (/ (mod 11011 1000) 100) This will return 0.
Similarly, if we wanted to add a 1 in the 100's place, just do (+ (11011) 100)
This is the legend for all numbers

This number is taken from (-> *game-info* total-deaths). It is used to save the values of your current items to game-save.

10000000000
These numbers go down in order from the ids. The first 1 is to save all the 0's

(/ (mod 0000000001 10) 1) = 1's (1st place, Yellow Gun)
(/ (mod 0000000010 100) 10) = 10's (2nd place, Blue Gun)
(/ (mod 0000000100 1000) 100) = 100's (3rd place, Peacemaker)
(/ (mod 0000001000 10000) 1000) = 1000's (4th place, Upgrade Red Speed)
(/ (mod 0000010000 100000) 10000) = 10,000's (5th place, Upgrade Ammo)
(/ (mod 0000100000 1000000) 100000) = 100,000's (6th place, Upgrade Damage)
(/ (mod 0001000000 10000000) 1000000) = 1,000,000's (7th place, Buffed Vehicles)
(/ (mod 0010000000 100000000) 10000000) = 10,000,000's (8th place, Double Shot)
(/ (mod 0100000000 1000000000) 100000000) = 100,000,000's (9th place, Green, Red, Blue Eco Shard)
(/ (mod 1000000000 10000000000) 100000000) = 1,000,000,000's (10th place, in-game?) 1=false 2=true
|#


(when                     ;When loading back into your run
(and 
(!= (-> *game-info* buzzer-total) 0.0)
(and 
(= in-game? #f)
(= wait-extra-for-ingame #f)
)
(= (paused?) #f)
(= (pause-allowed?) #t)
*target*
)
  (set! item-display? #t)
  (set! run-in-progress #t)
  (set! wait-extra-for-ingame #t)
  (set! display-run #t)
  (set! roll-shopitems #t)
  (set! ohshiti 0)
  (set! ohshit #f)
  (set! wait-tutorial #f)
  (set! tutoriali 0)
  (set! display-death-screen #t)
  (set! rnginfo #t)
  (when 
(and
(task-node-closed? (game-task-node palace-boss-introduction))
(not (task-node-closed? (game-task-node palace-boss-resolution)))
(= grab-method #f)
)
  (set! grab-method #t)
  (when (rand-vu-percent? 0.0)
        (set! boss-cursed #t)
        (set! wait-cb #t)
      )
)
  (when (and (= print-stage 4)(!= act-act 4)(= teleport-hiphog #f))
    (set! teleport-hiphog #t)
  )
  (when (and (= (-> *game-info* total-deaths) 1)(= act-act 1))
    (set! color-floor #t)
  )
  (when (and (= (-> *game-info* total-deaths) 3)(= act-act 3))
    (set! color-floor #t)
  )
  (when (and (= (-> *game-info* total-deaths) 1)(!= act-act 1))
    (set! color-floor #f)
  )
  (when (and (= (-> *game-info* total-deaths) 3)(!= act-act 3))
  (set! color-floor #f)
  )
#|  (when (and 
  (= (-> (level-get-target-inside *level*) mood-func)update-mood-nest)
  (<= (-> *game-info* buzzer-total) 16)
  )
    (set! (-> (level-get-target-inside *level*) mood-func)update-mood-default)
  )|#
#|
(when 
(and
(task-node-closed? (game-task-node palace-boss-introduction))
(not (task-node-closed? (game-task-node palace-boss-resolution)))
(= grab-method #f)
)
  (set! grab-method #t)
  (when (rand-vu-percent? curse)
        (set! boss-cursed #t)
      )
)|#
    

  (when (!= (the int (-> *game-info* buzzer-total)) act-stage)
    (set! act-stage (the int (-> *game-info* buzzer-total)))
    (when 
    (and 
    (<= (-> *game-info* buzzer-total) 5)
    (!= act-act 1)
    )
      (set! act-act 1)
    )
    (when 
    (and 
    (>= (-> *game-info* buzzer-total) 6)
    (<= (-> *game-info* buzzer-total) 10)
    (!= act-act 2)
    )
      (set! act-act 2)
    )
    (when 
    (and 
    (>= (-> *game-info* buzzer-total) 11)
    (<= (-> *game-info* buzzer-total) 15)
    (!= act-act 3)
    )
      (set! act-act 3)
    )
    (when 
    (and 
    (>= (-> *game-info* buzzer-total) 16)
    (<= (-> *game-info* buzzer-total) 20)
    (!= act-act 4)
    )
      (set! act-act 4)
    )
    (when (and (= (-> *game-info* buzzer-total) 1.0)(!= print-stage 1))
      (set! print-stage 1)
    )
    (when (and (= (-> *game-info* buzzer-total) 2.0)(!= print-stage 2))
      (set! print-stage 2)
    )
    (when (and (= (-> *game-info* buzzer-total) 3.0)(!= print-stage 3))
      (set! print-stage 3)
    )
    (when (and (= (-> *game-info* buzzer-total) 4.0)(!= print-stage 4))
      (set! print-stage 4)
    )
    (when (and (= (-> *game-info* buzzer-total) 5.0)(!= print-stage 5))
      (set! print-stage 5)
    )
    (when (and (= (-> *game-info* buzzer-total) 6.0)(!= print-stage 1))
      (set! print-stage 1)
    )
    (when (and (= (-> *game-info* buzzer-total) 7.0)(!= print-stage 2))
      (set! print-stage 2)
    )
    (when (and (= (-> *game-info* buzzer-total) 8.0)(!= print-stage 3))
      (set! print-stage 3)
    )
    (when (and (= (-> *game-info* buzzer-total) 9.0)(!= print-stage 4))
      (set! print-stage 4)
    )
    (when (and (= (-> *game-info* buzzer-total) 10.0)(!= print-stage 5))
      (set! print-stage 5)
    )
    (when (and (= (-> *game-info* buzzer-total) 11.0)(!= print-stage 1))
      (set! print-stage 1)
    )
    (when (and (= (-> *game-info* buzzer-total) 12.0)(!= print-stage 2))
      (set! print-stage 2)
    )
    (when (and (= (-> *game-info* buzzer-total) 13.0)(!= print-stage 3))
      (set! print-stage 3)
    )
    (when (and (= (-> *game-info* buzzer-total) 14.0)(!= print-stage 4))
      (set! print-stage 4)
    )
    (when (and (= (-> *game-info* buzzer-total) 15.0)(!= print-stage 5))
      (set! print-stage 5)
    )
    (when (and (= (-> *game-info* buzzer-total) 16.0)(!= print-stage 1))
      (set! print-stage 1)
    )
    (when (and (= (-> *game-info* buzzer-total) 17.0)(!= print-stage 2))
      (set! print-stage 2)
    )
    (when (and (= (-> *game-info* buzzer-total) 18.0)(!= print-stage 3))
      (set! print-stage 3)
    )
    (when (and (= (-> *game-info* buzzer-total) 19.0)(!= print-stage 4))
      (set! print-stage 4)
    )
    (when (and (= (-> *game-info* buzzer-total) 20.0)(!= print-stage 5))
      (set! print-stage 5)
    )
  )
)


(when (= wait-cb #t)
    (+! w-cb 1)
  (when (= w-cb 30)
    (send-event *target* 'continue (get-continue-by-name *game-info* "ruins-start"))
  )
  (when (= w-cb 60)
    (send-event *target* 'continue (get-continue-by-name *game-info* "palroof-boss"))
    (set! w-cb 0)
    (set! wait-cb #f)
  )
)

;init-spec 6, 7, 8, seem to be xyz and 9 seems to be w.

(when 
(and 
(= powered? #t)
(= (pause-allowed?) #t)
*target*
(not *scene-player*)
(= (paused?) #f)
)
  (+! power-dur 1)
  (when (= power-dur 1)
    ;particle values go here
    (set! (-> *part-id-table* 220 init-specs 5 initial-valuef) 255.0);dark
    (set! (-> *part-id-table* 220 init-specs 8 initial-valuef) 128.0);dark
    (set! (-> *part-id-table* 216 init-specs 6 initial-valuef) 255.0);dark
    (set! (-> *part-id-table* 188 init-specs 8 initial-valuef) 255.0);red
    (set! (-> *part-id-table* 189 init-specs 8 initial-valuef) 255.0);red
    (set! (-> *part-id-table* 189 init-specs 9 initial-valuef) 255.0);red
    (set! (-> *part-id-table* 224 init-specs 8 initial-valuef) 255.0);yellow
    (set! (-> *part-id-table* 224 init-specs 9 initial-valuef) 15.0);yellow
    (set! (-> *part-id-table* 230 init-specs 8 initial-valuef) 255.0);yellow
    (set! (-> *part-id-table* 211 init-specs 6 initial-valuef) 255.0);blue
    (set! power-level "IllllllllllI")
  )


  (when (= p-sage-dark #f)
    (when (= power-dur 60)
    (set! power-level "Illlllllll I")
  )
  (when (= power-dur 120)
    (set! power-level "Illllllll  I")
  )
  (when (= power-dur 180)
    (set! power-level "Illlllll   I")
  )
  (when (= power-dur 240)
    (set! power-level "Illllll    I")
  )
  (when (= power-dur 300)
    (set! power-level "Illlll     I")
  )
  (when (= power-dur 360)
    (set! power-level "Illll      I")
  )
  (when (= power-dur 420)
    (set! power-level "Illl       I")
  )
  (when (= power-dur 480)
    (set! power-level "Ill        I")
  )
  (when (= power-dur 540)
    (set! power-level "Il         I")
  )
  (when (= power-dur 599)
    (set! power-level "I          I")
  )
  )

  (when (= p-sage-dark #t)
    (when (= power-dur 180)
    (set! power-level "Illlllllll I")
  )
  (when (= power-dur 360)
    (set! power-level "Illllllll  I")
  )
  (when (= power-dur 180)
    (set! power-level "Illlllll   I")
  )
  (when (= power-dur 540)
    (set! power-level "Illllll    I")
  )
  (when (= power-dur 720)
    (set! power-level "Illlll     I")
  )
  (when (= power-dur 900)
    (set! power-level "Illll      I")
  )
  (when (= power-dur 1080)
    (set! power-level "Illl       I")
  )
  (when (= power-dur 1260)
    (set! power-level "Ill        I")
  )
  (when (= power-dur 1440)
    (set! power-level "Il         I")
  )
  (when (= power-dur 1620)
    (set! power-level "I          I")
  )
  )

(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>LIGHT ECO SURGE~%<COLOR_PINK>~S"
    power-level
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 340 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))

)

(when (= p-sage-dark #f)
    (when (= power-dur 600)
    (set! power-dur 0)
    (set! powered? #f)
    (set! power-shoti-y 0)
    (set! power-shot-y #f)
    (set! power-shoti-b 0)
    (set! power-shot-b #f)
    (set! power-shoti-r 0)
    (set! power-shot-r #f)
    (set! power-shoti-d 0)
    (set! power-shot-d #f)
    ;particle values are set back here
    (set! (-> *part-id-table* 220 init-specs 8 initial-valuef) 16.0);dark
    (set! (-> *part-id-table* 220 init-specs 5 initial-valuef) 0.0)
    (set! (-> *part-id-table* 216 init-specs 6 initial-valuef) 0.0)
    (set! (-> *part-id-table* 224 init-specs 8 initial-valuef) 0.0);yellow
    (set! (-> *part-id-table* 224 init-specs 9 initial-valuef) 8.0)
    (set! (-> *part-id-table* 230 init-specs 8 initial-valuef) 0.0)
    (set! (-> *part-id-table* 188 init-specs 8 initial-valuef) 0.0);red
    (set! (-> *part-id-table* 189 init-specs 8 initial-valuef) 0.0)
    (set! (-> *part-id-table* 189 init-specs 9 initial-valuef) 96.0)
    (set! (-> *part-id-table* 211 init-specs 6 initial-valuef) 0.0);blue
  )
  )
  (when (= p-sage-dark #t)
    (when (= power-dur 1621)
    (set! power-dur 0)
    (set! powered? #f)
    (set! power-shoti-y 0)
    (set! power-shot-y #f)
    (set! power-shoti-b 0)
    (set! power-shot-b #f)
    (set! power-shoti-r 0)
    (set! power-shot-r #f)
    (set! power-shoti-d 0)
    (set! power-shot-d #f)
    ;particle values are set back here
    (set! (-> *part-id-table* 220 init-specs 8 initial-valuef) 16.0);dark
    (set! (-> *part-id-table* 220 init-specs 5 initial-valuef) 0.0)
    (set! (-> *part-id-table* 216 init-specs 6 initial-valuef) 0.0)
    (set! (-> *part-id-table* 224 init-specs 8 initial-valuef) 0.0);yellow
    (set! (-> *part-id-table* 224 init-specs 9 initial-valuef) 8.0)
    (set! (-> *part-id-table* 230 init-specs 8 initial-valuef) 0.0)
    (set! (-> *part-id-table* 188 init-specs 8 initial-valuef) 0.0);red
    (set! (-> *part-id-table* 189 init-specs 8 initial-valuef) 0.0)
    (set! (-> *part-id-table* 189 init-specs 9 initial-valuef) 96.0)
    (set! (-> *part-id-table* 211 init-specs 6 initial-valuef) 0.0);blue
  )
  )

(when (= power-shot-y #t)
  (+! power-shoti-y 1)
  (when (= power-shoti-y 3)
    (someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )
  (when (= power-shoti-y 6)
    (someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )
  (when (= power-shoti-y 9)
    (someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )
  (when (= power-shoti-y 12)
    (someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )
  (when (= power-shoti-y 15)
    (someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )
  (when (= power-shoti-y 18)
    (someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )
  (when (= power-shoti-y 21)
    (someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    (set! power-shot-y #f)
  )
)

(when (= power-shot-b #t)
  (+! power-shoti-b 1)
  (when (= power-shoti-b 3)
    (someone-fire-blue *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )
  (when (= power-shoti-b 6)
    (someone-fire-blue *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )
  (when (= power-shoti-b 9)
    (someone-fire-blue *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )
  (when (= power-shoti-b 12)
    (someone-fire-blue *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )
  (when (= power-shoti-b 15)
    (someone-fire-blue *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )
  (when (= power-shoti-b 18)
    (someone-fire-blue *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )
  (when (= power-shoti-b 21)
    (someone-fire-blue *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    (set! power-shot-b #f)
  )
)

(when (= power-shot-r #t)
  (+! power-shoti-r 1)
  (when (= power-shoti-r 3)
    (someone-fire-red *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )
  (when (= power-shoti-r 6)
    (someone-fire-red *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )
  (when (= power-shoti-r 9)
    (someone-fire-red *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )
  (when (= power-shoti-r 12)
    (someone-fire-red *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )
  (when (= power-shoti-r 15)
    (someone-fire-red *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )
  (when (= power-shoti-r 18)
    (someone-fire-red *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )
  (when (= power-shoti-r 21)
    (someone-fire-red *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    (set! power-shot-r #f)
  )
)

(when (= power-shot-d #t)
  (+! power-shoti-d 1)
  (when (= power-shoti-d 3)
    (someone-fire-dark *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )
  (when (= power-shoti-d 6)
    (someone-fire-dark *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )
  (when (= power-shoti-d 9)
    (someone-fire-dark *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )
  (when (= power-shoti-d 12)
    (someone-fire-dark *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )
  (when (= power-shoti-d 15)
    (someone-fire-dark *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )
  (when (= power-shoti-d 18)
    (someone-fire-dark *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )
  (when (= power-shoti-d 21)
    (someone-fire-dark *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    (set! power-shot-d #f)
  )
)

(when (= wait-power-respawn #t)
  (+! wpr-i 1)
  (when (= wpr-i 300)
    (set! wpr-i 0)
    (set! wait-power-respawn #f)
  )
)

(when 
  (and 
  (= p-red-gun #f)
  (= item-update #f)
  (= (/ (mod (-> *game-info* task-deaths) 10) 1) 1)
  )
    (set! p-red-gun #t)
    (set! item-tss1 "Scatter Gun")
    (set! item-update #t)
  )
  (when 
  (and 
  (= p-blue-gun #f)
  (= item-update #f)
  (= (/ (mod (-> *game-info* task-deaths) 100) 10) 1)
  )
    (set! p-blue-gun #t)
    (set! item-tss1 "Blue Gun")
    (set! item-update #t)
  )
  (when 
  (and 
  (= p-dark-gun #f)
  (= item-update #f)
  (= (/ (mod (-> *game-info* task-deaths) 1000) 100) 1)
  )
    (set! p-dark-gun #t)
    (set! item-tss1 "Peacemaker")
    (set! item-update #t)
  )
  (when 
  (and 
  (= p-upgrade-red #f)
  (= item-update #f)
  (= (/ (mod (-> *game-info* task-deaths) 10000) 1000) 1)
  )
    (set! p-upgrade-red #t)
    (set! item-tss1 "Scattergun ROF")
    (set! item-update #t)
  )
      (when 
  (and 
  (= p-upgrade-ammo #f)
  (= item-update #f)
  (= (/ (mod (-> *game-info* task-deaths) 100000) 10000) 1)
  )
    (set! p-upgrade-ammo #t)
    (set! item-tss1 "Upgraded Ammo")
    (set! item-update #t)
  )

      (when 
  (and 
  (= p-upgrade-damage #f)
  (= item-update #f)
  (= (/ (mod (-> *game-info* task-deaths) 1000000) 100000) 1)
  )
    (set! p-upgrade-damage #t)
    (set! item-tss1 "Upgraded Damage")
    (set! item-update #t)
  )
  (when 
  (and 
  (= p-upgrade-vehicles #f)
  (= item-update #f)
  (= (/ (mod (-> *game-info* task-deaths) 10000000) 1000000) 1)
  )
    (set! p-upgrade-vehicles #t)
    (= item-update #f)
    (set! item-tss1 "Upgraded Vehicles")
    (set! item-update #t)
  )
  (when 
  (and 
  (= p-double-shot #f)
  (= item-update #f)
  (= (/ (mod (-> *game-info* task-deaths) 100000000) 10000000) 1)
  )
    (set! p-double-shot #t)
    (= item-update #f)
    (set! item-tss1 "Double Shot")
    (set! item-update #t)
  )
  (when 
  (and 
  (= p-explode-shot #f)
  (= item-update #f)
  (= (/ (mod (-> *game-info* task-deaths) 1000000000) 100000000) 1)
  )
    (set! p-explode-shot #t)
    (set! item-tss1 "Explosive Yellow Shot")
    (set! item-update #t)
  )
  (when 
  (and 
  (= p-clover #f)
  (= item-update #f)
  (= (/ (mod (-> *game-info* continue-deaths) 10) 1) 1)
  )
    (set! p-clover #t)
    (set! item-tss1 "Four-Leaf Clover")
    (set! item-update #t)
  )
  (when 
  (and 
  (= p-drinkable #f)
  (= item-update #f)
  (= (/ (mod (-> *game-info* continue-deaths) 100) 10) 1)
  )
    (set! p-drinkable #t)
    (set! item-tss1 "+2HP Every Level")
    (set! item-update #t)
  )
  (when 
  (and 
  (= p-big-punch #f)
  (= item-update #f)
  (= (/ (mod (-> *game-info* continue-deaths) 1000) 100) 1)
  )
    (set! p-big-punch #t)
    (set! item-tss1 "Mar's Punch")
    (set! item-update #t)
  )
  (when 
  (and 
  (= p-sage-yellow #f)
  (= item-update #f)
  (= (/ (mod (-> *game-info* continue-deaths) 10000) 1000) 1)
  )
    (set! p-sage-yellow #t)
    (set! item-tss1 "Pocket Rift Gate")
    (set! item-update #t)
  )
  (when 
  (and 
  (= p-sage-blue #f)
  (= item-update #f)
  (= (/ (mod (-> *game-info* continue-deaths) 100000) 10000) 1)
  )
    (set! p-sage-blue #t)
    (set! item-tss1 "Training Weight")
    (set! item-update #t)
  )
  (when 
  (and 
  (= p-sage-red #f)
  (= item-update #f)
  (= (/ (mod (-> *game-info* continue-deaths) 1000000) 100000) 1)
  )
    (set! p-sage-red #t)
    (set! item-tss1 "Rapid Fire")
    (set! item-update #t)
  )
  (when 
  (and 
  (= p-sage-dark #f)
  (= item-update #f)
  (= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 1)
  )
    (set! p-sage-dark #t)
    (set! item-tss1 "Gol's Unbeknowngst")
    (set! item-update #t)
  )
  
(when 
  (and 
  (= p-red-gun #t)
  (!= (/ (mod (-> *game-info* task-deaths) 10) 1) 1)
  )
    (set! p-red-gun #f)
  )
  (when 
  (and 
  (= p-blue-gun #t)
  (!= (/ (mod (-> *game-info* task-deaths) 100) 10) 1)
  )
    (set! p-blue-gun #f)
  )
  (when 
  (and 
  (= p-dark-gun #t)
  (!= (/ (mod (-> *game-info* task-deaths) 1000) 100) 1)
  )
    (set! p-dark-gun #f)
  )
  (when 
  (and 
  (= p-upgrade-red #t)
  (!= (/ (mod (-> *game-info* task-deaths) 10000) 1000) 1)
  )
    (set! p-upgrade-red #f)
  )
      (when 
  (and 
  (= p-upgrade-ammo #t)
  (!= (/ (mod (-> *game-info* task-deaths) 100000) 10000) 1)
  )
    (set! p-upgrade-ammo #f)
  )

      (when 
  (and 
  (= p-upgrade-damage #t)
  (!= (/ (mod (-> *game-info* task-deaths) 1000000) 100000) 1)
  )
    (set! p-upgrade-damage #f)
  )
  (when 
  (and 
  (= p-upgrade-vehicles #t)
  (!= (/ (mod (-> *game-info* task-deaths) 10000000) 1000000) 1)
  )
    (set! p-upgrade-vehicles #f)
  )
  (when 
  (and 
  (= p-double-shot #t)
  (!= (/ (mod (-> *game-info* task-deaths) 100000000) 10000000) 1)
  )
    (set! p-double-shot #f)
  )
  (when 
  (and 
  (= p-explode-shot #t)
  (!= (/ (mod (-> *game-info* task-deaths) 1000000000) 100000000) 1)
  )
    (set! p-explode-shot #f)
  )

(when 
  (and 
  (= p-clover #t)
  (!= (/ (mod (-> *game-info* continue-deaths) 10) 1) 1)
  )
    (set! p-clover #f)
  )

  (when 
  (and 
  (= p-drinkable #t)
  (!= (/ (mod (-> *game-info* continue-deaths) 100) 10) 1)
  )
    (set! p-drinkable #f)
  )
  (when 
  (and 
  (= p-big-punch #t)
  (!= (/ (mod (-> *game-info* continue-deaths) 1000) 100) 1)
  )
    (set! p-big-punch #f)
  )
    (when 
  (and 
  (= p-sage-yellow #t)
  (!= (/ (mod (-> *game-info* continue-deaths) 10000) 1000) 1)
  )
    (set! p-sage-yellow #f)
  )
  (when 
  (and 
  (= p-sage-blue #t)
  (!= (/ (mod (-> *game-info* continue-deaths) 100000) 10000) 1)
  )
    (set! p-sage-blue #f)
  )
  (when 
  (and 
  (= p-sage-red #t)
  (!= (/ (mod (-> *game-info* continue-deaths) 1000000) 100000) 1)
  )
    (set! p-sage-red #f)
  )
  (when 
  (and 
  (= p-sage-dark #t)
  (!= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 1)
  )
    (set! p-sage-dark #f)
  )


  (when 
  (and 
  (!= curse 0.0)
  (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 0)
  )
    (set! curse 0.0)
    (set! curse-level 0)
  )
  (when 
  (and 
  (!= curse 0.03)
  (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 1)
  )
    (set! curse 0.03)
    (set! curse-level 1)
  )
 (when 
  (and 
  (!= curse 0.06)
  (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 2)
  )
    (set! curse 0.06)
    (set! curse-level 2)
  )
  (when 
  (and 
  (!= curse 0.1)
  (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 3)
  )
    (set! curse 0.1)
    (set! curse-level 3)
  )
  (when 
  (and 
  (!= curse 0.12)
  (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 4)
  )
    (set! curse 0.12)
    (set! curse-level 4)
  )
  (when 
  (and 
  (!= curse 0.18)
  (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 5)
  )
    (set! curse 0.18)
    (set! curse-level 5)
  )
  (when 
  (and 
  (!= curse 0.25)
  (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 6)
  )
    (set! curse 0.25)
    (set! curse-level 6)
  )
  (when 
  (and 
  (!= curse 0.35)
  (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 7)
  )
    (set! curse 0.35)
    (set! curse-level 7)
  )
  (when 
  (and 
  (!= curse 0.45)
  (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 8)
  )
    (set! curse 0.45)
    (set! curse-level 8)
  )
  (when 
  (and 
  (!= curse 1.0)
  (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
  )
    (set! curse 1.0)
    (set! curse-level 9)
  )
  (when 
  (and 
  (!= luck 0.05)
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 0)
  )
    (set! luck 0.05)
  )
  (when 
  (and 
  (!= luck 0.1)
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 1)
  )
    (set! luck 0.1)
  )
  (when 
  (and 
  (!= luck 0.103)
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 2)
  )
    (set! luck 0.103)
  )
  (when 
  (and 
  (!= luck 0.107)
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 3)
  )
    (set! luck 0.107)
  )
  (when 
  (and 
  (!= luck 0.11)
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 4)
  )
    (set! luck 0.11)
  )
  (when 
  (and 
  (!= luck 0.13)
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 5)
  )
    (set! luck 0.13)
  )
  (when 
  (and 
  (!= luck 0.17)
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 6)
  )
    (set! luck 0.17)
  )
  (when 
  (and 
  (!= luck 0.2)
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 7)
  )
    (set! luck 0.2)
  )
  (when 
  (and 
  (!= luck 0.4)
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 8)
  )
    (set! luck 0.4)
  )
  (when 
  (and 
  (!= luck 0.6)
  (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 9)
  )
    (set! luck 0.6)
  )



(when 
(and 
(= in-hub? #t) 
(= (paused?) #f)
(= (pause-allowed?) #t)
*traffic-manager*
)
  (set! start-stage #t)
)

(when 
(and 
(= (paused?) #f)
(= (pause-allowed?) #t)
(= in-menu #f) 
(= in-hub? #t)
(not *traffic-manager*)
)
  (set! start-stage #f)
)

(when 
(and 
(= vin-shop #f) 
(= (paused?) #f)
(= (pause-allowed?) #t)
(= in-menu #f) 
(= vin-shop #f)
(= start-stage #f)
(= in-hub? #t)
(cpad-pressed? 0 triangle)
)
  (set! vin-shop #t)
  (set! camera-locked #t)
  (+! vin-talk 1)
  (when (>= vin-talk 5)
    (set! vin-talk 1)
  )
  (when (and (rand-vu-percent? 0.01)(= (-> *game-info* karma) 6.0))
    (set! talk-rare #t)
  )
)

(when 
(and
(= p-big-punch #t)
(!= (-> *run-attack-mods* impact-fric) 0.0)
)
(set! (-> *run-attack-mods* align-speed) 2.0)
(set! (-> *run-attack-mods* impact-fric) 0.0)
)
(when 
(and
(and (= p-big-punch #f) (= p-sage-blue #f))
(!= (-> *run-attack-mods* align-speed) 1.0)
)
(set! (-> *run-attack-mods* align-speed) 1.0)
(set! (-> *run-attack-mods* impact-fric) 1.0)
)

(when 
(and
(= (paused?) #f)
(= (pause-allowed?) #t)
*target*
(not *scene-player*)
(= p-big-punch #t)
(cpad-hold? 0 square)
)
(send-event *target* 'get-pickup (pickup-type eco-red) 1.0)
)

(when (and (= p-sage-blue #f) (!= (-> *uppercut-jump-mods* slope-up-factor) 1.0))
  (set! (-> *uppercut-jump-mods* slope-up-factor) 1.0)
(set! (-> *uppercut-jump-mods* align-speed) 1.0)
(set! (-> *attack-mods* align-speed) 1.0)
(set! (-> *run-attack-mods* align-speed) 1.0)
)


#|
(when 
(and 
(= in-game? #f)
(= (paused?) #f)
(= (pause-allowed?) #t)
*target*
(= run-in-progress #f)
(>= (-> *game-info* karma) 1.0)
(not (= (-> (level-get-target-inside *level*) name) 'consiteb))
)
  (send-event *target* 'continue (get-continue-by-name *game-info* "consite-airlock"))
)|#
#|
(when 
(and
 (or 
 (= color-floor #f)
 (= act-act 4)
 )
 (= (-> *time-of-day-context* overide-enable) #t)
 )
  (set! (-> *time-of-day-context* overide-enable) #f)
)
(when (= color-floor #t)
  (when (and (= act-act 1)(= run-in-progress #t))
    (set! (-> *time-of-day-context* overide-enable) #t)
    (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color x) 0.4733)
    (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color y) 0.6203)
    (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color z) 0.3984)
    (set! (-> *time-of-day-context* times (-> *time-of-day-context* overide-palette) x) 0.4921)
    (set! (-> *time-of-day-context* times (-> *time-of-day-context* overide-palette) y) 1.2500)
    (set! (-> *time-of-day-context* times (-> *time-of-day-context* overide-palette) z) 0.6875)
    (set! (-> *time-of-day-context* times (-> *time-of-day-context* overide-palette) w) 1.0)
    (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color w) 0.4984)
  )
  (when (and (= act-act 2)(= run-in-progress #t))
    (set! (-> *time-of-day-context* overide-enable) #t)
    (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color x) 0.4198)
    (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color y) 0.7148)
    (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color z) 1.8359)
    (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color w) 0.6093)
    (set! (-> *time-of-day-context* times (-> *time-of-day-context* overide-palette) x) 0.4921)
    (set! (-> *time-of-day-context* times (-> *time-of-day-context* overide-palette) y) 0.6875)
    (set! (-> *time-of-day-context* times (-> *time-of-day-context* overide-palette) z) 1.2500)
    (set! (-> *time-of-day-context* times (-> *time-of-day-context* overide-palette) w) 1.0)
  )
  (when (and (= act-act 3)(= run-in-progress #t))
    (set! (-> *time-of-day-context* overide-enable) #t)
    (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color x) 1.9921)
    (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color y) 0.9101)
    (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color z) 0.3632)
    (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color w) 0.4921)
    (set! (-> *time-of-day-context* times (-> *time-of-day-context* overide-palette) x) 1.2500)
    (set! (-> *time-of-day-context* times (-> *time-of-day-context* overide-palette) y) 0.6875)
    (set! (-> *time-of-day-context* times (-> *time-of-day-context* overide-palette) z) 0.4921)
  )
)
|#

(when 
(and 
(= dark-mode #t)
(!= (-> (level-get-target-inside *level*) mood-func)update-mood-nest)
*target*
(not *scene-player*)
(= (pause-allowed?) #t)
)
(set! (-> (level-get-target-inside *level*) mood-func)update-mood-nest)
)
#|
(when 
(and 
(= act-act 4)
(= (pause-allowed?) #t)
(= avoidc-waitb #f)
*target*
(not *scene-player*)
(!= (-> (level-get-target-inside *level*) mood-func)update-mood-nest)
)
  (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color x) 1.9921)
  (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color y) 1.9921)
  (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color z) 1.9921)
  (set! (-> *overide-mood-color-table* data (logand (-> *time-of-day-context* mode) (time-of-day-palette-id unk0 unk1 unk2)) amb-color w) 2.0)
  (when (not (task-node-closed? (game-task-node city-whack-post-game)))
    (set! traffic-metalheads? #t)
  )
  (when (task-node-closed? (game-task-node city-whack-post-game))
    (set! traffic-metalheads? #f)
  )
  (send-event *traffic-manager* 'set-guard-target-level 100)
  (set! (-> *time-of-day-context* overide-enable) #f)
  (set! (-> *mood-control* overide-weather-flag) #t)
  (set! (-> *mood-control* overide fog) 1.0)
  (set! (-> *mood-control* overide cloud) 1.0)
  (set! (-> (level-get-target-inside *level*) mood-func)update-mood-nest)
)|#

(when 
(and 
(= vin-shop #t)
(= start-stage #f)
(= in-hub? #t)
(cpad-pressed? 0 r3)
)
  (set! vin-shop #f)
  (set! camera-unlocked #t)
)

;camera menu
(when (= camera-locked #t) ;sets camera params
  (send-event *target* 'draw #f)
  (set-setting-by-param *setting-control* 'mode-name 'cam-eye 0 0)
  (persist-with-delay *setting-control* 'gun (seconds 0.5) 'gun #f 0.0 0)
  (process-grab? *target* #f)
  (set! camera-locked #f)
)

(when (= camera-unlocked #t)
  (remove-setting-by-arg0 *setting-control* 'mode-name)
  (set! pause-menu-blocked? #f)
  (send-event *target* 'draw #t)
  (process-release? *target*)
  (set! camera-unlocked #f)
)

(when (= wait-exit #t)
  (+! waite-frame 1)
  (remove-setting-by-arg0 *setting-control* 'mode-name)
  (when (= waite-frame 1)
    (set! in-hub? #f)
    (set! in-menu #f)
    (set! run-in-progress #t)
  )
  (when (= waite-frame 5)
    (set! pause-menu-blocked? #f)
    (send-event *target* 'draw #t)
    (process-release? *target*)
  )
  (when (= waite-frame 10)
    (set! wait-exit #f)
    (set! waite-frame 0)
    (set! act-stage 0)
    (set! (-> *game-info* buzzer-total) 0.0)
    (set! display-death-screen #t)
    (set! print-stage 0)
    (set! level-completed? #t)
    (set! display-run #t)
    (set! vin-spawned? #f)
    (set! item-display? #t)
    (set! autosave-delayed #t)
    (set! rnginfo #t)
    (let ((roll-luck (rand-vu-int-range 1 4)))
    (when (= roll-luck 1)
    (+! (-> *game-info* continue-deaths) 10000000)
    )
    (when (= roll-luck 2)
    (+! (-> *game-info* continue-deaths) 20000000)
    )
    (when (= roll-luck 3)
    (+! (-> *game-info* continue-deaths) 30000000)
    )
    (when (= roll-luck 4)
    (+! (-> *game-info* continue-deaths) 40000000)
    )
  )
    (when (and (= print-stage 4)(!= act-act 4)(= teleport-hiphog #f))
    (set! teleport-hiphog #t)
  )
  )
)
(when (= wait-start #t)
  (+! waits-frame 1)
  (when (= waits-frame 1)
    (set! tutorial-completed? #t)
    (set! skip-intro #f)
  )
  (when (> waits-frame 60)
    (when (= display-death-screen #t)
      (set! in-menu #t)
      (set! camera-locked #t)
      (set! pause-menu-blocked? #t)
    )
    (set! wait-start #f)
    (set! waits-frame 0)
    (set! display-run #f)
    (set! in-hub? #t)
  )
)

(when (= wait-procws #t)
  (+! wait-proci 1)
  (when (= wait-proci 300)
    (play-task (game-task city-protect-water-slums) 'debug #f)
    (set! wait-proci 0)
    (set! wait-procws #f)
  )
)

(when (and (= color-floor #f)(= in-hub? #f)(= (-> *game-info* total-deaths) 1)(= act-act 1))
    (set! color-floor #t)
  )
  (when (and (= color-floor #f) (= in-hub? #f)(= (-> *game-info* total-deaths) 3)(= act-act 3))
    (set! color-floor #t)
  )
  (when (and (= color-floor #t) (!= (-> *game-info* total-deaths) 1)(= act-act 1))
    (set! color-floor #f)
  )
  (when (and (= color-floor #t) (!= (-> *game-info* total-deaths) 3)(= act-act 3))
  (set! color-floor #f)
  )
  (when (and (= color-floor #t)(= in-hub? #t))
    (set! color-floor #f)
  )



(when (= waitenter #t)
  (+! waitenteri 1)
  (when (= waitenteri 60)
    (set! tutorial-completed? #f)
    (set! waitenteri 0)
    (set! waitenter #f)
  )
)


(when (and (= wait-kill #t)(= randomizer #t))
  (+! wait-killi 1)
  (when (= wait-killi 400)
    (send-event *target* 'continue (get-continue-by-name *game-info* "consite-airlock"))
    (set! wait-killi 0)
    (set! wait-kill #f)
  )
  (when (= (-> (level-get-target-inside *level*) name) 'consiteb)
    (set! wait-killi 0)
    (set! wait-kill #f)
  )
)

(when 
(and
(= pause-menu-blocked? #t)
(= (pause-allowed?) #t)
(not *scene-player*)
)
  (set-master-mode 'game)
)

(when (= wait-pulloutgun #t)
  (+! wait-pi 1)
  (when (= wait-pi 400)
    (send-event *target* 'change-mode 'gun #f (pickup-type eco-yellow))
    (set! wait-pi 0)
    (set! wait-pulloutgun #f)
  )
)

(when (and (= avoidk-wait #t)(= (pause-allowed?) #t))
  (+! w-ik 1)
  (when (= w-ik 1)
    (set! autosave-delayed #t)
  )
  (when (= w-ik 60)
    (play-task (game-task castle-boss) 'debug #f)
  )
  (when (= w-ik 125)
    (set! w-ik 0)
    (set! avoidk-wait #f)
    (set! (-> *game-info* gem) temp-skullgemamount)
    (set! (-> *target* fact health) temp-health)
    (set! (-> *game-info* skill) temp-orbs)
  )
)

;Death params
(when 
(and
(= (pause-allowed?) #t)
(= (-> *target* fact health) 0.0)
(= in-game? #t)
*target*
)
  (set! dark-mode #f)
  (set! run-in-progress #f)
  (set! waitdie #t)
  (set! in-game? #f)
  (set! avoidc-waitb #f)
  (set! display-run #f)
  (set! avoidc-wait 0)
)




(when (and (= waitdie #t)(>= (-> *game-info* karma) 1.0)(= (pause-allowed?) #t))
  (+! waitdi 1)
  (when (= waitdi 1)
    (set! temp-skullgemamount (-> *game-info* gem))
    (+! (-> *game-info* fuel) (-> *game-info* gem))
  )
  (when (= waitdi 30)
    (send-event *target* 'continue (get-continue-by-name *game-info* "consite-airlock"))
    (set! waitdi 0)
    (set! waitdie #f)
  )
)

(when (= rnginfo #t)
  (set! rngspeed 40960.0)
  (set! rngspeed2 60960.0)
  (set! rngspeed3 80960.0)
  (set! rngspeed4 300960.0)
  (set! rnginfo #f)
)

;buy shop GUNS
;(logior! (-> *game-info* features) (game-feature gun-red))
;(logior! (-> *game-info* features) (game-feature gun-yellow))
;(logior! (-> *game-info* features) (game-feature gun-blue))
;(logior! (-> *game-info* features) (game-feature gun-dark))
;Take away shop GUNS
;(logclear! (-> *game-info* features) (game-feature gun-red))
;(logclear! (-> *game-info* features) (game-feature gun-yellow))
;(logclear! (-> *game-info* features) (game-feature gun-blue))
;(logclear! (-> *game-info* features) (game-feature gun-dark))


;When jak doesnt have his purchased items, give him the items!

(when (and (= p-red-gun #t)(not (logtest? (-> *game-info* features) (game-feature gun-red))))
  (logior! (-> *game-info* features) (game-feature gun gun-red))
)
(when (and (= p-blue-gun #t)(not (logtest? (-> *game-info* features) (game-feature gun-blue))))
  (logior! (-> *game-info* features) (game-feature gun gun-blue))
)
(when (and (= p-dark-gun #t)(not (logtest? (-> *game-info* features) (game-feature gun-dark))))
  (logior! (-> *game-info* features) (game-feature gun gun-dark))
)
(when (and (= p-upgrade-ammo #t)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-ammo))))
  (logior! (-> *game-info* features) (game-feature gun gun-upgrade-ammo))
)
(when (and (= p-upgrade-red #t)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-speed))))
  (logior! (-> *game-info* features) (game-feature gun gun-upgrade-speed))
)
(when (and (= p-upgrade-damage #t)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-damage))))
  (logior! (-> *game-info* features) (game-feature gun gun-upgrade-damage))
)

;MODS

(when (= dshotwait-r #t)
  (+! dshotcount-r 1)
  (when (= dshotcount-r 3)
    (someone-fire-red *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    (set! dshotcount-r 0)
    (set! dshotwait-r #f)
  )
)
(when (= dshotwait-y #t)
  (+! dshotcount-y 1)
  (when (= dshotcount-y 6)
    (someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    (set! dshotcount-y 0)
    (set! dshotwait-y #f)
  )
)
(when (= dshotwait-b #t)
  (+! dshotcount-b 1)
  (when (= dshotcount-b 2)
    (someone-fire-blue *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    (set! dshotcount-b 0)
    (set! dshotwait-b #f)
  )
)
(when (= dshotwait-d #t)
  (+! dshotcount-d 1)
  (when (= dshotcount-d 6)
    (someone-fire-dark *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    (set! dshotcount-d 0)
    (set! dshotwait-d #f)
  )
)

(when (= rapid-fire-blue #t)
  (+! rapid-fire-int 1)
  (when (= rapid-fire-int 3)
    (someone-fire-blue *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
  )
  (when (= rapid-fire-int 6)
    (someone-fire-blue *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
    (set! rapid-fire-int 0)
    (set! rapid-fire-blue #f)
  )
)



#| All of these are set to IDs

Here are the shop IDs
1 Yellow Gun (25 orbs)
2 Blue Gun (32 orbs)
3 Peacemaker (40 orbs)
4 Upgrade Red speed (10 orbs)
5 Upgrade Ammo (15 orbs)
6 Upgrade Damage (20 orbs)
7 Full HP (7 orbs)
8 Buffed Vehicles
9 Double Shot
10 Four-Leaf Clover
99 Red Eco Shard
999 Explosive Shot

|#



(when (= roll-shopitems #t)
  (let (
    (shoproll1 (rand-vu-int-range 1 (-> *game-info* total-trys)))
    (shoproll2 (rand-vu-int-range 1 (-> *game-info* total-trys)))
    (shoproll3 (rand-vu-int-range 1 (-> *game-info* total-trys)))
  )
  (when (or (= shoproll1 shoproll2)(= shoproll1 shoproll3)(= shoproll2 shoproll3)) ;if the pick is the same on two options, reroll
    (set! shoproll1 (rand-vu-int-range 1 (-> *game-info* total-trys)))
    (set! shoproll2 (rand-vu-int-range 1 (-> *game-info* total-trys)))
    (set! shoproll3 (rand-vu-int-range 1 (-> *game-info* total-trys)))
  )


  (when (= shoproll1 1)
    (set! shopitem1 "Scatter Gun (25 orbs)")
    (set! shopid1 1)
  )
  (when (= shoproll2 1)
    (set! shopitem2 "Scatter Gun (25 orbs)")
    (set! shopid2 1)
  )
  (when (= shoproll3 1)
    (set! shopitem3 "Scatter Gun (25 orbs)")
    (set! shopid3 1)
  )
  (when (= shoproll1 2)
    (set! shopitem1 "Blue Gun (32 orbs)")
    (set! shopid1 2)
  )
  (when (= shoproll2 2)
    (set! shopitem2 "Blue Gun (32 orbs)")
    (set! shopid2 2)
  )
  (when (= shoproll3 2)
    (set! shopitem3 "Blue Gun (32 orbs)")
    (set! shopid3 2)
  )
  (when (= shoproll1 5)
    (set! shopitem1 "Peacemaker (40 orbs)")
    (set! shopid1 3)
  )
  (when (= shoproll2 5)
    (set! shopitem2 "Peacemaker (40 orbs)")
    (set! shopid2 3)
  )
  (when (= shoproll3 5)
    (set! shopitem3 "Peacemaker (40 orbs)")
    (set! shopid3 3)
  )
  (when (= shoproll1 3)
    (set! shopitem1 "Scattergun Rate of Fire (10 orbs)")
    (set! shopid1 4)
  )
  (when (= shoproll2 3)
    (set! shopitem2 "Scattergun Rate of Fire (10 orbs)")
    (set! shopid2 4)
  )
  (when (= shoproll3 3)
    (set! shopitem3 "Scattergun Rate of Fire (10 orbs)")
    (set! shopid3 4)
  )
  (when (= shoproll1 6)
    (set! shopitem1 "Upgrade Ammo (15 orbs)")
    (set! shopid1 5)
  )
  (when (= shoproll2 6)
    (set! shopitem2 "Upgrade Ammo (15 orbs)")
    (set! shopid2 5)
  )
  (when (= shoproll3 6)
    (set! shopitem3 "Upgrade Ammo (15 orbs)")
    (set! shopid3 5)
  )
  (when (= shoproll1 7)
    (set! shopitem1 "Upgrade Damage x2 (20 orbs)")
    (set! shopid1 6)
  )
  (when (= shoproll2 7)
    (set! shopitem2 "Upgrade Damage x2 (20 orbs)")
    (set! shopid2 6)
  )
  (when (= shoproll3 7)
    (set! shopitem3 "Upgrade Damage x2 (20 orbs)")
    (set! shopid3 6)
  )
  (when (= shoproll1 4)
    (set! shopitem1 "Full HP (4 orbs)")
    (set! shopid1 7)
  )
  (when (= shoproll2 4)
    (set! shopitem2 "Full HP (4 orbs)")
    (set! shopid2 7)
  )
  (when (= shoproll3 4)
    (set! shopitem3 "Full HP (4 orbs)")
    (set! shopid3 7)
  )
  (when (= shoproll1 8)
    (set! shopitem1 "Buffed Vehicles (32 orbs) (Applies in next level)")
    (set! shopid1 8)
  )
  (when (= shoproll2 8)
    (set! shopitem2 "Buffed Vehicles (32 orbs) (Applies in next level)")
    (set! shopid2 8)
  )
  (when (= shoproll3 8)
    (set! shopitem3 "Buffed Vehicles (32 orbs) (Applies in next level)")
    (set! shopid3 8)
  )
  (when (= shoproll1 9)
    (set! shopitem1 "Double Shot (25 orbs)")
    (set! shopid1 9)
  )
  (when (= shoproll2 9)
    (set! shopitem2 "Double Shot (25 orbs)")
    (set! shopid2 9)
  )
  (when (= shoproll3 9)
    (set! shopitem3 "Double Shot (25 orbs)")
    (set! shopid3 9)
  )
  (when (= shoproll1 10)
    (set! shopitem1 "Four-Leaf Clover (40 orbs)")
    (set! shopid1 10)
  )
  (when (= shoproll2 10)
    (set! shopitem2 "Four-Leaf Clover (40 orbs)")
    (set! shopid2 10)
  )
  (when (= shoproll3 10)
    (set! shopitem3 "Four-Leaf Clover (40 orbs)")
    (set! shopid3 10)
  )
  (when (= shoproll1 11)
    (set! shopitem1 "+2HP Every Level (25 orbs)")
    (set! shopid1 11)
  )
  (when (= shoproll2 11)
    (set! shopitem2 "+2HP Every Level (25 orbs)")
    (set! shopid2 11)
  )
  (when (= shoproll3 11)
    (set! shopitem3 "+2HP Every Level (25 orbs)")
    (set! shopid3 11)
  )
  (when (= shoproll1 12)
    (set! shopitem1 "Mar's Punch (22 orbs)")
    (set! shopid1 12)
  )
  (when (= shoproll2 12)
    (set! shopitem2 "Mar's Punch (22 orbs)")
    (set! shopid2 12)
  )
  (when (= shoproll3 12)
    (set! shopitem3 "Mar's Punch (22 orbs)")
    (set! shopid3 12)
  )
  (when (= shoproll1 13)
    (set! shopitem1 "Pocket Rift Gate (50 orbs)")
    (set! shopid1 13)
  )
  (when (= shoproll2 13)
    (set! shopitem2 "Pocket Rift Gate (50 orbs)")
    (set! shopid2 13)
  )
  (when (= shoproll3 13)
    (set! shopitem3 "Pocket Rift Gate (50 orbs)")
    (set! shopid3 13)
  )
  (when (= shoproll1 14)
    (set! shopitem1 "Training Weight (15 orbs)")
    (set! shopid1 14)
  )
  (when (= shoproll2 14)
    (set! shopitem2 "Training Weight (15 orbs)")
    (set! shopid2 14)
  )
  (when (= shoproll3 14)
    (set! shopitem3 "Training Weight (15 orbs)")
    (set! shopid3 14)
  )
  (when (= shoproll1 15)
    (set! shopitem1 "Rapid Fire (40 orbs)")
    (set! shopid1 15)
  )
  (when (= shoproll2 15)
    (set! shopitem2 "Rapid Fire (40 orbs)")
    (set! shopid2 15)
  )
  (when (= shoproll3 15)
    (set! shopitem3 "Rapid Fire (40 orbs)")
    (set! shopid3 15)
  )
  (when (= shoproll1 16)
    (set! shopitem1 "Gol's Unbeknowngst (40 orbs)")
    (set! shopid1 16)
  )
  (when (= shoproll2 16)
    (set! shopitem2 "Gol's Unbeknowngst (40 orbs)")
    (set! shopid2 16)
  )
  (when (= shoproll3 16)
    (set! shopitem3 "Gol's Unbeknowngst (40 orbs)")
    (set! shopid3 16)
  )
  (when (and (not (= shopid1 999))(not (= shopid2 999))(not (= shopid3 999))(rand-vu-percent? 0.1) (>= (-> *game-info* karma) 3.0))
    (set! shopitem1 "Explosive Yellow Shot (35 orbs)")
    (set! shopid1 999)
  )
  (when (and (not (= shopid1 999))(not (= shopid2 999))(not (= shopid3 999))(rand-vu-percent? 0.1) (>= (-> *game-info* karma) 3.0))
    (set! shopitem2 "Explosive Yellow Shot (35 orbs)")
    (set! shopid2 999)
  )
  (when (and (not (= shopid1 999))(not (= shopid2 999))(not (= shopid3 999))(rand-vu-percent? 0.1) (>= (-> *game-info* karma) 3.0))
    (set! shopitem3 "Explosive Yellow Shot (35 orbs)")
    (set! shopid3 999)
  )
  (when 
  (and 
  (= (-> *game-info* total-deaths) 3)
  (= act-act 3)
  )
    (let (
      (shopinroll (rand-vu-int-range 1 3))
      )
        (when (= shopinroll 1)
          (set! shopitem1 "Red Eco Shard (100 orbs)")
          (set! shopid1 99)
        )
        (when (= shopinroll 2)
          (set! shopitem2 "Red Eco Shard (100 orbs)")
          (set! shopid2 99)
        )
        (when (= shopinroll 3)
          (set! shopitem3 "Red Eco Shard (100 orbs)")
          (set! shopid3 99)
        )
      )
  )
  (when (and (!= shoproll1 shoproll2)(!= shoproll1 shoproll3)(!= shoproll2 shoproll3)) ;if the pick is NOT the same on two options, stop rolling.
    (set! roll-shopitems #f)
  )
)


)


(when (and (cpad-pressed? 0 r3)(= avoidc-waitb #f)(= in-menu2 #f)(= (-> (level-get-target-inside *level*) name) 'hiphog))
  (set! in-menu2wait #t)
)

(when (and (cpad-pressed? 0 r3)(= avoidc-waitb #f)(= in-menu2 #t)(= (-> (level-get-target-inside *level*) name) 'hiphog))
  (set! in-menu2wait2 #t)
)

(when (and (= in-menu2 #f)(= avoidc-waitb #f)(= (-> (level-get-target-inside *level*) name) 'hiphog))
  (set! popup-shop #t)
)

(when (or 
(and 
(= avoidc-waitb #t)
(= in-game? #f)
(= popup-shop #t)
)
(!= (-> (level-get-target-inside *level*) name) 'hiphog)
)
  (set! popup-shop #f)
)

(when 
  (and
   (not *scene-player*)
   (= (paused?) #f)
   (= (pause-allowed?) #t)
   *target*
   (= task-completed-success? #t)
  )
    (set! avoidc-wait 0)
    (set! avoidc-waitb #t)
    (set! in-game? #f)
    (set! task-completed-success? #f)
  )

(when (= in-menu2wait #t)
  (+! in-menu2waiti 1)
  (when (= in-menu2waiti 1)
    (send-event *target* 'draw #f)
    (set-vector! (-> *target* control trans) (meters -99.0494) (meters 30.853) (meters 1287.0468) 1.0) ;teleports jak behind bar
  )
  (when (= in-menu2waiti 20)
    (set! in-menu2 #t)
    (set! (-> *target* cam-user-mode) 'fixed)
    (set-setting-by-param *setting-control* 'mode-name 'cam-really-fixed 0 0)
    (send-event *camera* 'teleport-to-vector-start-string (new 'static 'vector :x (meters -90.0494) :y (meters 13.853) :z (meters 1303.0468)))
  )
  (when (= in-menu2waiti 65)
    (set! in-menu2waiti 0)
    (set! in-menu2wait #f)
    (set-vector! (-> *target* control trans) (meters -77.5494) (meters 15.853) (meters 1309.0468) 1.0) ;teleports jak away from talking to npcs
  )
)

;(meters -90.0494) (meters 25.853) (meters 1303.0468) ;cam pos for shop

(when (= in-menu2wait2 #t)
  (+! in-menu2wait2i 1)
  (when (= in-menu2wait2i 1)
    (remove-setting-by-arg0 *setting-control* 'mode-name)
    (send-event *target* 'draw #t)
    (process-release? *target*)
    (set-vector! (-> *target* control trans) (meters -96.0494) (meters 10.853) (meters 1293.0468) 1.0) ;teleports jak in front of bar
    (set! in-menu2 #f)
    (when (= p-sage-yellow #t)
      (set! popup-shop #f)
      (set! in-game? #f)
      (set! (-> *game-info* buzzer-total) 1.0)
      (set! act-act 1)
      (set! print-stage 1)
      (set! teleport-hiphog #f)
      (set! already-teleported? #f)
      (set! teleport-back? #f)
      (set! camera-unlocked #t)
      (set! pause-menu-blocked? #f)
      (set! temp-skullgemamount (-> *game-info* gem))
      (set! temp-health (-> *target* fact health))
      (set! temp-orbs (-> *game-info* skill))
    )
  )
  (when (and (= p-sage-yellow #t)(= in-menu2wait2i 60))
    (set! act1-1 #t)
  )
  (when (and (= p-sage-yellow #t)(= in-menu2wait2i 120))
    (-! (-> *game-info* continue-deaths) 1000)
    (set! p-sage-yellow #f)
    (set! item-refresh #t)
    (set! wait-for-ingame #t)
    (set! (-> *game-info* gem) temp-skullgemamount)
    (set! (-> *target* fact health) temp-health)
    (set! (-> *game-info* skill) temp-orbs)
  )
  (when (= in-menu2wait2i 121)
    (set! in-menu2wait2i 0)
    (set! in-menu2wait2 #f)
  )
)

;controls for in-menu2

(when (and (= in-menu2 #t)(cpad-pressed? 0 right))
  (+! menu-slot 1)
  (when (>= menu-slot 3)
    (set! menu-slot 0)
  )
)

(when (and (= in-menu2 #t)(cpad-pressed? 0 left))
  (-! menu-slot 1)
  (when (< menu-slot 0)
    (set! menu-slot 2)
  )
)



(when (and (= in-menu2 #t)(cpad-pressed? 0 x))
    (when (and (= menu-slot 0)(not (logtest? (-> *game-info* features) (game-feature gun-red)))(>= (-> *game-info* skill) 25.0)(= shopid1 1))
      (set! p-red-gun #t)
      (-! (-> *game-info* skill) 25.0)
      (set! shopitem1 "(Out of Stock)")
      (set! item-tss1 "Scatter Gun")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 1))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 1)(not (logtest? (-> *game-info* features) (game-feature gun-red)))(>= (-> *game-info* skill) 25.0)(= shopid3 1))
      (set! p-red-gun #t)
      (-! (-> *game-info* skill) 25.0)
      (set! shopitem3 "(Out of Stock)")
      (set! item-tss1 "Scatter Gun")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 1))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 2)(not (logtest? (-> *game-info* features) (game-feature gun-red)))(>= (-> *game-info* skill) 25.0)(= shopid2 1))
      (set! p-red-gun #t)
      (-! (-> *game-info* skill) 25.0)
      (set! shopitem2 "(Out of Stock)")
      (set! item-tss1 "Scatter Gun")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 1))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 0)(not (logtest? (-> *game-info* features) (game-feature gun-blue)))(>= (-> *game-info* skill) 32.0)(= shopid1 2))
      (set! p-blue-gun #t)
      (-! (-> *game-info* skill) 32.0)
      (set! shopitem1 "(Out of Stock)")
      (set! item-tss1 "Blue Gun")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 10))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 1)(not (logtest? (-> *game-info* features) (game-feature gun-blue)))(>= (-> *game-info* skill) 32.0)(= shopid3 2))
      (set! p-blue-gun #t)
      (-! (-> *game-info* skill) 32.0)
      (set! shopitem3 "(Out of Stock)")
      (set! item-tss1 "Blue Gun")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 10))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 2)(not (logtest? (-> *game-info* features) (game-feature gun-blue)))(>= (-> *game-info* skill) 32.0)(= shopid2 2))
      (set! p-blue-gun #t)
      (-! (-> *game-info* skill) 32.0)
      (set! shopitem2 "(Out of Stock)")
      (set! item-tss1 "Blue Gun")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 10))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 0)(not (logtest? (-> *game-info* features) (game-feature gun-dark)))(>= (-> *game-info* skill) 40.0)(= shopid1 3))
      (set! p-dark-gun #t)
      (-! (-> *game-info* skill) 40.0)
      (set! shopitem1 "(Out of Stock)")
      (set! item-tss1 "Peacemaker")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 100))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 1)(not (logtest? (-> *game-info* features) (game-feature gun-dark)))(>= (-> *game-info* skill) 40.0)(= shopid3 3))
      (set! p-dark-gun #t)
      (-! (-> *game-info* skill) 40.0)
      (set! shopitem3 "(Out of Stock)")
      (set! item-tss1 "Peacemaker")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 100))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 2)(not (logtest? (-> *game-info* features) (game-feature gun-dark)))(>= (-> *game-info* skill) 40.0)(= shopid2 3))
      (set! p-dark-gun #t)
      (-! (-> *game-info* skill) 40.0)
      (set! shopitem2 "(Out of Stock)")
      (set! item-tss1 "Peacemaker")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 100))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 0)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-speed)))(>= (-> *game-info* skill) 10.0)(= shopid1 4))
      (set! p-upgrade-red #t)
      (-! (-> *game-info* skill) 10.0)
      (set! shopitem1 "(Out of Stock)")
      (set! item-tss1 "Scattergun ROF")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 1000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 1)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-speed)))(>= (-> *game-info* skill) 10.0)(= shopid3 4))
      (set! p-upgrade-red #t)
      (-! (-> *game-info* skill) 10.0)
      (set! shopitem3 "(Out of Stock)")
      (set! item-tss1 "Scattergun ROF")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 1000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 2)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-speed)))(>= (-> *game-info* skill) 10.0)(= shopid2 4))
      (set! p-upgrade-red #t)
      (-! (-> *game-info* skill) 10.0)
      (set! shopitem2 "(Out of Stock)")
      (set! item-tss1 "Scattergun ROF")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 1000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 0)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-ammo)))(>= (-> *game-info* skill) 15.0)(= shopid1 5))
      (set! p-upgrade-ammo #t)
      (-! (-> *game-info* skill) 15.0)
      (set! shopitem1 "(Out of Stock)")
      (set! item-tss1 "Upgraded Ammo")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 10000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 1)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-ammo)))(>= (-> *game-info* skill) 15.0)(= shopid3 5))
      (set! p-upgrade-ammo #t)
      (-! (-> *game-info* skill) 15.0)
      (set! shopitem3 "(Out of Stock)")
      (set! item-tss1 "Upgraded Ammo")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 10000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 2)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-ammo)))(>= (-> *game-info* skill) 15.0)(= shopid2 5))
      (set! p-upgrade-ammo #t)
      (-! (-> *game-info* skill) 15.0)
      (set! shopitem2 "(Out of Stock)")
      (set! item-tss1 "Upgraded Ammo")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 10000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 0)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-damage)))(>= (-> *game-info* skill) 20.0)(= shopid1 6))
      (set! p-upgrade-damage #t)
      (-! (-> *game-info* skill) 20.0)
      (set! shopitem1 "(Out of Stock)")
      (set! item-tss1 "Upgraded Damage")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 100000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 1)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-damage)))(>= (-> *game-info* skill) 20.0)(= shopid3 6))
      (set! p-upgrade-damage #t)
      (-! (-> *game-info* skill) 20.0)
      (set! shopitem3 "(Out of Stock)")
      (set! item-tss1 "Upgraded Damage")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 100000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 2)(not (logtest? (-> *game-info* features) (game-feature gun-upgrade-damage)))(>= (-> *game-info* skill) 20.0)(= shopid2 6))
      (set! p-upgrade-damage #t)
      (-! (-> *game-info* skill) 20.0)
      (set! shopitem2 "(Out of Stock)")
      (set! item-tss1 "Upgraded Damage")
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 100000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 0)(!= (-> *target* fact health) 8.0)(>= (-> *game-info* skill) 4.0)(= shopid1 7))
      (-! (-> *game-info* skill) 4.0)
      (set! (-> *target* fact health) 8.0)
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 1)(!= (-> *target* fact health) 8.0)(>= (-> *game-info* skill) 4.0)(= shopid3 7))
      (-! (-> *game-info* skill) 4.0)
      (set! (-> *target* fact health) 8.0)
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 2)(!= (-> *target* fact health) 8.0)(>= (-> *game-info* skill) 4.0)(= shopid2 7))
      (-! (-> *game-info* skill) 4.0)
      (set! (-> *target* fact health) 8.0)
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 0)(= p-upgrade-vehicles #f)(>= (-> *game-info* skill) 32.0)(= shopid1 8))
      (-! (-> *game-info* skill) 32.0)
      (set! shopitem1 "(Out of Stock)")
      (set! item-tss1 "Upgraded Vehicles")
      (set! item-update #t)
      (set! p-upgrade-vehicles #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 1000000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      ) 
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 1)(= p-upgrade-vehicles #f)(>= (-> *game-info* skill) 32.0)(= shopid3 8))
      (-! (-> *game-info* skill) 32.0)
      (set! shopitem3 "(Out of Stock)")
      (set! item-tss1 "Upgraded Vehicles")
      (set! item-update #t)
      (set! p-upgrade-vehicles #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 1000000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      ) 
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 2)(= p-upgrade-vehicles #f)(>= (-> *game-info* skill) 32.0)(= shopid2 8))
      (-! (-> *game-info* skill) 32.0)
      (set! shopitem2 "(Out of Stock)")
      (set! item-tss1 "Upgraded Vehicles")
      (set! item-update #t)
      (set! p-upgrade-vehicles #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 1000000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 0)(= p-double-shot #f)(>= (-> *game-info* skill) 25.0)(= shopid1 9))
      (-! (-> *game-info* skill) 25.0)
      (set! shopitem1 "(Out of Stock)")
      (set! item-tss1 "Double Shot")
      (set! item-update #t)
      (set! p-double-shot #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 10000000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 1)(= p-double-shot #f)(>= (-> *game-info* skill) 25.0)(= shopid3 9))
      (-! (-> *game-info* skill) 25.0)
      (set! shopitem3 "(Out of Stock)")
      (set! item-tss1 "Double Shot")
      (set! item-update #t)
      (set! p-double-shot #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 10000000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 2)(= p-double-shot #f)(>= (-> *game-info* skill) 25.0)(= shopid2 9))
      (-! (-> *game-info* skill) 25.0)
      (set! shopitem2 "(Out of Stock)")
      (set! item-tss1 "Double Shot")
      (set! item-update #t)
      (set! p-double-shot #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 10000000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 0)(= p-explode-shot #f)(>= (-> *game-info* skill) 35.0)(= shopid1 999))
      (-! (-> *game-info* skill) 35.0)
      (set! shopitem1 "(Out of Stock)")
      (set! item-tss1 "Explosive Yellow Shot")
      (set! item-update #t)
      (set! p-explode-shot #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 100000000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 1)(= p-explode-shot #f)(>= (-> *game-info* skill) 35.0)(= shopid3 999))
      (-! (-> *game-info* skill) 35.0)
      (set! shopitem3 "(Out of Stock)")
      (set! item-tss1 "Explosive Yellow Shot")
      (set! p-explode-shot #t)
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 100000000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 2)(= p-explode-shot #f)(>= (-> *game-info* skill) 35.0)(= shopid2 999))
      (-! (-> *game-info* skill) 35.0)
      (set! shopitem2 "(Out of Stock)")
      (set! item-tss1 "Explosive Yellow Shot")
      (set! p-explode-shot #t)
      (set! item-update #t)
      (set! (-> *game-info* task-deaths) (+ (-> *game-info* task-deaths) 100000000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 0)(= p-clover #f)(>= (-> *game-info* skill) 40.0)(= shopid1 10))
      (-! (-> *game-info* skill) 40.0)
      (set! shopitem1 "(Out of Stock)")
      (set! item-tss1 "Four-Leaf Clover")
      (set! p-clover #t)
      (set! item-update #t)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 1))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    (when (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 9);luck increase 1
      (+! (-> *game-info* continue-deaths) 10000000)
    )
    (when (<= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 7);luck increase 2
      (+! (-> *game-info* continue-deaths) 20000000)
    )
    )
    (when (and (= menu-slot 1)(= p-clover #f)(>= (-> *game-info* skill) 40.0)(= shopid3 10))
      (-! (-> *game-info* skill) 40.0)
      (set! shopitem3 "(Out of Stock)")
      (set! item-tss1 "Four-Leaf Clover")
      (set! p-clover #t)
      (set! item-update #t)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 1))
      (when (!= (-> *game-info* continue-deaths) 9))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    (when (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 8);luck increase 1
      (+! (-> *game-info* continue-deaths) 10000000)
    )
    (when (<= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 7);luck increase 2
      (+! (-> *game-info* continue-deaths) 20000000)
    )
    )
    (when (and (= menu-slot 2)(= p-clover #f)(>= (-> *game-info* skill) 40.0)(= shopid2 10))
      (-! (-> *game-info* skill) 40.0)
      (set! shopitem2 "(Out of Stock)")
      (set! item-tss1 "Four-Leaf Clover")
      (set! p-clover #t)
      (set! item-update #t)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 1))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    (when (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 8);luck increase 1
      (+! (-> *game-info* continue-deaths) 10000000)
    )
    (when (<= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 7);luck increase 2
      (+! (-> *game-info* continue-deaths) 20000000)
    )
    ) 
    (when (and (= menu-slot 2)(= p-drinkable #f)(>= (-> *game-info* skill) 25.0)(= shopid2 11))
      (-! (-> *game-info* skill) 25.0)
      (set! shopitem2 "(Out of Stock)")
      (set! item-tss1 "+2HP Every Level")
      (set! p-drinkable #t)
      (set! item-update #t)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 10))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 0)(= p-drinkable #f)(>= (-> *game-info* skill) 25.0)(= shopid1 11))
      (-! (-> *game-info* skill) 25.0)
      (set! shopitem1 "(Out of Stock)")
      (set! item-tss1 "+2HP Every Level")
      (set! p-drinkable #t)
      (set! item-update #t)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 10))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 1)(= p-drinkable #f)(>= (-> *game-info* skill) 25.0)(= shopid3 11))
      (-! (-> *game-info* skill) 25.0)
      (set! shopitem3 "(Out of Stock)")
      (set! item-tss1 "+2HP Every Level")
      (set! p-drinkable #t)
      (set! item-update #t)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 10))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 2)(= p-big-punch #f)(>= (-> *game-info* skill) 22.0)(= shopid2 12))
      (-! (-> *game-info* skill) 22.0)
      (set! shopitem2 "(Out of Stock)")
      (set! item-tss1 "Mar's Punch")
      (set! p-big-punch #t)
      (set! item-update #t)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 100))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 0)(= p-big-punch #f)(>= (-> *game-info* skill) 22.0)(= shopid1 12))
      (-! (-> *game-info* skill) 22.0)
      (set! shopitem1 "(Out of Stock)")
      (set! item-tss1 "Mar's Punch")
      (set! p-big-punch #t)
      (set! item-update #t)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 100))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 1)(= p-big-punch #f)(>= (-> *game-info* skill) 22.0)(= shopid3 12))
      (-! (-> *game-info* skill) 22.0)
      (set! shopitem3 "(Out of Stock)")
      (set! item-tss1 "Mar's Punch")
      (set! p-big-punch #t)
      (set! item-update #t)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 100))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    );10000
    (when (and (= menu-slot 2)(= p-sage-yellow #f)(>= (-> *game-info* skill) 50.0)(= shopid2 13))
      (-! (-> *game-info* skill) 50.0)
      (set! shopitem2 "(Out of Stock)")
      (set! item-tss1 "Pocket Rift Gate")
      (set! p-sage-yellow #t)
      (set! item-update #t)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 1000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 0)(= p-sage-yellow #f)(>= (-> *game-info* skill) 50.0)(= shopid1 13))
      (-! (-> *game-info* skill) 50.0)
      (set! shopitem1 "(Out of Stock)")
      (set! item-tss1 "Pocket Rift Gate")
      (set! p-sage-yellow #t)
      (set! item-update #t)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 1000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 1)(= p-sage-yellow #f)(>= (-> *game-info* skill) 50.0)(= shopid3 13))
      (-! (-> *game-info* skill) 50.0)
      (set! shopitem3 "(Out of Stock)")
      (set! item-tss1 "Pocket Rift Gate")
      (set! p-sage-yellow #t)
      (set! item-update #t)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 1000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 2)(= p-sage-blue #f)(>= (-> *game-info* skill) 15.0)(= shopid2 14))
      (-! (-> *game-info* skill) 15.0)
      (set! shopitem2 "(Out of Stock)")
      (set! item-tss1 "Training Weight")
      (set! p-sage-blue #t)
      (set! item-update #t)
      (activate-weight-start)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 10000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 0)(= p-sage-blue #f)(>= (-> *game-info* skill) 15.0)(= shopid1 14))
      (-! (-> *game-info* skill) 15.0)
      (set! shopitem1 "(Out of Stock)")
      (set! item-tss1 "Training Weight")
      (activate-weight-start)
      (set! p-sage-blue #t)
      (set! item-update #t)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 10000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 1)(= p-sage-blue #f)(>= (-> *game-info* skill) 15.0)(= shopid3 14))
      (-! (-> *game-info* skill) 15.0)
      (set! shopitem3 "(Out of Stock)")
      (set! item-tss1 "Training Weight")
      (activate-weight-start)
      (set! p-sage-blue #t)
      (set! item-update #t)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 10000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 2)(= p-sage-red #f)(>= (-> *game-info* skill) 40.0)(= shopid2 15))
      (-! (-> *game-info* skill) 40.0)
      (set! shopitem2 "(Out of Stock)")
      (set! item-tss1 "Rapid Fire")
      (set! p-sage-red #t)
      (set! item-update #t)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 100000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 0)(= p-sage-red #f)(>= (-> *game-info* skill) 40.0)(= shopid1 15))
      (-! (-> *game-info* skill) 40.0)
      (set! shopitem1 "(Out of Stock)")
      (set! item-tss1 "Rapid Fire")
      (set! p-sage-red #t)
      (set! item-update #t)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 100000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 1)(= p-sage-red #f)(>= (-> *game-info* skill) 40.0)(= shopid3 15))
      (-! (-> *game-info* skill) 40.0)
      (set! shopitem3 "(Out of Stock)")
      (set! item-tss1 "Rapid Fire")
      (set! p-sage-red #t)
      (set! item-update #t)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 100000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 2)(= p-sage-dark #f)(>= (-> *game-info* skill) 40.0)(= shopid2 16))
      (-! (-> *game-info* skill) 40.0)
      (set! shopitem2 "(Out of Stock)")
      (set! item-tss1 "Gol's Unbeknowngst")
      (set! p-sage-dark #t)
      (set! item-update #t)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 1000000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 0)(= p-sage-dark #f)(>= (-> *game-info* skill) 40.0)(= shopid1 16))
      (-! (-> *game-info* skill) 40.0)
      (set! shopitem1 "(Out of Stock)")
      (set! item-tss1 "Gol's Unbeknowngst")
      (set! p-sage-dark #t)
      (set! item-update #t)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 1000000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 1)(= p-sage-dark #f)(>= (-> *game-info* skill) 40.0)(= shopid3 16))
      (-! (-> *game-info* skill) 40.0)
      (set! shopitem3 "(Out of Stock)")
      (set! item-tss1 "Gol's Unbeknowngst")
      (set! p-sage-dark #t)
      (set! item-update #t)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 1000000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
      (when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
      (+! (-> *game-info* continue-deaths) 100000000)
    )
    )
    (when (and (= menu-slot 0)(= (-> *game-info* total-deaths) 3)(>= (-> *game-info* skill) 100.0)(= shopid1 99))
      (-! (-> *game-info* skill) 100.0)
      (set! shopitem1 "(Out of Stock)")
      (set! (-> *game-info* total-deaths) 4)
      (when (< (-> *game-info* karma) 3.0)
        (set! unlock-msg-explode #t)
        (set! (-> *game-info* karma) 3.0)
      )
      (set! item-tss1 "Red Eco Shard")
      (set! item-update #t)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 400000000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 1)(= (-> *game-info* total-deaths) 3)(>= (-> *game-info* skill) 100.0)(= shopid3 99))
      (-! (-> *game-info* skill) 100.0)
      (set! shopitem3 "(Out of Stock)")
      (set! (-> *game-info* total-deaths) 4)
      (when (< (-> *game-info* karma) 3.0)
        (set! unlock-msg-explode #t)
        (set! (-> *game-info* karma) 3.0)
      )
      (set! item-tss1 "Red Eco Shard")
      (set! item-update #t)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 400000000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (and (= menu-slot 2)(= (-> *game-info* total-deaths) 3)(>= (-> *game-info* skill) 100.0)(= shopid2 99))
      (-! (-> *game-info* skill) 100.0)
      (set! shopitem2 "(Out of Stock)")
      (set! (-> *game-info* total-deaths) 4)
      (when (< (-> *game-info* karma) 3.0)
        (set! unlock-msg-explode #t)
        (set! (-> *game-info* karma) 3.0)
      )
      (set! item-tss1 "Red Eco Shard")
      (set! item-update #t)
      (set! (-> *game-info* continue-deaths) (+ (-> *game-info* continue-deaths) 400000000))
      (when (= already-teleported? #f)
        (set! autosave-delayed #t)
      )
    )
    (when (= in-intro? #t)
      (set! shop-tutorial #t)
    )
  )


  (when (= item-update #t)
  (+! item-tracker 1)
  (when (= item-tracker 1)
    (set! item-ts1 item-tss1)
  )
  (when (= item-tracker 2)
    (set! item-ts2 item-tss1)
  )
  (when (= item-tracker 3)
    (set! item-ts3 item-tss1)
  )
  (when (= item-tracker 4)
    (set! item-ts4 item-tss1)
  )
  (when (= item-tracker 5)
    (set! item-ts5 item-tss1)
  )
  (when (= item-tracker 6)
    (set! item-ts6 item-tss1)
  )
  (when (= item-tracker 7)
    (set! item-ts7 item-tss1)
  )
  (when (= item-tracker 8)
    (set! item-ts8 item-tss1)
  )
  (when (= item-tracker 9)
    (set! item-ts9 item-tss1)
  )
  (when (= item-tracker 10)
    (set! item-ts10 item-tss1)
  )
  (when (= item-tracker 11)
    (set! item-ts11 item-tss1)
  )
  (when (= item-tracker 12)
    (set! item-ts12 item-tss1)
  )
  (when (= item-tracker 13)
    (set! item-ts13 item-tss1)
  )
  (when (= item-tracker 14)
    (set! item-ts14 item-tss1)
  )
  (when (= item-tracker 15)
    (set! item-ts15 item-tss1)
  )
  (when (= item-tracker 16)
    (set! item-ts16 item-tss1)
  )
  (when (= item-tracker 17)
    (set! item-ts17 item-tss1)
  )
  (when (= item-tracker 18)
    (set! item-ts18 item-tss1)
  )
  (when (= item-tracker 19)
    (set! item-ts19 item-tss1)
  )
  (when (= item-tracker 20)
    (set! item-ts20 item-tss1)
  )
  (when (= item-tracker 21)
    (set! item-ts21 item-tss1)
  )
  (when (= item-tracker 22)
    (set! item-ts22 item-tss1)
  )
  (when (= item-tracker 23)
    (set! item-ts23 item-tss1)
  )
  (when (= item-tracker 24)
    (set! item-ts24 item-tss1)
  )
  (when (= item-tracker 25)
    (set! item-ts25 item-tss1)
  )
  (when (= item-tracker 26)
    (set! item-ts26 item-tss1)
  )
  (when (= item-tracker 27)
    (set! item-ts27 item-tss1)
  )
  (set! item-update #f)
)

(when (= item-refresh #t)
  (set! item-ts1 "")
  (set! item-ts2 "")
  (set! item-ts3 "")
  (set! item-ts4 "")
  (set! item-ts5 "")
  (set! item-ts6 "")
  (set! item-ts7 "")
  (set! item-ts8 "")
  (set! item-ts9 "")
  (set! item-ts10 "")
  (set! item-ts11 "")
  (set! item-ts12 "")
  (set! item-ts13 "")
  (set! item-ts14 "")
  (set! item-ts15 "")
  (set! item-ts16 "")
  (set! item-ts17 "")
  (set! item-ts18 "")
  (set! item-ts19 "")
  (set! item-ts20 "")
  (set! item-ts21 "")
  (set! item-ts22 "")
  (set! item-ts23 "")
  (set! item-ts24 "")
  (set! item-ts25 "")
  (set! item-ts26 "")
  (set! item-ts27 "")
  (set! item-tss1 "")
  (set! item-tracker 0)
  (set! p-dark-gun #f)
  (set! p-blue-gun #f)
  (set! p-red-gun #f)
  (set! p-upgrade-ammo #f)
  (set! p-upgrade-damage #f)
  (set! p-upgrade-red #f)
  (set! p-upgrade-vehicles #f)
  (set! p-double-shot #f)
  (set! p-explode-shot #f)
  (set! p-clover #f)
  (set! p-drinkable #f)
  (set! p-big-punch #f)
  (set! p-sage-yellow #f)
  (set! p-sage-blue #f)
  (set! p-sage-red #f)
  (set! p-sage-dark #f)
  (set! item-refresh #f)
)
(when (not *scene-player*)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(when (and (= popup-shop #t)(= (paused?) #f)(= in-menu2 #f)(not *scene-player*))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>R3<COLOR_WHITE>:<COLOR_GREEN> Access Shop"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 245 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and 
(= already-teleported? #f)
(!= (-> (level-get-target-inside *level*) name) 'hiphog)
(= print-stage 4)
(!= act-act 4)
(= in-game? #t)
)
  (set! teleport-hiphog #t)
)

(when 
(and 
(= teleport-hiphog #t)
(!= (-> (level-get-target-inside *level*) name) 'hiphog)
(= avoidc-waitb #f)
(!= print-stage 4)
)
  (set! teleport-hiphog #f)
  (set! teleport-back? #f)
)

(when (and (= teleport-hiphog #t)(= avoidc-waitb #f)(= already-teleported? #f)(= (paused?) #f)(cpad-pressed? 0 r3))
  (send-event *target* 'continue (get-continue-by-name *game-info* "hiphog-start"))
  (set! already-teleported? #t)
  (set! teleport-hiphog #f)
  (set! teleport-wait #t)
  (set! pause-menu-blocked? #t)
)


(when (and 
(!= (-> (level-get-target-inside *level*) name) 'hiphog)
(= teleport-back? #t)
(= (pause-allowed?) #t)
(= (paused?) #f)
)
  (when (= act-stage 4)
    (send-event *target* 'continue (get-continue-by-name *game-info* "palcab-start"))
  )
  (when (= act-stage 9)
    (send-event *target* 'continue (get-continue-by-name *game-info* "tomb-boulder-pre"))
  )
  (when (= act-stage 14)
    (send-event *target* 'continue (get-continue-by-name *game-info* "castle-start"))
  )
  (set! autosave-delayed #t)
  (set! pause-menu-blocked? #f)
  (set! teleport-back? #f)
)


(when (= teleport-wait #t)
  (+! teleport-w 1)
  (when (= teleport-w 120)
    (set! teleport-back? #t)
    (set! teleport-w 0)
    (set! teleport-wait #f)
  )
)
#|
(when (pickup-collectable! (-> *target* fact) (pickup-type board) 1.0 (the-as handle #f))
  (+! (-> *game-info* total-deaths) 1)
)|#

(when (and (= teleport-hiphog #t)(= (paused?) #f)(= teleport-back? #f)(= already-teleported? #f))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>R3<COLOR_WHITE>:<COLOR_GREEN> Teleport to <COLOR_PINK>HipHog Shop!"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 245 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= menu-slot 0)(= in-menu2 #t))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
<COLOR_GREEN>~S"
    shopitem1
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 125 55 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (!= menu-slot 0)(= in-menu2 #t))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
<COLOR_WHITE>~S"
    shopitem1
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 125 55 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= menu-slot 1)(= in-menu2 #t))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
<COLOR_GREEN>~S"
    shopitem3
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 95 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (!= menu-slot 1)(= in-menu2 #t))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
<COLOR_WHITE>~S"
    shopitem3
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 95 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= menu-slot 2)(= in-menu2 #t))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
<COLOR_GREEN>~S"
    shopitem2
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 375 55 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (!= menu-slot 2)(= in-menu2 #t))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
<COLOR_WHITE>~S"
    shopitem2
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 375 55 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and 
(= in-menu2 #t)
(= in-intro? #f)
(!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>R1: <COLOR_YELLOW>Refresh Shop <COLOR_PINK>(unstable)~%<COLOR_WHITE>R3: <COLOR_YELLOW>Exit"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 380 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and 
(= in-menu2 #t)
(= in-intro? #f)
(= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>R1: <COLOR_RED>Cannot Refresh Shop <COLOR_PINK>(too unstable)~%<COLOR_WHITE>R3: <COLOR_YELLOW>Exit"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 380 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= in-menu2 #t)(= in-intro? #t))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>R3: <COLOR_YELLOW>Exit"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 380 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and 
(!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
(= in-menu2 #t)
(cpad-pressed? 0 r1)
(= in-intro? #f)
)    
  (when (rand-vu-percent? (- 0.6 luck))
  (+! (-> *game-info* continue-deaths) 100000000)
  )
  (set! roll-shopitems #t)
)
)

;menu params
(when (and (= in-menu #t)(= (paused?) #f)(= (-> *game-info* karma) 1.0)(not (cpad-pressed? 0 x)))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Welcome to<COLOR_RED> Roguelike <COLOR_ORANGE>Jak II<COLOR_WHITE>
~%<COLOR_BLUE>Made by Kraken
~%
~%<COLOR_WHITE>When you <COLOR_GREEN>start your run<COLOR_WHITE>,
~%you will be transported to the dimensions where Jak
~%no longer exists, and you must take his place
~%by completing missions, and fulfilling the prophecy.
~%
~%Jak dying means <COLOR_RED>Perma-Death<COLOR_WHITE>!
~%Orbs will be rewarded for playing well. But if you die, you lose everything!
~%Talk to Vin to look at his shop here. You can save up <COLOR_PINK>Tokens<COLOR_WHITE> to purchase items
~%to put into your run. <COLOR_PINK>Tokens<COLOR_WHITE> are obtained from collecting skull gems.
~%
~%Everything is <COLOR_GREEN>a roll of the dice.
~%<COLOR_WHITE>Things like city guard counts, enemy speed, and so many more, are completely random!
~%And finally, Jak's default weapon is the Yellow Gun, meaning every other 
~%weapon, buff, or upgrade can be purchased or found, but not saved..
~%You can exit the level to <COLOR_GREEN>start your run<COLOR_WHITE>.
~%
~%<COLOR_BLUE>X<COLOR_GREEN> Continue"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 15 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-menu #t)(= (paused?) #f)(= win-lose #f)(!= (-> *game-info* karma) 6.0)(>= (-> *game-info* karma) 2.0)(not (cpad-pressed? 0 x)))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Welcome to<COLOR_RED> Roguelike Jak II<COLOR_WHITE>!
~%<COLOR_BLUE>Made by Kraken
~%
~%
<COLOR_RED>~%You Died!
~%<COLOR_WHITE>Skulls Gems turned into Tokens:
~%<COLOR_YELLOW>~d
~%
~%
~%
~%<COLOR_WHITE>Progress:
~%<COLOR_GREEN> Act ~d <COLOR_YELLOW>Stage ~d
~%
~%
~%
~%
<COLOR_WHITE>Current Tokens:
~%<COLOR_PINK>~d
~%
~%<COLOR_GREEN>Press <COLOR_BLUE>X<COLOR_GREEN> to Continue"
    (the int temp-skullgemamount)
    act-act
    print-stage
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 25 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)



(when (and (= in-menu #t)(= (paused?) #f)(= win-lose #t)(>= (-> *game-info* karma) 2.0)(!= (-> *game-info* karma) 6.0)(not (cpad-pressed? 0 x)))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "~%<COLOR_GREEN>~%You Won!
~%
~%<COLOR_WHITE>Skulls Gems turned into Tokens:
~%<COLOR_YELLOW>~d
~%
~%
~%<COLOR_WHITE>Progress:
~%<COLOR_GREEN> Act ~d <COLOR_YELLOW>Stage ~d
~%
~%
~%<COLOR_WHITE>Current Tokens:
~%<COLOR_PINK>~d
~%
~%
~%<COLOR_ORANGE>Explosive Yellow Shot unlocked in shops across all dimensions!
~%<COLOR_RED>The Time Loop remains broken.
~%<COLOR_ORANGE>Hint: Try to collect important items for Vin!
~%
~%<COLOR_GREEN>Press <COLOR_BLUE>X<COLOR_GREEN> to Continue"
    (the int temp-skullgemamount)
    act-act
    print-stage
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 25 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-menu #t)(= (paused?) #f)(>= (-> *game-info* karma) 6.0)(not (cpad-pressed? 0 x)))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "~%<COLOR_GREEN>~%You beat RogueLike Jak II!
~%<COLOR_ORANGE>Thank you for playing!!!!
~%<COLOR_WHITE>Skulls Gems turned into Tokens:
~%<COLOR_YELLOW>~d
~%
~%
~%<COLOR_WHITE>Progress:
~%<COLOR_GREEN> You frickin won
~%
~%
~%<COLOR_WHITE>Current Tokens:
~%<COLOR_PINK>~d
~%
~%<COLOR_ORANGE>BIG GG!! <COLOR_PINK>CHEATS <COLOR_ORANGE>unlocked by holding L2 while <COLOR_GREEN>in your run!
~%<COLOR_WHITE>Light Eco<COLOR_ORANGE> is still present across the multiverse!
~%<COLOR_GREEN>The Time Loop is now fixed in all dimensions! <COLOR_RED>But one still remains,
~%The reality that's sealed from the others, with the time loop complete.
~%A derelict reality.
~%<COLOR_GREEN>Press <COLOR_BLUE>X<COLOR_GREEN> to Continue"
    (the int temp-skullgemamount)
    (the int (-> *game-info* fuel))
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 25 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= start-stage #t)(cpad-pressed? 0 r3))
  (set! tutorial-completed? #t)
  (set! wait-exit #t)
  (set! start-stage #f)
  (set! in-hub? #f)
)

(when (and (= in-menu #t) (cpad-pressed? 0 x))
  (set! camera-unlocked #t)
  (set! pause-menu-blocked? #f)
  (set! in-menu #f)
  (set! display-death-screen #f)
  (set! win-lose #f)
  (set! item-ts1 "")
  (set! item-ts2 "")
  (set! item-ts3 "")
  (set! item-ts4 "")
  (set! item-ts5 "")
  (set! item-ts6 "")
  (set! item-ts7 "")
  (set! item-ts8 "")
  (set! item-ts9 "")
  (set! item-ts10 "")
  (set! item-ts11 "")
  (set! item-ts12 "")
  (set! item-ts13 "")
  (set! item-ts14 "")
  (set! item-ts15 "")
  (set! item-ts16 "")
  (set! item-ts17 "")
  (set! item-ts18 "")
  (set! item-ts19 "")
  (set! item-ts20 "")
  (set! item-ts21 "")
  (set! item-ts22 "")
  (set! item-ts23 "")
  (set! item-ts24 "")
  (set! item-ts25 "")
  (set! item-ts26 "")
  (set! item-ts27 "")
  (set! item-tracker 0)
  (when (= (-> *game-info* karma) 1.0)
    (set! (-> *game-info* karma) 2.0)
  )
  (set! post-item-display? #f)
)

#| All of these are set to IDs

Here are the shop IDs
1 Yellow Gun (25 orbs)
2 Blue Gun (32 orbs)
3 Peacemaker (40 orbs)
4 Upgrade Red speed (10 orbs)
5 Upgrade Ammo (15 orbs)
6 Upgrade Damage (20 orbs)
7 Full HP (7 orbs)
8 Buffed Vehicles
9 Double Shot
99 Red Eco Shard

|#


(when 
(and
(= vin-shop #t)
(= in-menu3 #f)
(cpad-pressed? 0 l1)
)
(set! vin-shop #f)
(set! in-menu3 #t)
)

(when 
(and
(= vin-shop #t)
(= in-menu3 #t)
(cpad-pressed? 0 r1)
)
(set! vin-shop #t)
(set! in-menu3 #f)
)

(when (and 
(= popup-load #t)
(not *scene-player*)
(= (paused?) #f)
(= (pause-allowed?) #t)
)
  (+! wait-l 1)
  (when (= wait-l 600)
    (set! wait-l 0)
    (set! popup-load #f)
  )

(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>INFO:~%<COLOR_ORANGE>You cannot do that while in a run!~%<COLOR_ORANGE>Please restart the game, then load the save from the main menu."
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 330 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and 
(= popup-load2 #t)
(not *scene-player*)
(= (paused?) #f)
(= (pause-allowed?) #t)
)
  (+! wait-l2 1)
  (when (= wait-l2 600)
    (set! wait-l2 0)
    (set! popup-load2 #f)
  )

(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>INFO:~%<COLOR_ORANGE>Please restart the game, then load the save from the main menu."
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 330 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)



(when (not *scene-player*)
(when (and 
(= in-menu2 #t)
(= p-red-gun #f)
(or
(and (= shopid1 1) (= menu-slot 0))
(and (= shopid2 1) (= menu-slot 2))
(and (= shopid3 1) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>Unlocks the <COLOR_RED>Red<COLOR_ORANGE> Gun"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and 
(= in-menu2 #t)
(= p-blue-gun #f)
(or
(and (= shopid1 2) (= menu-slot 0))
(and (= shopid2 2) (= menu-slot 2))
(and (= shopid3 2) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>Unlocks the <COLOR_BLUE>Blue<COLOR_ORANGE> Gun"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and 
(= in-menu2 #t)
(= p-dark-gun #f)
(or
(and (= shopid1 3) (= menu-slot 0))
(and (= shopid2 3) (= menu-slot 2))
(and (= shopid3 3) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>Unlocks the <COLOR_GREEN>Peacemaker"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and 
(= in-menu2 #t)
(= p-upgrade-red #f)
(or
(and (= shopid1 4) (= menu-slot 0))
(and (= shopid2 4) (= menu-slot 2))
(and (= shopid3 4) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>Rate of fire increased on the <COLOR_RED>Red <COLOR_ORANGE>Gun"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and 
(= in-menu2 #t)
(= p-upgrade-ammo #f)
(or
(and (= shopid1 5) (= menu-slot 0))
(and (= shopid2 5) (= menu-slot 2))
(and (= shopid3 5) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>x2 on ammo for <COLOR_YELLOW>all weapons"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and 
(= in-menu2 #t)
(= p-upgrade-damage #f)
(or
(and (= shopid1 6) (= menu-slot 0))
(and (= shopid2 6) (= menu-slot 2))
(and (= shopid3 6) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>x2 damage increase for <COLOR_YELLOW>all weapons"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and 
(= in-menu2 #t)
(or
(and (= shopid1 7) (= menu-slot 0))
(and (= shopid2 7) (= menu-slot 2))
(and (= shopid3 7) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK>Refills your HP to maximum,~%but makes the dimension unstable"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and 
(= in-menu2 #t)
(= p-upgrade-vehicles #f)
(or
(and (= shopid1 8) (= menu-slot 0))
(and (= shopid2 8) (= menu-slot 2))
(and (= shopid3 8) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK>x3 HP, and x3 speed for all vehicles~%(excluding guard vehicles)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and 
(= in-menu2 #t)
(= p-double-shot #f)
(or
(and (= shopid1 9) (= menu-slot 0))
(and (= shopid2 9) (= menu-slot 2))
(and (= shopid3 9) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK>Every projectile fires twice"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and 
(= in-menu2 #t)
(= p-explode-shot #f)
(or
(and (= shopid1 999) (= menu-slot 0))
(and (= shopid2 999) (= menu-slot 2))
(and (= shopid3 999) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK>Every projectile spawns a grenade on impact"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and 
(= in-menu2 #t)
(= p-clover #f)
(or
(and (= shopid1 10) (= menu-slot 0))
(and (= shopid2 10) (= menu-slot 2))
(and (= shopid3 10) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK>Raises Luck stat~%Chance to evade damage based on Luck"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and 
(= in-menu2 #t)
(= p-drinkable #f)
(or
(and (= shopid1 11) (= menu-slot 0))
(and (= shopid2 11) (= menu-slot 2))
(and (= shopid3 11) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK>Every time you complete a mission,~%you get 2 free HP"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and 
(= in-menu2 #t)
(= p-big-punch #f)
(or
(and (= shopid1 12) (= menu-slot 0))
(and (= shopid2 12) (= menu-slot 2))
(and (= shopid3 12) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK>Channel Red Eco every time you punch for x2 speed!"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and 
(= in-menu2 #t)
(= p-sage-yellow #f)
(or
(and (= shopid1 13) (= menu-slot 0))
(and (= shopid2 13) (= menu-slot 2))
(and (= shopid3 13) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK>Upon purchase, travel back in time with all of your items, and stats.~%This puts you at Act 1 Stage 1"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and 
(= in-menu2 #t)
(= p-sage-blue #f)
(or
(and (= shopid1 14) (= menu-slot 0))
(and (= shopid2 14) (= menu-slot 2))
(and (= shopid3 14) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK>Upon purchase, Jak's speed with attacks are cut in half.~%But <COLOR_GREEN>every enemy death<COLOR_PINK> will bring his speed up again and <COLOR_YELLOW>past the average norm"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and 
(= in-menu2 #t)
(= p-sage-red #f)
(or
(and (= shopid1 15) (= menu-slot 0))
(and (= shopid2 15) (= menu-slot 2))
(and (= shopid3 15) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK>Blast opponents at lightning speeds!~%Does not affect the <COLOR_RED>Scattergun<COLOR_PINK>."
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and 
(= in-menu2 #t)
(= p-sage-dark #f)
(or
(and (= shopid1 16) (= menu-slot 0))
(and (= shopid2 16) (= menu-slot 2))
(and (= shopid3 16) (= menu-slot 1))
)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK>Crit with a Peacemaker blast out of any weapon!~%Crit chance based off your <COLOR_GREEN>luck stat~%Also makes a very special ability last longer"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 245 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and
(= unlock-msg-explode #t)
)
(+! unlock-msg-i 1)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>Explosive Shot Unlocked in shops across the multiverse!"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 225 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
(when (= unlock-msg-i 600)
  (set! unlock-msg-explode #f)
  (set! unlock-msg-i 0)
)
)


(when (and (= start-stage #t)(not (cpad-hold? 0 r3)))
   (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>R3<COLOR_WHITE>:<COLOR_GREEN> Start Run"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 245 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= start-stage #t)(cpad-hold? 0 r3))
   (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>R3<COLOR_WHITE>:<COLOR_YELLOW> Start Run"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 245 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
)
#| shop
(when (and (= in-menu #t)(cpad-hold? 0 r1))

)
|#
(when (and (not *scene-player*) (= act-act 1)(= (-> *game-info* buzzer-total) 1.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW><<COLOR_WHITE>---<---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= act-act 1)(= (-> *game-info* buzzer-total) 2.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW><---<<COLOR_WHITE>---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (not *scene-player*) (= act-act 1)(= (-> *game-info* buzzer-total) 3.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW><---<---<<COLOR_WHITE>---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (not *scene-player*) (= act-act 1)(= (-> *game-info* buzzer-total) 4.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW><---<---<---<<COLOR_WHITE>---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (not *scene-player*) (= act-act 1)(= (-> *game-info* buzzer-total) 5.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW><---<---<---<---<COLOR_RED>(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
;----------------------------SECOND ACT-----------------------------
(when (and (not *scene-player*) (= act-act 2)(= (-> *game-info* buzzer-total) 6.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_BLUE><<COLOR_WHITE>---<---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (not *scene-player*) (= act-act 2)(= (-> *game-info* buzzer-total) 7.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_BLUE><---<<COLOR_WHITE>---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (not *scene-player*) (= act-act 2)(= (-> *game-info* buzzer-total) 8.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_BLUE><---<---<<COLOR_WHITE>---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (not *scene-player*) (= act-act 2)(= (-> *game-info* buzzer-total) 9.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_BLUE><---<---<---<<COLOR_WHITE>---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (not *scene-player*) (= act-act 2)(= (-> *game-info* buzzer-total) 10.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_BLUE><---<---<---<---<COLOR_RED>(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

;----------------------------THIRD ACT-----------------------------
(when (and (not *scene-player*) (= act-act 3)(= (-> *game-info* buzzer-total) 11.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED><<COLOR_WHITE>---<---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (not *scene-player*) (= act-act 3)(= (-> *game-info* buzzer-total) 12.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED><---<<COLOR_WHITE>---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (not *scene-player*) (= act-act 3)(= (-> *game-info* buzzer-total) 13.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED><---<---<<COLOR_WHITE>---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (not *scene-player*) (= act-act 3)(= (-> *game-info* buzzer-total) 14.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED><---<---<---<<COLOR_WHITE>---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (not *scene-player*) (= act-act 3)(= (-> *game-info* buzzer-total) 15.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED><---<---<---<---<COLOR_RED>(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

;----------------------------DARK ACT-----------------------------
(when (and (not *scene-player*) (= act-act 4)(= (-> *game-info* buzzer-total) 16.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK><<COLOR_WHITE>---<---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (not *scene-player*) (= act-act 4)(= (-> *game-info* buzzer-total) 17.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK><---<<COLOR_WHITE>---<---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (not *scene-player*) (= act-act 4)(= (-> *game-info* buzzer-total) 18.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK><---<---<<COLOR_WHITE>---<---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (not *scene-player*) (= act-act 4)(= (-> *game-info* buzzer-total) 19.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK><---<---<---<<COLOR_WHITE>---(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (not *scene-player*) (= act-act 4)(= (-> *game-info* buzzer-total) 20.0)(= display-run #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK><---<---<---<---<COLOR_PINK>(BOSS)"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 0 0.0 (font-color default) (font-flags shadow middle kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)


(when (= main-msg-1 #t)
  (+! msgi 1)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>INFO~%<COLOR_YELLOW>Yellow Eco Shard collected!"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 245 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  (when (= msgi 600)
    (set! main-msg-1 #f)
    (set! msgi 0)
  )
)
(when (= main-msg-2 #t)
  (+! msgi 1)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>INFO~%<COLOR_BLUE>Blue Eco Shard collected!"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 245 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  (when (= msgi 600)
    (set! main-msg-2 #f)
    (set! msgi 0)
  )
)
(when (= main-msg-3 #t)
  (+! msgi 1)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>INFO~%<COLOR_RED>Red Eco Shard collected!"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 245 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  (when (= msgi 600)
    (set! main-msg-3 #f)
    (set! msgi 0)
  )
)

#|
(when 
(and 
(task-node-closed? (game-task-node nest-get-to-gun-introduction))
(not (task-node-closed? (game-task-node nest-get-to-gun-resolution)))
)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Enemies Left:~%<COLOR_PINK>~D"
    nest-enemyc
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 245 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)|#

(when 
(and 
(<= nest-enemyc 0)
(not (task-node-closed? (game-task-node nest-get-to-gun-resolution)))
)
  (task-node-close! (game-task-node nest-get-to-gun-resolution))
  (set! nest-mission #f)
  (set! tp-bf #t)
)

#|(when (and (= tp-bfw #t)(not *scene-player*))
  (+! tp-bfwi 1)
  (when (= tp-bfwi 30)
    (send-event *target* 'continue (get-continue-by-name *game-info* "nest-gun"))
    (set! nest-enemyc 55)
    (play-task (game-task nest-get-to-gun) 'debug #f)
    (set! tp-bfwi 0)
    (set! tp-bfw #f)
  )
)|#

(when 
(and 
(not *scene-player*)
(= avoidc-waitb #f)
(= run-in-progress #t)
(= (-> *game-info* karma) 3.0)
(not (cpad-hold? 0 l2))
(= in-hub? #f)
(= in-menu2 #f)
(= stat-menu-intro #t)
)
  (set! stat-menu-intro #f)
  (set! (-> *game-info* karma) 4.0)
  (set! stat-menu #f)
  (set! pause-menu-blocked? #f)
)

(when 
(and 
(not *scene-player*)
(= avoidc-waitb #f)
(= run-in-progress #t)
(= (-> *game-info* karma) 3.0)
(cpad-pressed? 0 l2)
(= in-hub? #f)
(= in-menu2 #f)
(= stat-menu-intro #f)
)
  (set! stat-menu-intro #t)
  (set! stat-menu #t)
  (set! pause-menu-blocked? #t)
)

(when 
(and 
(not *scene-player*)
(= avoidc-waitb #f)
(= run-in-progress #t)
(>= (-> *game-info* karma) 4.0)
(not (cpad-hold? 0 l2))
(= in-hub? #f)
(= stat-menu #t)
)
  (set! stat-menu #f)
  (set! pause-menu-blocked? #f)
)

(when 
(and 
(not *scene-player*)
(= avoidc-waitb #f)
(= run-in-progress #t)
(>= (-> *game-info* karma) 4.0)
(= in-hub? #f)
(cpad-pressed? 0 l2)
(= stat-menu #f)
(= in-menu2 #f)
(= in-dialogue? #f)
)
  (set! stat-menu #t)
  (set! pause-menu-blocked? #t)
)

(when 
(and 
(= run-in-progress #t)
(= (-> *game-info* karma) 3.0)
(= stat-menu #f)
(= in-hub? #f)
(= in-menu2 #f)
(= in-dialogue? #f)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>INFO:~%<COLOR_ORANGE>Hold <COLOR_RED>L2<COLOR_ORANGE> to look at your stat menu!"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 330 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (= stat-menu-intro #t)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Vin:~%<COLOR_ORANGE>Jak, I've done it! You should now be able to see your stats.~%All of these will influence your current run.~%Make sure you keep tabs on these."
    act-act
    print-stage
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 25 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= stat-menu #t)(!= (-> *game-info* karma) 6.0))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
<COLOR_WHITE>Current Run:
~%<COLOR_ORANGE>Act ~D <COLOR_YELLOW>Stage ~D
~%
~%<COLOR_GREEN>Luck:<COLOR_ORANGE> ~F
~%
~%
~%
~%
~%
~%
~%
~%
~%
~%
~%
~%
~%
"
    act-act
    print-stage
    luck
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 75 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= stat-menu #t)(= in-cheat #f)(= (-> *game-info* karma) 6.0))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
<COLOR_WHITE>Current Run:
~%<COLOR_ORANGE>Act ~D <COLOR_YELLOW>Stage ~D
~%
~%<COLOR_GREEN>Luck:<COLOR_ORANGE> ~F
~%
~%
~%
~%
~%
~%
~%
~%
~%
~%
~%
~%<COLOR_ORANGE>Press <COLOR_RED>R3 <COLOR_ORANGE>to open the <COLOR_GREEN>Cheat Menu<COLOR_ORANGE>.
~%
"
    act-act
    print-stage
    luck
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 75 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= (-> *game-info* total-deaths) 1)(= vin-shop #t))
    (when (= vin-talk 1)
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Vin:~%Jak! I've found something that will be of high interest to us.
    ~%There's a <COLOR_YELLOW>Yellow Eco Shard<COLOR_WHITE> that a <COLOR_RED>Krimzon Guard<COLOR_WHITE> has.
    ~%I need you to go into the <COLOR_YELLOW>Yellow Eco Stage<COLOR_WHITE> and find the guard that has it.
    ~%This eco is part of our ticket out of here. I'll get it the second you collect it.
    ~%<COLOR_YELLOW>I also want to say, do not be discouraged if you die. Your main focus should
    ~%be on finding that shard, and getting as many skull gems and items as possible!
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (= vin-talk 2)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Vin:~%Listen, if we want to get out of here, we should think about getting certain items across dimensions.
    ~%If you happen to see a <COLOR_YELLOW>Yellow Eco Shard<COLOR_WHITE> that a <COLOR_RED>Krimzon Guard<COLOR_WHITE> has,
    ~%don't hesitate to go and grab it. My radar indicates it's located in Act 1.
    ~%<COLOR_YELLOW>Any enemy can drop orbs via chance, this could help with purchasing items!
    ~%
    ~%
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (= vin-talk 3)
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Vin:~%Remember, we need an item in order to locate the dimension where all the dark eco is concentrated.
    ~%Right now, a <COLOR_YELLOW>Yellow Eco Shard<COLOR_WHITE> can be collected from a <COLOR_RED>Krimzon Guard<COLOR_WHITE>.
    ~%It's in Act 1, if you see it, please get it for me!
    ~%<COLOR_YELLOW>Crates have a very low chance in dropping a random item for you. So, if you see
    ~%a jetboard pop out of a crate, go grab it!
    ~%
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (= vin-talk 4)
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Vin:~%Alright, here's the deal...
    ~%Right now, a <COLOR_YELLOW>Yellow Eco Shard<COLOR_WHITE> can be collected from a <COLOR_RED>Krimzon Guard<COLOR_WHITE> in Act 1.
    ~%This item is very useful, and could help us locate the original dimension.
    ~%<COLOR_YELLOW>If you cross dimensions with 8HP, your chances increase on finding it.
    ~%This is because of a luck stat I found attached to you. No damage, More luck!
    ~%
    ~%
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    
  )

(when (and (= (-> *game-info* total-deaths) 2)(= vin-shop #t))
  (when (= vin-talk 1)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Vin:~%Amazing! This shard you collected is 1 of 3 pieces we need to locate the original dimension!
    ~%The next item you'll need to look out for is a <COLOR_BLUE>Blue Eco Shard<COLOR_WHITE>.
    ~%Somewhere in Act 2, <COLOR_PINK>a crate<COLOR_WHITE> contains the piece we need.
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= vin-talk 2)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Vin:~%This shard you got is incredibly powerful!~%But it would seem that this item you've collected is one of three we need.
    ~%Right now, you're looking for a <COLOR_BLUE>Blue Eco Shard<COLOR_WHITE> in Act 2.
    ~%My radar says <COLOR_PINK>a crate<COLOR_WHITE> could have this item.
    ~%
    ~%
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= vin-talk 3)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Vin:~%You've found the <COLOR_YELLOW>Yellow Eco Shard<COLOR_WHITE>! Good work!
    ~%Next you'll need a <COLOR_BLUE>Blue Eco Shard<COLOR_WHITE> from <COLOR_PINK>a crate<COLOR_WHITE> that contains it.
    ~%This item can be found in Act 2, so keep looking!
    ~%<COLOR_YELLOW>If you cross dimensions with 8HP, your chances increase on finding it.
    ~%This is because of a luck stat I found attached to you. No damage, More luck!
    ~%
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= vin-talk 4)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Vin:~%Good job for finding this piece for me.
    ~%This item is one of three, you'll need to look out for a <COLOR_BLUE>Blue Eco Shard<COLOR_WHITE> this time.
    ~%Somewhere in Act 2, my scans read that <COLOR_PINK>a crate<COLOR_WHITE> could contain this item.
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
)

(when (and (= (-> *game-info* total-deaths) 3)(= vin-shop #t))
  (when (= vin-talk 1)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Vin:~%Nice work! We have almost all of the pieces we need!
    ~%Now we just have to find a <COLOR_RED>Red Eco Shard<COLOR_WHITE> from Act 3.
    ~%My energy readings say it's concentrated in the <COLOR_YELLOW>city port area.
    ~%<COLOR_YELLOW>We're so close, Jak! This will be the last piece to locate our original dimension.
    ~%
    ~%
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= vin-talk 2)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Vin:~%Nice work! We have almost all of the pieces we need!
    ~%Now we just have to find a <COLOR_RED>Red Eco Shard<COLOR_WHITE> from Act 3.
    ~%My energy readings say it's concentrated in the <COLOR_YELLOW>city port area.
    ~%<COLOR_YELLOW>We're so close, Jak! This will be the last piece to locate our original dimension.
    ~%
    ~%
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= vin-talk 3)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Vin:~%Nice work! We have almost all of the pieces we need!
    ~%Now we just have to find a <COLOR_RED>Red Eco Shard<COLOR_WHITE> from Act 3.
    ~%My energy readings say it's concentrated in the <COLOR_YELLOW>city port area.
    ~%<COLOR_YELLOW>We're so close, Jak! This will be the last piece to locate our original dimension.
    ~%
    ~%
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= vin-talk 4)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Vin:~%Nice work! We have almost all of the pieces we need!
    ~%Now we just have to find a <COLOR_RED>Red Eco Shard<COLOR_WHITE> from Act 3.
    ~%My energy readings say it's concentrated in the <COLOR_YELLOW>city port area.
    ~%<COLOR_YELLOW>We're so close, Jak! This will be the last piece to locate our original dimension.
    ~%
    ~%
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
)

(when (and (!= (-> *game-info* karma) 5.0)(!= (-> *game-info* karma) 6.0)(= (-> *game-info* total-deaths) 4)(= vin-shop #t))
  (when (or
    (= vin-talk 1)
    (= vin-talk 2)
    (= vin-talk 3)
    (= vin-talk 4)
  )
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
    <COLOR_WHITE>Vin:~%You did it! I've now triangulated the position of where this <COLOR_PINK>dark eco<COLOR_WHITE> is coming from!
    ~%Wow.. there's so.. so many universes.. listen, we should travel there again. I feel like now is the time to act.
    ~%But be warned, you could end up playing any mission across the whole story.
    ~%<COLOR_ORANGE>You've got to prepare accordingly<COLOR_WHITE>
    ~%
    ~%If you're still having trouble, try saving up <COLOR_YELLOW>Skull Gems<COLOR_WHITE> to get stronger items.
    ~%We're all counting on you, Jak! <COLOR_GREEN>Beat MetalKor, and fulfill the prophecy again!
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
)

(when (and (= (-> *game-info* karma) 5.0)(!= (-> *game-info* karma) 6.0)(= (-> *game-info* total-deaths) 4)(= vin-shop #t))
  (when (or
    (= vin-talk 1)
    (= vin-talk 2)
    (= vin-talk 3)
    (= vin-talk 4)
  )
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
    <COLOR_WHITE>Vin:~%Oh man! We were so close!
    ~%b-But don't worry! I've got that light eco scattered across infinity
    ~%They're all in crates and enemies, so let's use this win to our advantage and get back there!
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
)
(when (and (= (-> *game-info* karma) 5.0)(= (-> *game-info* total-deaths) 4)(= vin-shop #t))
  (when (or
    (= vin-talk 1)
    (= vin-talk 2)
    (= vin-talk 3)
    (= vin-talk 4)
  )
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
    <COLOR_WHITE>Vin:~%Oh man! We were so close!
    ~%b-But don't worry! I've got that light eco scattered across infinity
    ~%They're all in crates and enemies, so let's use this win to our advantage and get back there!
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
)

(when (and (= (-> *game-info* karma) 6.0)(= (-> *game-info* total-deaths) 4)(= vin-shop #t))
  (when (or
    (= vin-talk 1)
    (= vin-talk 2)
    (= vin-talk 3)
    (= vin-talk 4)
  )
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
    <COLOR_RED>...~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
)

(when (and (= (-> *game-info* karma) 6.0)(= (-> *game-info* total-deaths) 4)(= vin-shop #t))
  (when (or
    (= vin-talk 1)
    (= vin-talk 2)
    (= vin-talk 3)
    (= vin-talk 4)
    (= talk-rare #t)
  )
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
    <COLOR_RED>Yes I'm the one who put you back here.~%But I couldn't figure out how to quarantine worlds like Vin did.
    ~%He's truly a smart creature.
    ~%
    ~%But none of that matters now, as you're trapped here with me.
    ~%You're lucky though, you get to live out your natural life.
    ~%...I'm here for another eternity...
    ~%
    ~%
    ~%<COLOR_WHITE>Current Tokens:
    ~%<COLOR_PINK>~d
    ~%
    ~%<COLOR_RED>R1: <COLOR_WHITE>Buy <COLOR_GREEN>~S<COLOR_WHITE> to permenantly put in the shop for <COLOR_YELLOW>~d Tokens!
    ~%
    ~%<COLOR_GREEN>Press <COLOR_RED>R3<COLOR_GREEN> to Exit"
    (the int (-> *game-info* fuel))
    mod-s
    (the int menu-value)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
)



(when 
(and 
(= vin-shop #f) 
(= (paused?) #f)
(= (pause-allowed?) #t)
(= in-menu #f) 
(= start-stage #f) 
(= in-hub? #t)
(!= (-> *game-info* karma) 6.0)
)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>Triangle<COLOR_WHITE>:<COLOR_WHITE> Talk with Vin"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 245 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and 
(= vin-shop #f) 
(= (paused?) #f)
(= (pause-allowed?) #t)
(= in-menu #f) 
(= start-stage #f) 
(= in-hub? #t)
(= (-> *game-info* karma) 6.0)
)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>Triangle<COLOR_WHITE>:<COLOR_WHITE> Talk with <COLOR_RED>???"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 245 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)


(when 
(and 
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu #f) 
(= item-display? #t)
(= in-hub? #f)
)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>ACTIVE ITEMS:<COLOR_GREEN>~%~S~%~S~%~S~%~S~%~S~%~S"
    item-ts1
    item-ts2
    item-ts3
    item-ts4
    item-ts5
    item-ts6
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 125 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when 
(and 
(= vin-shop #f) 
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu #t) 
(= post-item-display? #t)
(= in-hub? #t)
)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>ITEMS COLLECTED IN RUN:<COLOR_YELLOW>~%~S~%~S~%~S~%~S~%~S~%~S"
    item-ts1
    item-ts2
    item-ts3
    item-ts4
    item-ts5
    item-ts6
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 125 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and 
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu #f) 
(= item-display? #t)
(= in-hub? #f)
)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>~%~S~%~S~%~S~%~S~%~S~%~S"
    item-ts7
    item-ts8
    item-ts9
    item-ts10
    item-ts11
    item-ts12
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 185 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and 
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu #t) 
(= post-item-display? #t)
(= in-hub? #t)
)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>~%~S~%~S~%~S~%~S~%~S~%~S"
    item-ts7
    item-ts8
    item-ts9
    item-ts10
    item-ts11
    item-ts12
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 185 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and 
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu #f) 
(= item-display? #t)
(= in-hub? #f)
)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>~%~S~%~S~%~S~%~S~%~S~%~S"
    item-ts13
    item-ts14
    item-ts15
    item-ts16
    item-ts17
    item-ts18
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 245 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and 
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu #t) 
(= post-item-display? #t)
(= in-hub? #t)
)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>~%~S~%~S~%~S~%~S~%~S~%~S"
    item-ts13
    item-ts14
    item-ts15
    item-ts16
    item-ts17
    item-ts18
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 245 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and 
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu #f) 
(= item-display? #t)
(= in-hub? #f)
)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>~%~S~%~S~%~S~%~S~%~S~%~S"
    item-ts19
    item-ts20
    item-ts21
    item-ts22
    item-ts23
    item-ts24
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 305 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and 
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu #f) 
(= post-item-display? #t)
(= in-hub? #f)
)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>~%~S~%~S~%~S~%~S~%~S~%~S"
    item-ts19
    item-ts20
    item-ts21
    item-ts22
    item-ts23
    item-ts24
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 305 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when 
(and 
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu #f) 
(= item-display? #t)
(= in-hub? #f)
)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>~%~S~%~S~%~S~%~S~%~S~%~S"
    item-ts25
    item-ts26
    item-ts27
    item-ts28
    item-ts29
    item-ts30
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 365 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when 
(and 
(= (paused?) #f)
(= (pause-allowed?) #t)
(not *scene-player*)
(= in-menu #f) 
(= post-item-display? #t)
(= in-hub? #f)
)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>~%~S~%~S~%~S~%~S~%~S~%~S"
    item-ts25
    item-ts26
    item-ts27
    item-ts28
    item-ts29
    item-ts30
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 365 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-hub? #f)(= in-cheat #f)(not *scene-player*)(= stat-menu #t)(= wait-tutorial #f)(= ohshit #f))
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_PINK>Instability Level: <COLOR_RED>~d"
      curse-level
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 175 0.0 (font-color default) (font-flags middle shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (and (= in-hub? #f)(not *scene-player*)(= in-intro? #t)(> curse-level 0)(= wait-tutorial #f)(= ohshit #f))
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_ORANGE>Buying non-vanilla items, or refreshing the shop, has a chance to make your dimension Unstable.~%While colored purple, enemies are faster, and harder to kill. Caps at level 9~%Only mission enemies are affected from the dimension's instability"
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 20 0.0 (font-color default) (font-flags middle shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )

;---------------------vvvTHIS IS TO DEBUG THE VARSvvv--------------------
(when *debug-segment*
  (when (= in-game? #t)
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_GREEN>in-game? = true"
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 0 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= in-game? #f)
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_RED>in-game? = false"
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 0 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= avoidc-waitb #f)
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_RED>avoidc-waitb = false"
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 10 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= avoidc-waitb #t)
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_GREEN>avoidc-waitb = true"
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 10 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  
  (when (= teleport-back? #t)
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_GREEN>teleport-back? = true"
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 20 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when  (= teleport-back? #f)
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_RED>teleport-back? = false"
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 20 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )

  (when (= already-teleported? #t)
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_GREEN>already-teleported? = true"
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 30 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= already-teleported? #f)
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_RED>already-teleported? = false"
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 30 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= wait-tutorial #t)
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_GREEN>wait-tutorial = true~%tutoriali = <COLOR_ORANGE>~D/1600"
      tutoriali
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 50 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= ohshit #t)
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_GREEN>ohshit = true~%ohshiti = <COLOR_ORANGE>~D/3290"
      ohshiti
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 50 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )

  (when (and (= in-hub? #t)(= vin-shop #t))
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_GREEN>vin-shop = true~%vin-talk = <COLOR_ORANGE>~D/4"
      vin-talk
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 50 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (or (= wait-tutorial #f)(= ohshit #f))
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_YELLOW>karma (progressive items) <COLOR_ORANGE>~D/6"
      (the int (-> *game-info* karma))
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 40 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  
  (when (and (= in-hub? #t)(= vin-shop #f))
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_RED>vin-shop = false~%vin-talk = <COLOR_ORANGE>~D/4"
      vin-talk
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 50 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= in-hub? #t)
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_GREEN>total-deaths (story) = <COLOR_ORANGE>~D/4"
      (-> *game-info* total-deaths)
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 70 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )

  (when (= in-hub? #t)
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_RED>task-deaths (game-save1) = <COLOR_ORANGE>~D~%<COLOR_RED>continue-deaths (game-save2) = <COLOR_ORANGE>~D"
      (-> *game-info* task-deaths)
      (-> *game-info* continue-deaths)
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 110 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (and (= in-hub? #f)(= wait-tutorial #f)(= ohshit #f))
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_GREEN>task-deaths (game-save1) = <COLOR_ORANGE>~D~%<COLOR_GREEN>continue-deaths (game-save2) = <COLOR_ORANGE>~D"
      (-> *game-info* task-deaths)
      (-> *game-info* continue-deaths)
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 50 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (and (= in-hub? #t))
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_GREEN>total-trys (Item amount in shop) = <COLOR_ORANGE>~D/16"
      (-> *game-info* total-trys)
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 80 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (and (= in-hub? #f)(= wait-tutorial #f)(= ohshit #f))
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_PINK>curse = <COLOR_RED>~f/1.0~%<COLOR_GREEN>luck = <COLOR_ORANGE>~f/1.0"
      curse
      luck
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 90 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (and (= in-hub? #t) (= wait-tutorial #f)(= ohshit #f))
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_GREEN>auto-save-count (game-save3) = <COLOR_YELLOW>~d"
      (-> *game-info* auto-save-count)
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 90 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (and (= in-hub? #f) (= wait-tutorial #f)(= ohshit #f))
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "<COLOR_GREEN>auto-save-count (game-save3) = <COLOR_YELLOW>~d"
      (-> *game-info* auto-save-count)
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 70 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (and (= in-hub? #f)(= wait-tutorial #f)(= in-intro? #t)(= ohshit #f))
    (clear matt-str)
      (clear *pc-encoded-matt-str*)
      (format matt-str "~%~%~%<COLOR_RED>Intro?i = <COLOR_ORANGE>~D/4000"
      intro?i
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 80 0.0 (font-color default) (font-flags right shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )



)
;---------------------^^^THIS IS TO DEBUG THE VARS^^^--------------------




;<<<<<<<<<<<<<<<<<<<<<<<<<<<<self area is meant for fixes with specific missions<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
;(send-event proc 'target-turret-get-off 90)

;Immediate mission completion without going back to mission giver.

(when 
(and 
(task-node-closed? (game-task-node sewer-enemy-blow-up-turrets))
(not (task-node-closed? (game-task-node sewer-enemy-resolution)))
)
  (task-node-close! (game-task-node sewer-enemy-resolution))
)

(when 
(and 
(task-node-closed? (game-task-node city-krew-collection-collection))
(not (task-node-closed? (game-task-node city-krew-collection-resolution)))
)
  (task-node-close! (game-task-node city-krew-collection-resolution))
)

#| clear template
(when (= log-sec 0)
    (set! di-s "")
    (set! di-s2 "")
    (set! di-s3 "")
    (set! di-s4 "")
  )
  |#

(when 
(and (= final-waitb #f)(and (= (-> *game-info* total-deaths) 4) (= (-> *game-info* karma) 4.0)) (!= (-> (level-get-target-inside *level*) name) 'hiphog) *target* (= in-game? #t)(= (pause-allowed?) #t))
  (set! final-waitb #t)
  (set! final-waiti 0)
)

(when 
(and 
(= final-waitb #t)
(not *scene-player*)
(= (paused?) #f)
(= (pause-allowed?) #t)
(= in-hub? #f)
)
  (+! final-waiti 1)
  (when (= final-waiti 180)
    (set! log-id 3)
    (set! di-s "Alright, Jak. This is it.")
    (set! di-s2 "Now that we've collected all three Eco Shards, we need to progress onward.")
    (set! di-s3 "Onto Act 4.")
    (set! di-s4 "But I have something INCREDIBLY IMPORTANT to tell you.")
    (set! log-sec 0)
    (set! in-dialogue? #t)
    (set! nest-mission #t)
    (set! camera-locked #t)
  )
)

(when
(and
(cpad-pressed? 0 x)
(= log-id 3)
(= in-dialogue? #t)
)
  (+! log-sec 1)
  (when (= log-sec 1)
    (set! di-s "It seems like the Entity has hard-coded")
    (set! di-s2 "MetalKor to not take ANY damage from normal weapons.")
    (set! di-s3 "This could, uhh.. pose a tremendous threat.")
    (set! di-s4 "")
  )
  (when (= log-sec 2)
    (set! di-s "Those eco's you got? They may be our only shot.")
    (set! di-s2 "All of this raw data has lead me to find the fabled")
    (set! di-s3 "Jak 2 Light Eco.")
    (set! di-s4 "")
  )
  (when (= log-sec 3)
    (set! di-s "I can put them anywhere you like, so I'll put them everywhere!")
    (set! di-s2 "From this moment on, Light Eco can be gathered from crates, and enemies.")
    (set! di-s3 "")
    (set! di-s4 "")
  )
  (when (= log-sec 4)
    (set! di-s "Everything is about to get MUCH easier.")
    (set! di-s2 "Now let's get to Act 4!")
    (set! di-s3 "Good luck, boys!")
    (set! di-s4 "")
  )
  (when (= log-sec 5)
    (set! in-dialogue? #f)
    (set! camera-unlocked #t)
    (set! log-sec 0)
    (set! log-id 5)
    (set! final-waiti 0)
    (set! final-waitb #f)
    (set! (-> *game-info* karma) 5.0)
    (set! autosave-delayed #t)
  )
)

(when 
(and 
(cpad-pressed? 0 x)
(= log-id 1)
(= in-dialogue? #t)
)
  (+! log-sec 1)
  (set! intro?i 0)
  (when (= log-sec 1)
    (set! di-s "Jak, it's me! Vin! Boy, was that close.")
    (set! di-s2 "Looks like I was able to successfully swap us dimensions.")
    (set! di-s3 "")
    (set! di-s4 "")
  )
  (when (= log-sec 2)
    (set! di-s "You've got to get this all back to normal!")
    (set! di-s2 "")
    (set! di-s3 "")
    (set! di-s4 "")
  )
  (when (= log-sec 3)
    (set! di-s "The Time Loop is shattered! Gone! Yo- you know..")
    (set! di-s2 "The prophecy where you defeat MetalKor and stop the")
    (set! di-s3 "metalheads from destroying what's left of us..")
    (set! di-s4 "")
  )
  (when (= log-sec 4)
    (set! di-s "It never happens! It's like he took out every dimension at the same time!")
    (set! di-s2 "")
    (set! di-s3 "")
    (set! di-s4 "")
  )
  (when (= log-sec 5)
    (set! di-s "Listen, this is really important..")
    (set! di-s2 "Someone ELSE is in these files. I-I'm not sure who it is,")
    (set! di-s3 "but I do know he's coming after you the second he gets")
    (set! di-s4 "the chance!")
  )
  (when (= log-sec 6)
    (set! di-s "You--b-but you're safe! Safe right here in this room,")
    (set! di-s2 "where he can't hear us.")
    (set! di-s3 "")
    (set! di-s4 "")
  )
  (when (= log-sec 7)
    (set! di-s "The only way to set everything back to normal, is to go")
    (set! di-s2 "through all the time dialated areas and fix them all.")
    (set! di-s3 "Usually you just have to complete the mission itself.")
    (set! di-s4 "")
  )
  (when (= log-sec 8)
    (set! di-s "But that's not all!")
    (set! di-s2 "After each fix, I'll use the machine I have in here")
    (set! di-s3 "to transport you closer to the original dimension.")
    (set! di-s4 "y-You know.. the one I just pulled you from..")
  )
  (when (= log-sec 9)
    (set! di-s "We need to fix THAT dimension, and all the others should collapse!")
    (set! di-s2 "But I can't see where I'm going when dimension hopping,")
    (set! di-s3 "so I'm completely blind as to where you go.")
    (set! di-s4 "")
  )
  (when (= log-sec 10)
    (set! di-s "That's why I'll need you to find three unstable items")
    (set! di-s2 "These items still have code that's raw, and unfinished.")
    (set! di-s3 "They should help me locate where the dimensions are encrypted.")
    (set! di-s4 "")
  )
  (when (= log-sec 11)
    (set! di-s "I know this may be a lot of information at once,")
    (set! di-s2 "but just trust me, and hopefully we get everything back to normal.")
    (set! di-s3 "")
    (set! di-s4 "")
  )
  (when (= log-sec 12)
    (set! di-s "B-but let me show you what I mean...")
    (set! di-s2 "")
    (set! di-s3 "")
    (set! di-s4 "")
  )
  (when (= log-sec 13)
    (set! di-s "Testing machine!")
    (set! di-s2 "")
    (set! di-s3 "")
    (set! di-s4 "")
  )
  (when (= log-sec 14)
    (set! log-sec 0)
    (set! in-dialogue? #f)
    (set! camera-unlocked #t)
    (set! intro-wait #t)
    (set! in-intro? #t)
    (set! intro-sec 1)
    (set! item-display? #t)
    (set! display-death-screen #t)
  )
)

(when (and (= see-ending #f)(= (-> *game-info* karma) 5.0)(not *scene-player*)(= (-> *game-info* total-deaths) 4)(task-node-closed? (game-task-node nest-boss-resolution)) *target* (= in-game? #t)(= (pause-allowed?) #t))
  (set! log-id 4)
  (set! di-s "you- That was amazing!")
  (set! di-s2 "The time loop is fixed! Our destinies are back on track!")
  (set! di-s3 "")
  (set! di-s4 "")
  (set! log-sec 0)
  (set! in-dialogue? #t)
  (set! nest-mission #t)
  (set! camera-locked #t)
  (set! see-ending #t)
)

(when 
(and 
(cpad-pressed? 0 x)
(= log-id 4)
(= in-dialogue? #t)
)
  (+! log-sec 1)
  (when (= log-sec 1)
    (set! di-s "Now, onto business.")
    (set! di-s2 "")
    (set! di-s3 "")
    (set! di-s4 "")
  )
  (when (= log-sec 2)
    (set! di-s "Our worlds became unstable because of this very dimension.")
    (set! di-s2 "One cannot exist without the other..")
    (set! di-s3 "")
    (set! di-s4 "")
  )
  (when (= log-sec 3)
    (set! di-s "But considering the permanent damage this guy has done to everything")
    (set! di-s2 "I have no choice but to quarantine this dimension from the others.")
    (set! di-s3 "")
    (set! di-s4 "")
  )
  (when (= log-sec 4)
    (set! di-s "Absolutely no one will be able to go in or out of this world")
    (set! di-s2 "")
    (set! di-s3 "")
    (set! di-s4 "")
  )
  (when (= log-sec 5)
    (set! di-s "Being able to edit code in real time is a very dangerous thing")
    (set! di-s2 "That's why I'm going to get more proficient")
    (set! di-s3 "and eventually delete the thing that")
    (set! di-s4 "caused all of this mayhem.")
  )
  (when (= log-sec 6)
    (set! di-s "He's like a virus, since the game first came out in 2003 he's been")
    (set! di-s2 "putting in weird bugs, like that Jetboard glitch.")
    (set! di-s3 "...or the weird deload glitch in Jak 1.")
    (set! di-s4 "I'm seeing it all so clearly now.")
  )
  (when (= log-sec 7)
    (set! di-s "He was given tremendous amounts of dark eco.")
    (set! di-s2 "and I'm talking like an almost infinite amount.")
    (set! di-s3 "I'm surprised the game could handle as such..")
    (set! di-s4 "")
  )
  (when (= log-sec 8)
    (set! di-s "But I digress, this world must be left to die.")
    (set! di-s2 "and you must.. unfortunately... remain here.")
    (set! di-s3 "")
    (set! di-s4 "")
  )
  (when (= log-sec 9)
    (set! di-s "This way, the time loop is complete, all of")
    (set! di-s2 "the realities will be stable again, and I will")
    (set! di-s3 "have to return back to my original timeline.")
    (set! di-s4 "")
  )
  (when (= log-sec 10)
    (set! di-s "...")
    (set! di-s2 "")
    (set! di-s3 "")
    (set! di-s4 "")
  )
  (when (= log-sec 11)
    (set! di-s "You saved the world, and more.")
    (set! di-s2 "")
    (set! di-s3 "")
    (set! di-s4 "")
  )
  (when (= log-sec 12)
    (set! di-s "Surely you know you weren't the first Jak")
    (set! di-s2 "that I've pulled out.")
    (set! di-s3 "")
    (set! di-s4 "")
  )
  (when (= log-sec 13)
    (set! di-s "There were... so, so many iterations..")
    (set! di-s2 "So many realities where it, uhh..")
    (set! di-s3 "didn't work out with you.")
    (set! di-s4 "")
  )
  (when (= log-sec 14)
    (set! di-s "You are, without a doubt, the strongest")
    (set! di-s2 "version of Jak I've come across.")
    (set! di-s3 "Not a single reality compares.")
    (set! di-s4 "")
  )
  (when (= log-sec 15)
    (set! di-s "But uhh.. you also have to remain here with.. It.")
    (set! di-s2 "It can do what it likes here, it's not like it")
    (set! di-s3 "can get out...")
    (set! di-s4 "")
  )
  (when (= log-sec 16)
    (set! di-s "Goodbye, Jak.")
    (set! di-s2 "")
    (set! di-s3 "")
    (set! di-s4 "")
  )
  (when (= log-sec 17)
    (set! log-sec 0)
    (set! in-dialogue? #f)
    (set! camera-unlocked #t)
    (set! item-display? #t)
    (set! ending-loop #t)
  )

)

(when (and 
(task-node-closed? (game-task-node forest-scouts-introduction))
(not (task-node-closed? (game-task-node forest-scouts-resolution)))
(= scoutmission? #f))
(set! scoutmission? #t)
)

(when (and 
(task-node-closed? (game-task-node forest-scouts-resolution))
(= scoutmission? #t))
(set! scoutmission? #f)
)

(when (and 
(task-node-closed? (game-task-node under-sig-resolution))
(= under-sig-mission? #t))
(set! under-sig-mission? #f)
)

(when (and 
(task-node-closed? (game-task-node tomb-boss-resolution))
(= tomb-boss-mission? #t))
(set! tomb-boss-mission? #f)
)

(when (and 
(task-node-closed? (game-task-node castle-boss-resolution))
(= krew-boss-mission? #t))
(set! krew-boss-mission? #f)
)

(when (= ending-loop #t)
  (+! ending-i 1)

  (when (>= ending-i 600)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>R3:<COLOR_WHITE>+<COLOR_RED>L3<COLOR_WHITE>: Travel back in time to before~%you completed the time loop"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 260 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (and (>= ending-i 600) (cpad-hold? 0 l3)(cpad-hold? 0 r3))
    (set! (-> *target* fact health) 0.0)
    (set! (-> *game-info* karma) 6.0)
    (set! autosave-delayed #t)
    (set! ending-loop #f)
    (set! ending-i 0)
  )
)

(when (= intro-wait #t)
  (+! intro-waiti 1)
  (when (= intro-waiti 1)
    (reset! *load-state*)
  )
  (when (= intro-waiti 60)
    (set! tin-game-wait #t)
    (set! intro-wait #f)
    (set! intro-waiti 0)
  )
)

(when (= di-wait #t)
  (+! di-w 1)
  (when (= di-w 30)
    (set! camera-locked #t)
    (set! in-dialogue? #t)
    (set! di-w 0)
    (set! di-wait #f)
  )
)

(when (and (cpad-pressed? 0 x)(= intro-sec 1)(= in-dialogue? #t)(= in-intro? #t)) ;teleports you to city-help-kid 1st time
  (set! intro-sec 2)
  (set! camera-unlocked #t)
  (set! in-dialogue? #f)
  (set! tin-game-wait #t)
  (send-event (ppointer->process *time-of-day*) 'change 'hour 20)
  (set! intro?i 0)
)
(when (and (cpad-pressed? 0 x)(= intro-sec 2)(= in-dialogue? #t)(= in-intro? #t)) ;teleports you to shop 1st time
  (set! intro-sec 3)
  (set! (-> *game-info* skill) 85.0)
  (set! camera-unlocked #t)
  (set! in-dialogue? #f)
  (set! tin-game-wait #t)
  (send-event (ppointer->process *time-of-day*) 'change 'hour 6)
  (set! intro?i 0)
)

(when (and (= shop-tutorial #t) (!= (-> (level-get-target-inside *level*) name) 'hiphog)) ;teleports you to city-help-kid for 3rd and final time
  (send-event (ppointer->process *time-of-day*) 'change 'hour 14)
  (play-task (game-task city-help-kid) 'debug #f)
  (send-event *target* 'continue (get-continue-by-name *game-info* "ctyslumb-fort"))
  (set! intro-sec 4)
  (set! tin-game-wait #t)
  (set! shop-tutorial #f)
  (set! in-dialogue? #f)
  (set! camera-unlocked #t)
  (set! wait-pulloutgun #t)
  (set! intro?i 0)
)

(when (and (= wait-vintalk #t)(= in-menu #t))
   (+! wait-vini 1)
   (when (= wait-vini 6)
    (set! vin-talk 1)
    (set! wait-vini 0)
    (set! wait-vintalk #f)
    )
)



(when (and (cpad-pressed? 0 x)(= intro-sec 4)(= in-dialogue? #t)(= in-intro? #t)) ;teleports you to end (consite)
  (set! intro-sec 5)
  (set! (-> *game-info* karma) 1.0)
  (set! autosave-delayed #t)
  (set! in-intro? #f)
  (send-event *target* 'continue (get-continue-by-name *game-info* "consite-airlock"))
  (set! (-> *game-info* total-deaths) 1)
  (play-task (game-task fortress-escape) 'debug #f)
  (set! in-dialogue? #f)
  (set! camera-unlocked #t)
)

(when (= tin-game-wait #t)
  (+! tin-wait 1)
  (when (= tin-wait 1)
    (set! log-id 2)
    (when (= intro-sec 1)
    (dm-play-task-with-continue (game-task city-help-kid) "ctyslumb-fort")
    (set! intro?i 0)
    )
    (when (= intro-sec 2)
    (dm-play-task-with-continue (game-task city-help-kid) "ctyslumb-fort")
    (set! intro?i 0)
    )
    (when (= intro-sec 3)
      (dm-play-task-with-continue (game-task strip-drop) "ctyport-hiphog")
      (task-node-close! (game-task-node nest-boss-resolution))
      (set! (-> *game-info* skill) 85.0)
      (set! shopitem1 "Four-Leaf Clover (40 orbs)")
      (set! shopid1 10)
      (set! shopitem2 "Double Shot (25 orbs)")
      (set! shopid2 9)
      (set! shopitem3 "Upgrade Damage x2 (20 orbs)")
      (set! shopid3 6)
      (set! intro?i 0)
    )
    (when (= intro-sec 5)
      (dm-play-task-with-continue (game-task city-help-kid) "consite-airlock")
    (set! wait-vintalk #t)
    (set! intro?i 0)
    )
  )
  (when (= tin-wait 121)
    (when (not (task-node-closed? (game-task-node nest-boss-resolution)))
      (set! tin-game? #t)
    )
    (set! tin-wait 0)
    (set! tin-game-wait #f)
  )
)

(when 
(and 
(= (-> *game-info* karma) 0)
(= wait-tutorial #f)
(not *scene-player*)
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
)
  (when (= intro?i 0)
    (set! skip-intro #f)
  )
  (+! intro?i 1)
  (when (= intro?i 4000)
    (set! skip-intro #t)
  )
)

(when 
(and 
(!= (-> *game-info* karma) 0)
(= skip-intro #t)
)
  (set! skip-intro #f)
)

(when (= skip-intro #t)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>R3<COLOR_WHITE>+<COLOR_RED>L3<COLOR_WHITE>:<COLOR_PINK> Skip Intro~%<COLOR_RED>Do not use on vehicle"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 260 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and 
(= skip-intro #t) 
(= (-> *game-info* karma) 0)
(cpad-hold? 0 r3)
(cpad-hold? 0 l3)
(= popup-shop #f)
(= in-menu2 #f)
)
  (set! intro-sec 5)
  (set! (-> *game-info* karma) 1.0)
  (set! autosave-delayed #t)
  (set! in-intro? #f)
  (send-event *target* 'continue (get-continue-by-name *game-info* "consite-airlock"))
  (set! (-> *game-info* total-deaths) 1)
  (play-task (game-task fortress-escape) 'debug #f)
  (set! in-dialogue? #f)
  (set! camera-unlocked #t)
  (set! skip-intro #f)
  (set! intro? #f)
  (set! intro?i 0)
)






(when                         ;stat menu cheat option
(and 
(= run-in-progress #t)
(= (-> *game-info* karma) 6.0)
(cpad-hold? 0 l2)
(cpad-pressed? 0 r3)
(= popup-shop #f)
(= in-menu2 #f)
)
  (set! in-cheat #t)
  (set! camera-locked #t)
  (set! pause-menu-blocked? #t)
  (set! cm-select 0)
  (set! cm-option 1)
  (set! cm-option2 1)
  (set! cm-string "Scattergun")
  (set! cm-option-s "Act 1 Stage 1")
)

(when (and (not (logtest? (-> *game-info* secrets) (game-secrets invulnerable))) (= inv? #t))
 (logior! (-> *game-info* secrets) (game-secrets invulnerable))
)

(when (and (logtest? (-> *game-info* secrets) (game-secrets invulnerable)) (= inv? #f))
 (logclear! (-> *game-info* secrets) (game-secrets invulnerable))
)

(when (and (= pleasewait #f)(= randomizer #t) (= in-game? #f))
  (set! pleasewait #t)
)
(when (and (= pleasewait #t)(= randomizer #t) (= in-game? #t))
  (set! pleasewait #f)
)

(when (and (= in-cheat #t)(= cm-select 0)(cpad-pressed? 0 left))
(-! cm-option 1)
(when (<= cm-option 0)
  (set! cm-option 20)
)
(set! cm-refresh #t)
)

(when (and (= in-cheat #t)(= cm-select 0)(cpad-pressed? 0 right))
  (+! cm-option 1)
  (when (>= cm-option 21)
    (set! cm-option 1)
  )
  (set! cm-refresh #t)
)

(when (and (= in-cheat #t)(= cm-select 1)(cpad-pressed? 0 left))
(-! cm-option2 1)
(when (<= cm-option2 0)
  (set! cm-option2 1)
)
(set! cm-refresh #t)
)

(when (and (= in-cheat #t)(= cm-select 1)(cpad-pressed? 0 right))
  (+! cm-option2 1)
  (when (> cm-option2 (- (-> *game-info* total-trys) 1))
    (set! cm-option2 (- (-> *game-info* total-trys) 1))
  )
  (set! cm-refresh #t)
)

(when (and (= in-cheat #t)(= cm-select 3)(cpad-pressed? 0 left))
(when (!= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 1);luck decrease 1
      (-! (-> *game-info* continue-deaths) 10000000)
    )
)

(when (and (= in-cheat #t)(= cm-select 3)(cpad-pressed? 0 right))
(when (!= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 9);luck increase 1
      (+! (-> *game-info* continue-deaths) 10000000)
    )
)

(when (and (= in-cheat #t)(= cm-select 4)(cpad-pressed? 0 left))
(when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 0);curse decrease 1
      (-! (-> *game-info* continue-deaths) 100000000)
    )
)

(when (and (= in-cheat #t)(= cm-select 4)(cpad-pressed? 0 right))
(when (!= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9);curse increase 1
      (+! (-> *game-info* continue-deaths) 100000000)
    )
)

(when (and (= in-cheat #t)(= cm-select 5)(cpad-pressed? 0 x))
 (set! (-> *target* fact health) 8.0)
)

(when (and (= in-cheat #t)(= cm-select 6)(cpad-pressed? 0 x))
 (+! (-> *game-info* skill) 10.0)
)

(when (and (= in-cheat #t)(not (logtest? (-> *game-info* features) (game-feature board)))(= cm-select 7)(cpad-pressed? 0 x))
  (logior! (-> *game-info* features) (game-feature board))
)

(when (and (= in-cheat #t)(not (logtest? (-> *game-info* secrets) (game-secrets invulnerable)))(= cm-select 8)(cpad-pressed? 0 right))
  (set! inv? #t)
)

(when (and (= in-cheat #t)(logtest? (-> *game-info* secrets) (game-secrets invulnerable))(= cm-select 8)(cpad-pressed? 0 left))
  (set! inv? #f)
)

(when (and (= in-cheat #t)(cpad-pressed? 0 up))
(-! cm-select 1)
(when (< cm-select 0)
  (set! cm-select 0)
)
)

(when (and (= in-cheat #t)(cpad-pressed? 0 down))
  (+! cm-select 1)
  (when (>= cm-select 9)
    (set! cm-select 8)
  )
)

(when (= cm-refresh #t)
(when (= cm-option2 1)
    (set! cm-string "Scattergun")
  )
(when (= cm-option2 2)
    (set! cm-string "Blue Gun")
  )
  (when (= cm-option2 3)
    (set! cm-string "Peacemaker")
  )
  (when (= cm-option2 4)
    (set! cm-string "Scattergun ROF")
  )
  (when (= cm-option2 5)
    (set! cm-string "Upgraded Ammo")
  )
  (when (= cm-option2 6)
    (set! cm-string "Upgraded Damage")
  )
  (when (= cm-option2 7)
    (set! cm-string "Upgraded Vehicles and Speed")
  )
  (when (= cm-option2 8)
    (set! cm-string "Double Shot")
  )
  (when (= cm-option2 9)
    (set! cm-string "Four-Leaf Clover")
  )
  (when (= cm-option2 10)
    (set! cm-string "+2HP Every Level")
  )
  (when (= cm-option2 11)
    (set! cm-string "Mar's Punch")
  )
  (when (= cm-option2 12)
    (set! cm-string "Pocket Rift Gate")
  )
  (when (= cm-option2 13)
    (set! cm-string "Training Weight")
  )
  (when (= cm-option2 14)
    (set! cm-string "Rapid Fire")
  )
  (when (= cm-option2 15)
    (set! cm-string "Gol's Unbeknowngst")
  )
  (when (= cm-option2 16)
    (set! cm-string "Explosive Shot")
  )

  (when (= cm-option 1)
    (set! cm-option-s "Act 1 Stage 1")
  )
  (when (= cm-option 2)
    (set! cm-option-s "Act 1 Stage 2")
  )
  (when (= cm-option 3)
    (set! cm-option-s "Act 1 Stage 3")
  )
  (when (= cm-option 4)
    (set! cm-option-s "Act 1 Stage 4")
  )
  (when (= cm-option 5)
    (set! cm-option-s "Act 1 Stage 5")
  )
  (when (= cm-option 6)
    (set! cm-option-s "Act 2 Stage 1")
  )
  (when (= cm-option 7)
    (set! cm-option-s "Act 2 Stage 2")
  )
  (when (= cm-option 8)
    (set! cm-option-s "Act 2 Stage 3")
  )
  (when (= cm-option 9)
    (set! cm-option-s "Act 2 Stage 4")
  )
  (when (= cm-option 10)
    (set! cm-option-s "Act 2 Stage 5")
  )
  (when (= cm-option 11)
    (set! cm-option-s "Act 3 Stage 1")
  )
  (when (= cm-option 12)
    (set! cm-option-s "Act 3 Stage 2")
  )
  (when (= cm-option 13)
    (set! cm-option-s "Act 3 Stage 3")
  )
  (when (= cm-option 14)
    (set! cm-option-s "Act 3 Stage 4")
  )
  (when (= cm-option 15)
    (set! cm-option-s "Act 3 Stage 5")
  )
  (when (= cm-option 16)
    (set! cm-option-s "Act 4 Stage 1")
  )
  (when (= cm-option 17)
    (set! cm-option-s "Act 4 Stage 2")
  )
  (when (= cm-option 18)
    (set! cm-option-s "Act 4 Stage 3")
  )
  (when (= cm-option 19)
    (set! cm-option-s "Act 4 Stage 4")
  )
  (when (= cm-option 20)
    (set! cm-option-s "Act 4 Stage 5")
  )
(set! cm-refresh #f)
)

(when (and (= in-cheat #t)(= pleasewait #f)(cpad-pressed? 0 x))
  (set! wait-kill #f)
  (when (and (= cm-select 0)(= cm-yn #f))
  (set! camera-unlocked #t)
  (set! pause-menu-blocked? #f)
  (set! in-cheat #f)
  (set! randomizer #t)
  (set! pleasewait #t)
    (when (= cm-option 1)
      (set! in-game? #t)
      (set! (-> *game-info* buzzer-total) 0.0)
      (task-node-close! (game-task-node city-burning-bush-collection-1-resolution))
      (set! print-stage 1)
      (set! act-act 1)
    )
    (when (= cm-option 2)
      (set! in-game? #t)
      (set! (-> *game-info* buzzer-total) 1.0)
      (task-node-close! (game-task-node city-burning-bush-collection-1-resolution))
      (set! print-stage 2)
      (set! act-act 1)
    )
    (when (= cm-option 3)
      (set! in-game? #t)
      (set! (-> *game-info* buzzer-total) 2.0)
      (task-node-close! (game-task-node city-burning-bush-collection-1-resolution))
      (set! print-stage 3)
      (set! act-act 1)
    )
    (when (= cm-option 4)
      (set! in-game? #t)
      (set! (-> *game-info* buzzer-total) 3.0)
      (task-node-close! (game-task-node city-burning-bush-collection-1-resolution))
      (set! print-stage 4)
      (set! act-act 1)
    )
    (when (= cm-option 5)
      (set! in-game? #t)
      (set! (-> *game-info* buzzer-total) 4.0)
      (task-node-close! (game-task-node city-burning-bush-collection-1-resolution))
      (set! print-stage 5)
      (set! act-act 1)
    )
    (when (= cm-option 6)
      (set! in-game? #t)
      (set! (-> *game-info* buzzer-total) 5.0)
      (task-node-close! (game-task-node city-burning-bush-collection-1-resolution))
      (set! print-stage 1)
      (set! act-act 2)
    )
    (when (= cm-option 7)
      (set! in-game? #t)
      (set! (-> *game-info* buzzer-total) 6.0)
      (task-node-close! (game-task-node city-burning-bush-collection-1-resolution))
      (set! print-stage 2)
      (set! act-act 2)
    )
    (when (= cm-option 8)
      (set! in-game? #t)
      (set! (-> *game-info* buzzer-total) 7.0)
      (task-node-close! (game-task-node city-burning-bush-collection-1-resolution))
      (set! print-stage 3)
      (set! act-act 2)
    )
    (when (= cm-option 9)
      (set! in-game? #t)
      (set! (-> *game-info* buzzer-total) 8.0)
      (task-node-close! (game-task-node city-burning-bush-collection-1-resolution))
      (set! print-stage 4)
      (set! act-act 2)
    )
    (when (= cm-option 10)
      (set! in-game? #t)
      (set! (-> *game-info* buzzer-total) 9.0)
      (task-node-close! (game-task-node city-burning-bush-collection-1-resolution))
      (set! print-stage 5)
      (set! act-act 2)
    )
    (when (= cm-option 11)
      (set! in-game? #t)
      (set! (-> *game-info* buzzer-total) 10.0)
      (task-node-close! (game-task-node city-burning-bush-collection-1-resolution))
      (set! print-stage 1)
      (set! act-act 3)
    )
    (when (= cm-option 12)
      (set! in-game? #t)
      (set! (-> *game-info* buzzer-total) 11.0)
      (task-node-close! (game-task-node city-burning-bush-collection-1-resolution))
      (set! print-stage 2)
      (set! act-act 3)
    )
    (when (= cm-option 13)
      (set! in-game? #t)
      (set! (-> *game-info* buzzer-total) 12.0)
      (task-node-close! (game-task-node city-burning-bush-collection-1-resolution))
      (set! print-stage 3)
      (set! act-act 3)
    )
    (when (= cm-option 14)
      (set! in-game? #t)
      (set! (-> *game-info* buzzer-total) 13.0)
      (task-node-close! (game-task-node city-burning-bush-collection-1-resolution))
      (set! print-stage 4)
      (set! act-act 3)
    )
    (when (= cm-option 15)
      (set! in-game? #t)
      (set! (-> *game-info* buzzer-total) 14.0)
      (task-node-close! (game-task-node city-burning-bush-collection-1-resolution))
      (set! print-stage 5)
      (set! act-act 3)
    )
    (when (= cm-option 16)
      (set! in-game? #t)
      (set! (-> *game-info* buzzer-total) 15.0)
      (task-node-close! (game-task-node city-burning-bush-collection-1-resolution))
      (set! print-stage 1)
      (set! act-act 4)
    )
    (when (= cm-option 17)
      (set! in-game? #t)
      (set! (-> *game-info* buzzer-total) 16.0)
      (task-node-close! (game-task-node city-burning-bush-collection-1-resolution))
      (set! print-stage 2)
      (set! act-act 4)
    )
    (when (= cm-option 18)
      (set! in-game? #t)
      (set! (-> *game-info* buzzer-total) 17.0)
      (task-node-close! (game-task-node city-burning-bush-collection-1-resolution))
      (set! print-stage 3)
      (set! act-act 4)
    )
    (when (= cm-option 19)
      (set! in-game? #t)
      (set! (-> *game-info* buzzer-total) 18.0)
      (task-node-close! (game-task-node city-burning-bush-collection-1-resolution))
      (set! print-stage 4)
      (set! act-act 4)
    )
    (when (= cm-option 20)
      (set! in-game? #t)
      (set! (-> *game-info* buzzer-total) 19.0)
      (task-node-close! (game-task-node city-burning-bush-collection-1-resolution))
      (set! print-stage 5)
      (set! act-act 4)
    )
  )

  (when (and (= cm-select 1)(= cm-yn #f))
    (when (and (= cm-option2 1)(= p-red-gun #f))
      (+! (-> *game-info* task-deaths) 1)
    )
    (when (and (= cm-option2 2)(= p-blue-gun #f))
      (+! (-> *game-info* task-deaths) 10)
    )
    (when (and (= cm-option2 3)(= p-dark-gun #f))
      (+! (-> *game-info* task-deaths) 100)
    )
    (when (and (= cm-option2 4)(= p-upgrade-red #f))
      (+! (-> *game-info* task-deaths) 1000)
    )
    (when (and (= cm-option2 5)(= p-upgrade-ammo #f))
      (+! (-> *game-info* task-deaths) 10000)
    )
    (when (and (= cm-option2 6)(= p-upgrade-damage #f))
      (+! (-> *game-info* task-deaths) 100000)
    )
    (when (and (= cm-option2 7)(= p-upgrade-vehicles #f))
      (+! (-> *game-info* task-deaths) 1000000)
    )
    (when (and (= cm-option2 8)(= p-double-shot #f))
      (+! (-> *game-info* task-deaths) 10000000)
    )
    (when (and (= cm-option2 9)(= p-clover #f))
      (+! (-> *game-info* continue-deaths) 1)
    )
    (when (and (= cm-option2 10)(= p-drinkable #f))
      (+! (-> *game-info* continue-deaths) 10)
    )
    (when (and (= cm-option2 11)(= p-big-punch #f))
      (+! (-> *game-info* continue-deaths) 100)
    )
    (when (and (= cm-option2 12)(= p-sage-yellow #f))
      (+! (-> *game-info* continue-deaths) 1000)
    )
    (when (and (= cm-option2 13)(= p-sage-blue #f))
      (+! (-> *game-info* continue-deaths) 10000)
      (activate-weight-start)
    )
    (when (and (= cm-option2 14)(= p-sage-red #f))
      (+! (-> *game-info* continue-deaths) 100000)
    )
    (when (and (= cm-option2 15)(= p-sage-dark #f))
      (+! (-> *game-info* continue-deaths) 1000000)
    )
    (when (and (= cm-option2 16)(= p-explode-shot #f))
      (+! (-> *game-info* task-deaths) 100000000)
    )
  )
)

(when (and (= in-cheat #t)(= cm-select 2)(cpad-pressed? 0 left))
    (set! in-game? #f)
    (set! randomizer #f)
    (set! wait-kill #f)
  )
  (when (and (= in-cheat #t)(= cm-select 2)(cpad-pressed? 0 right))
    (set! in-game? #t)
    (set! randomizer #t)
    (set! wait-kill #f)
  )


(when (and (= in-cheat #t)(cpad-pressed? 0 triangle))
  (set! camera-unlocked #t)
  (set! pause-menu-blocked? #f)
  (set! in-cheat #f)
)

(when (and (= in-cheat #t)(= cm-select 0))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>(Turns on Mission Randomizer)~%<COLOR_GREEN>Select Stage~%(<COLOR_BLUE>X<COLOR_GREEN>):~%<COLOR_ORANGE>~S~%~%<COLOR_WHITE>Weapon Select~%(<COLOR_BLUE>X<COLOR_WHITE>):~%<COLOR_YELLOW>~S~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_GREEN>Triangle<COLOR_WHITE>: Exit"
    cm-option-s
    cm-string
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-cheat #t)(= cm-select 1))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>(Turns on Mission Randomizer)~%<COLOR_WHITE>Select Stage~%(<COLOR_BLUE>X<COLOR_WHITE>):~%<COLOR_ORANGE>~S~%~%<COLOR_GREEN>Weapon Select~%(<COLOR_BLUE>X<COLOR_GREEN>):~%<COLOR_YELLOW>~S~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_GREEN>Triangle<COLOR_WHITE>: Exit"
    cm-option-s
    cm-string
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-cheat #t)(and (!= cm-select 0)(!= cm-select 1)))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>(Turns on Mission Randomizer)~%<COLOR_WHITE>Select Stage~%(<COLOR_BLUE>X<COLOR_WHITE>):~%<COLOR_ORANGE>~S~%~%<COLOR_WHITE>Weapon Select~%(<COLOR_BLUE>X<COLOR_WHITE>):~%<COLOR_YELLOW>~S~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_GREEN>Triangle<COLOR_WHITE>: Exit"
    cm-option-s
    cm-string
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 65 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-cheat #t)(!= cm-select 2)(= randomizer #f))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Mission Randomizer~%(Left/Right):~%<COLOR_RED>False"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 160 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-cheat #t)(!= cm-select 2)(= randomizer #t))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Mission Randomizer~%(Left/Right):~%<COLOR_GREEN>True"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 160 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-cheat #t)(= cm-select 2)(= randomizer #f))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>Mission Randomizer~%(Left/Right):~%<COLOR_RED>False"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 160 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-cheat #t)(= cm-select 2)(= randomizer #t))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>Mission Randomizer~%(Left/Right):~%<COLOR_GREEN>True"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 160 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-cheat #t)(= pleasewait #t))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>Loading Config, Please Wait..."
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 55 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-cheat #t)(= cm-select 3))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>Edit <COLOR_GREEN>Luck <COLOR_GREEN>Value~%(Left/Right):~%<COLOR_ORANGE>~F"
    luck
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 210 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-cheat #t)(!= cm-select 3))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Edit <COLOR_GREEN>Luck <COLOR_WHITE>Value~%(Left/Right):~%<COLOR_ORANGE>~F"
    luck
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 210 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-cheat #t)(= cm-select 4))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>Edit <COLOR_PINK>Instability <COLOR_GREEN>Value~%(Left/Right):~%<COLOR_PINK>~D"
    curse-level
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 240 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-cheat #t)(!= cm-select 4))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Edit <COLOR_PINK>Instability <COLOR_WHITE>Value~%(Left/Right):~%<COLOR_PINK>~D"
    curse-level
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 240 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-cheat #t)(= cm-select 5))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>Heal to Full HP~%(<COLOR_BLUE>X<COLOR_GREEN>)"
    curse-level
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 270 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-cheat #t)(!= cm-select 5))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Heal to Full HP~%(<COLOR_BLUE>X<COLOR_WHITE>)"
    curse-level
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 270 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= in-cheat #t)(= cm-select 6))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>Give 10 orbs~%(<COLOR_BLUE>X<COLOR_GREEN>)"
    curse-level
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 290 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-cheat #t)(!= cm-select 6))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Give 10 orbs~%(<COLOR_BLUE>X<COLOR_WHITE>)"
    curse-level
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 290 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-cheat #t)(= cm-select 7))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>Give JET-BOARD~%(<COLOR_BLUE>X<COLOR_GREEN>)"
    curse-level
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 310 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-cheat #t)(!= cm-select 7))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Give JET-BOARD~%(<COLOR_BLUE>X<COLOR_WHITE>)"
    curse-level
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 310 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-cheat #t)(logtest? (-> *game-info* secrets) (game-secrets invulnerable))(= cm-select 8))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>Invulnerability~%(Left/Right):~%<COLOR_GREEN>True"
    curse-level
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 330 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-cheat #t)(logtest? (-> *game-info* secrets) (game-secrets invulnerable))(!= cm-select 8))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Invulnerability~%(Left/Right):~%<COLOR_GREEN>True"
    curse-level
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 330 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-cheat #t)(not (logtest? (-> *game-info* secrets) (game-secrets invulnerable)))(= cm-select 8))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>Invulnerability~%(Left/Right):~%<COLOR_RED>False"
    curse-level
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 330 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-cheat #t)(not (logtest? (-> *game-info* secrets) (game-secrets invulnerable)))(!= cm-select 8))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Invulnerability~%(Left/Right):~%<COLOR_RED>False"
    curse-level
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 330 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)




#|(when (= (-> *game-info* total-trys) 14)
    (set! (-> *game-info* total-trys) 15)
    (set! menu-value 200.0)
    (set! mod-s "Gol's Unbeknowngst")
    (set! autosave-delayed #t)
  )
(when (= (-> *game-info* total-trys) 13)
    (set! (-> *game-info* total-trys) 14)
    (set! menu-value 150.0)
    (set! mod-s "Rapid Fire")
    (set! autosave-delayed #t)
  )
  (when (= (-> *game-info* total-trys) 12)
    (set! (-> *game-info* total-trys) 13)
    (set! menu-value 125.0)
    (set! mod-s "Training Weight")
    (set! autosave-delayed #t)
  )
  (when (= (-> *game-info* total-trys) 11)
    (set! (-> *game-info* total-trys) 12)
    (set! menu-value 100.0)
    (set! mod-s "Pocket Rift Gate")
    (set! autosave-delayed #t)
  )
  (when (= (-> *game-info* total-trys) 10)
    (set! (-> *game-info* total-trys) 11)
    (set! menu-value 90.0)
    (set! mod-s "Mar's Punch")
    (set! autosave-delayed #t)
  )
  (when (= (-> *game-info* total-trys) 9)
    (set! (-> *game-info* total-trys) 10)
    (set! menu-value 85.0)
    (set! mod-s "+2HP Every Level")
    (set! autosave-delayed #t)
  )
  (when (= (-> *game-info* total-trys) 8)
    (set! (-> *game-info* total-trys) 9)
    (set! menu-value 77.0)
    (set! mod-s "Four-Leaf Clover")
    (set! autosave-delayed #t)
  )
  (when (= (-> *game-info* total-trys) 7)
    (set! (-> *game-info* total-trys) 8)
    (set! menu-value 60.0)
    (set! mod-s "Double Shot")
    (set! autosave-delayed #t)
  )
  (when (= (-> *game-info* total-trys) 6)
    (set! (-> *game-info* total-trys) 7)
    (set! menu-value 45.0)
    (set! mod-s "Upgraded Vehicles and Speed")
    (set! autosave-delayed #t)
  )
  (when (= (-> *game-info* total-trys) 5)
    (set! (-> *game-info* total-trys) 6)
    (set! menu-value 15.0)
    (set! mod-s "Upgrade Damage (x2)")
    (set! autosave-delayed #t)
  )
  (when (= (-> *game-info* total-trys) 4)
    (set! (-> *game-info* total-trys) 5)
    (set! menu-value 10.0)
    (set! mod-s "Upgrade Ammo (x2)")
    (set! autosave-delayed #t)
  )|#
    
#|

    (set! traffic-metalheads? #t) ;turns on traffic lwideb'
    ;^ WHEN THIS IS TRUE ^  v THEN ALL OF THESE PARAMETERS CAN BE SET v
    (send-event *traffic-manager* 'set-target-level 5.0) ;sets guards and metalheads to fight

    (send-event *traffic-manager* 'set-target-level 100.0) ;sets metalheads to overrun everything

    (send-event *traffic-manager* 'set-target-level 10.0) ;sets guards only


|#

    ;(set! (-> (level-get-target-inside *level*) mood-func)update-mood-nest)


      (if *show-input-display* 
        (input-display-on)
        (input-display-off)
        )
      
      (none)
      )

    (defun runs-on-gem-pickup ()
      ;; Code here runs on any scout fly pickup

      (none)
      )

    (defun runs-on-task-close ()
    
      (set! level-completed? #t)
      (none)
      )

    (defun runs-on-eco-pickup ((eco-type pickup-type) (parent process-tree))
      (let* ((from-vent? #f))
        ;; Code here runs as soon as you pickup ANY eco

        (case eco-type
          (((pickup-type eco-yellow))      
            ;; Code here runs as soon as you pickup yellow eco

            )
          (((pickup-type eco-red))      
            ;; Code here runs as soon as you pickup red eco

            )
          (((pickup-type eco-blue))      
            ;; Code here runs as soon as you pickup blue eco

            )

          (((pickup-type eco-green))      
            ;; Code here runs as soon as you pickup big green eco 

            )
          )
        
        (when from-vent?
          ;; Code here runs only if the eco was picked up from a vent

          )
        )

      (none)
      )

    (defun runs-on-jak-spawn ()
      ;; Code here runs every time jak spawns (loading a file new game or death)   

      (none)
      )

    (defun runs-on-jak-death ((death-event symbol))
      (case death-event
        (('dying)
          ;; Code here runs immediately every time jak dies, before any death animation or death cutscene
          (set! waitdie #t)
          )
        (('blackout)
          ;; Code here runs after jak dies (and any death cutscene finishes), during the blackout before he spawns

          )
        )
      
      (none)
      )


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; deprecated function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| these are no longer recommended/supported however we include them anyways to not break anyones mods.
    |#
