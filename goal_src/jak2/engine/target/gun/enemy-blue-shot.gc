;;-*-Lisp-*-
(in-package goal)

;; name: c-gun-blue-shot.gc
;; name in dgo: c-gun-blue-shot
;; dgos: ENGINE, GAME

;; DECOMP BEGINS





(deftype c-gun-blue-shot (projectile)
  ((init-pos        vector  :inline)
   (init-dir        vector  :inline)
   (collide-normal  vector  :inline)
   )
  )




(defun someone-fire-c-blue ((arg0 process-drawable) (arg1 vector) (arg2 vector))
    (let ((gp-0 (-> *target* gun))
        (s4-0 (-> *target* gun fire-dir-out))
        (s5-0 (new 'stack-no-clear 'vector))
        )
        #|(let ((s3-0 (new 'stack-no-clear 'quaternion)))
      (quaternion-vector-angle! s3-0 s4-0 (* 182.04445 (rand-vu-float-range 0.0 360.0)))
      (vector-rotate-y! s5-0 s4-0 (* 182.04445 (rand-vu-float-range 0.0 1.1)))
      (vector-orient-by-quat! s5-0 s5-0 s3-0)
      )|#
    (let ((s4-1 (new 'stack-no-clear 'projectile-init-by-other-params)))
      (set! (-> s4-1 ent) (-> arg0 entity))
      (set! (-> s4-1 charge) 1.0)
      (set! (-> s4-1 options) (projectile-options account-for-target-velocity deal-damage proj-options-8000))
      (set! (-> s4-1 pos quad) (-> arg1 quad))
      (set! (-> s4-1 vel quad) (-> arg2 quad))
      (set! (-> s4-1 notify-handle) (the-as handle #f))
      (set! (-> s4-1 owner-handle) (the-as handle #f))
      (set! (-> s4-1 ignore-handle) (process->handle arg0))
      (let* ((v1-13 *game-info*)
             (a0-15 (+ (-> v1-13 attack-id) 1))
             )
        (set! (-> v1-13 attack-id) a0-15)
        (set! (-> s4-1 attack-id) a0-15)
        )
      (set! (-> s4-1 timeout) (seconds 4))
        (spawn-projectile c-gun-blue-shot s4-1 arg0 *default-dead-pool*)
      )
    )
    )

(defmethod spawn-shell-particles ((this c-gun-blue-shot))
  "TODO - confirm"
  (rlet ((vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         )
    (init-vf0-vector)
    (let ((s3-1 (vector-! (new 'stack-no-clear 'vector) (-> this root trans) (-> this init-pos))))
      (draw-beam (-> *part-id-table* 191) (-> this init-pos) s3-1 #t #t)
      (draw-beam (-> *part-id-table* 194) (-> this init-pos) (-> this starting-dir) #f #t)
      (let ((s5-0 (-> *part-id-table* 206))
            (s4-0 (-> *part-id-table* 205))
            )
        (new 'stack-no-clear 'vector)
        (let ((s2-0 (vector-reflect! (new 'stack-no-clear 'vector) s3-1 (-> this collide-normal))))
          (when (= p-explode-shot #t)
      (someone-fire-guard-grenade *target* s2-0 s2-0)
      )
          (vector-normalize! s2-0 1.0)
          (get-field-spec-by-id s5-0 (sp-field-id spt-conerot-x))
          (get-field-spec-by-id s5-0 (sp-field-id spt-conerot-y))
          (get-field-spec-by-id s5-0 (sp-field-id spt-conerot-z))
          (let ((a1-7 (new 'stack-no-clear 'matrix))
                (s1-0 (new 'stack-no-clear 'vector))
                (s3-2 (new 'stack-no-clear 'vector))
                )
            (vector-cross! (the-as vector (-> a1-7 vector)) *y-vector* s2-0)
            (vector-cross! (-> a1-7 vector 1) s2-0 (the-as vector (-> a1-7 vector)))
            (set! (-> a1-7 vector 2 quad) (-> s2-0 quad))
            (matrix->eul (the-as euler-angles s1-0) a1-7 21)
            (vector-negate! s3-2 s1-0)
            (let ((a0-14 s3-2))
              (let ((v1-16 s3-2))
                (let ((a1-10 -3640.889))
                  (.mov vf6 a1-10)
                  )
                (.lvf vf4 (&-> v1-16 quad))
                )
              (.add.x.vf vf5 vf0 vf0 :mask #b1000)
              (.add.x.vf vf5 vf4 vf6 :mask #b111)
              (.svf (&-> a0-14 quad) vf5)
              )
            (sparticle-set-conerot s5-0 s3-2)
            (sparticle-set-conerot s4-0 s3-2)
            )
          )
        )
      )
    (let ((s5-1 (get-process *default-dead-pool* part-tracker #x4000)))
      (when s5-1
        (let ((t9-12 (method-of-type part-tracker activate)))
          (t9-12
            (the-as part-tracker s5-1)
            *entity-pool*
            (symbol->string (-> part-tracker symbol))
            (the-as pointer #x70004000)
            )
          )
        (let ((t9-13 run-function-in-process)
              (a0-19 s5-1)
              (a1-15 part-tracker-init)
              (a2-12 (-> *part-group-id-table* 68))
              (a3-3 0)
              (t0-2 #f)
              (t1-0 #f)
              (t2-0 #f)
              (t3-0 *launch-matrix*)
              )
          (set! (-> t3-0 trans quad) (-> this root trans quad))
          ((the-as (function object object object object object object object object none) t9-13)
           a0-19
           a1-15
           a2-12
           a3-3
           t0-2
           t1-0
           t2-0
           t3-0
           )
          )
        (-> s5-1 ppointer)
        )
      )
    0
    (none)
    )
  )

(defmethod unknown-particles ((this c-gun-blue-shot))
  "TODO - confirm"
  (draw-beam (-> *part-id-table* 191) (-> this init-pos) (-> this init-dir) #f #t)
  (draw-beam (-> *part-id-table* 194) (-> this init-pos) (-> this starting-dir) #f #t)
  0
  (none)
  )

;; WARN: Return type mismatch sound-id vs none.
(defmethod play-impact-sound ((this c-gun-blue-shot) (arg0 projectile-options))
  (let ((v1-0 arg0))
    (cond
      ((zero? v1-0)
       (sound-play "blue-shot-fire")
       )
      ((= v1-0 (projectile-options lose-altitude))
       (sound-play "blue-shot-hit")
       )
      )
    )
  (none)
  )

(defmethod made-impact? ((this c-gun-blue-shot))
  "TODO - queries the collision cache, return true/false"
  (let ((v1-0 (-> this root))
        (t1-0 (new 'stack-no-clear 'collide-query))
        )
    (let ((a1-0 t1-0))
      (set! (-> a1-0 radius) (-> v1-0 root-prim prim-core world-sphere w))
      (set! (-> a1-0 collide-with) (-> v1-0 root-prim prim-core collide-with))
      (set! (-> a1-0 ignore-process0) this)
      (set! (-> a1-0 ignore-process1) (ppointer->process (-> this parent)))
      (set! (-> a1-0 ignore-pat) (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1))
      (set! (-> a1-0 action-mask) (collide-action solid))
      )
    (fill-and-try-snap-to-surface v1-0 (-> v1-0 transv) -12288.0 12697.6 -2048.0 t1-0)
    )
  )

(defun c-gun-blue-shot-move ((arg0 c-gun-blue-shot))
  (projectile-move-fill-line-sphere arg0)
  (if (logtest? (-> arg0 root status) (collide-status touch-surface))
      (go (method-of-object arg0 impact))
      )
  0
  (none)
  )

;; WARN: Return type mismatch int vs collide-status.
(defun cshape-reaction-blue-shot ((arg0 control-info) (arg1 collide-query) (arg2 vector) (arg3 vector))
  (vector-reset! arg2)
  (let ((a1-1 (new 'stack-no-clear 'vector)))
    (vector-float*! a1-1 (-> arg1 move-dist) (-> arg1 best-dist))
    (move-by-vector! arg0 a1-1)
    )
  (set! (-> (the-as c-gun-blue-shot (-> arg0 process)) collide-normal quad) (-> arg1 best-other-tri normal quad))
  (let ((v0-1 4))
    (logior! (-> arg0 status) v0-1)
    (the-as collide-status v0-1)
    )
  )

(defmethod init-proj-collision! ((this c-gun-blue-shot))
  "Init the [[projectile]]'s [[collide-shape]]"
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-blue-shot)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate jak-blue-shot))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 3))
      (set! (-> s4-0 prim-core collide-as) (collide-spec projectile))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec jak backgnd bot crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list pusher)
            )
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 1228.8)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-13 prim-core collide-with) (collide-spec backgnd obstacle pusher))
      (set! (-> v1-13 prim-core action) (collide-action solid))
      (set-vector! (-> v1-13 local-sphere) 0.0 0.0 0.0 819.2)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-15 prim-core collide-with)
            (collide-spec jak bot crate civilian enemy vehicle-sphere hit-by-others-list player-list)
            )
      (set! (-> v1-15 prim-core action) (collide-action solid))
      (set-vector! (-> v1-15 local-sphere) 0.0 0.0 0.0 4096.0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-18 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-18 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-18 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 1))
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> this root) s5-0)
    )
  (set! (-> this root pat-ignore-mask)
        (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noproj #x1 :noendlessfall #x1)
        )
  0
  (none)
  )

(defmethod init-proj-settings! ((this c-gun-blue-shot))
  "Init relevant settings for the [[projectile]] such as gravity, speed, timeout, etc"
  (with-pp
    (cpad-set-buzz! (-> *cpad-list* cpads 0) 1 204 (seconds 0.1))
    (set! (-> this init-pos quad) (-> this root trans quad))
    (set! (-> this init-dir quad) (-> this starting-dir quad))
    (vector-normalize-copy! (-> this root transv) (-> this init-dir) (* 327680.0 (-> pp clock frames-per-second)))
    (set! (-> this attack-mode) 'eco-blue)
    (set! (-> this max-speed) (* 327680.0 (-> pp clock frames-per-second)))
    (set! (-> this timeout) 1)
    (set! (-> this move) c-gun-blue-shot-move)
    (vector-reset! (-> this collide-normal))
    (set! (-> this damage) (if (logtest? (game-feature gun-upgrade-damage) (-> *game-info* features))
                               4.0
                               2.0
                               )
          )
          (when (= p-crit-hits #t)
            (let ((crit-dmg-1 (+ (/ (-> *game-info* skill) 45) 2.0))
                  (crit-dmg-2 (+ (/ (-> *game-info* skill) 45) 4.0)))
            (when (= p-upgrade-damage #t)
              (set! (-> this damage) crit-dmg-2)
            )
            (when (= p-upgrade-damage #f)
              (set! (-> this damage) crit-dmg-1)
            )
            )
          )
    0
    (none)
    )
  )
