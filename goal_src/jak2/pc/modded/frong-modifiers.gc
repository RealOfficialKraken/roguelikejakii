(in-package goal)

;frong-modifiers.gc

(define frong-spawned? #f)

(defskelgroup skel-fodder fodder fodder-lod0-jg -1
              ((fodder-lod0-mg (meters 20)) (fodder-lod1-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 2)
              :shadow fodder-shadow-mg
              :origin-joint-index 12
              )

#|(process-spawn manipy
                :init
                manipy-init
                (new 'static 'vector :x (meters 761.8877) :y (meters 8.0) :z (meters 868.1027))
                #f
                (art-group-get-by-name *level* "c-skel-fodder" (the (pointer uint32) #f))
                (the-as pair 0)
                0)|#

(define frong-wait2 #f)
(define frongi2 0)
(define frongmenu-wait-exit #f)
(define frongi4 0)

#|
All frong mods are here
frong-display1 "Endless Light Eco Run"
frong-display2 "All Random Missions"
frong-display3 "All Challenge Levels"
frong-display4 "All Weapons at Start"
frong-display5 "Always Apocolypse"
frong-display6 "Everyone has Random Shot"
frong-display7 "Random Explosive Barrels"
frong-display8 "Random Modifiers Every Level"
frong-display9 "Infinite Ammo"
|#



(define frongmenu-select 0)

(defun frong-checker! ()


    (when (and (= frong-spawning? #t)(= in-hub? #t))
        (when (rand-vu-percent? 0.6)
            (set! frong-spawned? #t)
        )
        (set! frong-spawning? #f)
    )
    (when 
    (and 
    (= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 2)
    (= frong-spawning? #t)
    (= in-hub? #f)
    )
        (when (rand-vu-percent? 0.4)
            (process-spawn c-fodder frong-position)
            (set! frong-ingame? #t)
        )
        (set! frong-spawning? #f)
    )
    (when 
    (and
    (= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 1)
    (= frong-spawned? #t)
    (= in-hub? #t)
    )
        (set! frong-spawned? #t)
        (set! fodder-dialogue? #t)
        (process-spawn c-fodder (new 'static 'vector :x (meters 760.0877) :y (meters 8.0) :z (meters 869.1027)))
        (set! frong-spawned? #f)
    )

    (when (and (= in-updateboard? #f)(= fodder-dialogue? #t)(= start-stage #t)(cpad-pressed? 0 r3))
        (process-grab? *target* #f)
        (send-event *camera* 'teleport-to-vector-start-string (new 'static 'vector :x (meters 753.2588) :y (meters 11.6281) :z (meters 862.9104)))
        (set! frong-wait #t)
    )

    (when (= frong-wait #t)
        (+! frongi 1)
        (when (= frongi 1)
            (set! pause-menu-blocked? #t)
            (kill-by-name "c-fodder" *default-pool*)
        )
        (when (= frongi 2)
            (process-spawn c-fodder (new 'static 'vector :x (meters 760.0877) :y (meters 8.0) :z (meters 869.1027)))
        )
        (when (= frongi 230)
            (set! in-dialogue? #t)
            (set! log-id 50)
            (set! log-sec 1)
            (set! frong-wait #f)
            (set! frongi 0)
            (set! di-s "helo persson")
            (set! di-s2 "") 
            (set! di-s3 "")
            (set! di-s4 "")
        )
    )
    (when (= frong-wait2 #t)
        (+! frongi2 1)
        (when (= frongi2 1)
            (set! pause-menu-blocked? #t)
            (kill-by-name "c-fodder" *default-pool*)
            (set! machine-prompt? #f)
        )
        (when (= frongi2 2)
            (process-spawn c-fodder frong-position)
        )
        (when (= frongi2 230)
            (set! in-dialogue? #t)
            (set! log-id 51)
            (set! log-sec 1)
            (set! frong-wait2 #f)
            (set! frongi2 0)
            (set! di-s "helo persson")
            (set! di-s2 "") 
            (set! di-s3 "")
            (set! di-s4 "")
            (set! in-dialogue? #t)
        )
    )

    (when 
    (and
    (= in-dialogue? #t)
    (= log-id 50)
    (cpad-pressed? 0 x)
    )
        (+! log-sec 1)
        (when (= log-sec 1)
            (set! di-s "helo persson")
            (set! di-s2 "") 
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 2)
            (set! di-s "i seem 2 be blockin ur wayje")
            (set! di-s2 "") 
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 3)
            (set! di-s "...frong, help.")
            (set! di-s2 "") 
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 4)
            (set! di-s "...")
            (set! di-s2 "") 
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 5)
            (set! di-s "...no")
            (set! di-s2 "u must payje frong tax") 
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 6)
            (set! di-s "yes.. tax to go through.")
            (set! di-s2 "") 
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 7)
            (set! di-s "...")
            (set! di-s2 "") 
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 8)
            (set! di-s "thank")
            (set! di-s2 "thank 4 ur patronadje") 
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 9)
            (set! di-s "your time")
            (set! di-s2 "...yes that was ur tax") 
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 10)
            (set! di-s "frong will watch you win")
            (set! di-s2 "frong cheer you on") 
            (set! di-s3 "")
            (set! di-s4 "")
        )
        (when (= log-sec 11)
            (set! camera-unlocked #t)
            (set! in-dialogue? #f)
            (set! frong-spawned? #f)
            (set! fodder-dialogue? #f)
            (kill-by-name "c-fodder" *default-pool*)
            (+! (-> *game-info* auto-save-count) 10000000)
            (set! autosave-delayed #t)
            (set! tutorial-completed? #t)
            (set! wait-exit #t)
            (set! start-stage #f)
            (set! temp-orbs 0.0)
            (set! temp-health 8.0)
            (set! temp-skullgemamount 0.0)
            (set! in-hub? #f)
            (set! di-s "")
            (set! di-s2 "") 
            (set! di-s3 "")
            (set! di-s4 "")
        )
    )

    (when 
(and 
(= machine-locked? #f)
(= machine-prompt? #t) 
(cpad-pressed? 0 r3) 
(= avoidc-waitb #f)
(= in-machine? #f)
(= frong-ingame? #t)
(= in-hub? #f)
) ;run machine w/ frong
    (process-grab? *target* #f)
    (set-setting-by-param *setting-control* 'mode-name 'cam-really-fixed 0 0)
    (send-event *camera* 'teleport-to-vector-start-string machinev-cam-final)
    (set! frong-wait2 #t)
)

(when 
(and 
(= log-id 51)
(= in-dialogue? #t)
(cpad-pressed? 0 x)
)
    (+! log-sec 1)
    (when (= log-sec 1)
        (set! di-s "fancy seein u here")
        (set! di-s2 "") 
        (set! di-s3 "")
        (set! di-s4 "")
    )
    (when (= log-sec 2)
        (set! di-s "i have watchd u")
        (set! di-s2 "") 
        (set! di-s3 "")
        (set! di-s4 "")
    )
    (when (= log-sec 3)
        (set! di-s "methinks u should go lookin for frong")
        (set! di-s2 "...") 
        (set! di-s3 "")
        (set! di-s4 "")
    )
    (when (= log-sec 4)
        (set! di-s "me, yes.. go look more for me")
        (set! di-s2 "..around") 
        (set! di-s3 "")
        (set! di-s4 "")
    )
    (when (= log-sec 5)
        (set! di-s "frong wil give good reward for")
        (set! di-s2 "finding me again") 
        (set! di-s3 "")
        (set! di-s4 "")
    )
    (when (= log-sec 6)
        (set! di-s "...yes frong wil give good things")
        (set! di-s2 "") 
        (set! di-s3 "")
        (set! di-s4 "")
    )
    (when (= log-sec 7)
        (set! di-s "frong also hacked the machine")
        (set! di-s2 "") 
        (set! di-s3 "")
        (set! di-s4 "")
    )
    (when (= log-sec 8)
        (set! di-s "just 4 u")
        (set! di-s2 "") 
        (set! di-s3 "")
        (set! di-s4 "")
    )
    (when (= log-sec 9)
        (set! di-s "yea frong good guy")
        (set! di-s2 "") 
        (set! di-s3 "")
        (set! di-s4 "")
    )
    (when (= log-sec 10)
        (set! di-s "frong HERO")
        (set! di-s2 "") 
        (set! di-s3 "")
        (set! di-s4 "")
    )
    (when (= log-sec 11)
        (set! di-s "frong savior")
        (set! di-s2 "") 
        (set! di-s3 "")
        (set! di-s4 "")
    )
    (when (= log-sec 12)
        (set! di-s "enjoi")
        (set! di-s2 "") 
        (set! di-s3 "")
        (set! di-s4 "")
    )
    (when (= log-sec 13)
        (set! di-s "")
        (set! di-s2 "") 
        (set! di-s3 "")
        (set! di-s4 "")
        (set! wait-machine #t)
        (set! frong-ingame? #f)
        (+! (-> *game-info* fuel) 15.0)
        (+! (-> *game-info* auto-save-count) 10000000)
        (set! autosave-delayed #t)
        ;(set! camera-unlocked #t)
    )
)

(when ;praxis boss w/ dark-gun and no special
(and
(= in-hub? #f)
(= starter-weapon 4)
(= praxisboss-ammo #t)
(= gun-dark-special #f)
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
)
(+! ammor-dark 1)
    (when 
    (and
    (= ammor-dark 150)
    )
        (when (= p-upgrade-ammo #f)
            (when (!= (-> *game-info* gun-ammo 3) (-> *FACT-bank* ammo-dark-max))
                (send-event *target* 'get-pickup (pickup-type ammo-dark) 1.0)
            )
        )
        (when (= p-upgrade-ammo #t)
            (when (!= (-> *game-info* gun-ammo 3) (+ (-> *FACT-bank* ammo-dark-max) 5.0))
                (send-event *target* 'get-pickup (pickup-type ammo-dark) 1.0)
            )
        )
        (set! ammor-dark 0)
    )
)

(when ;praxis boss w/ blue gun
(and
(= in-hub? #f)
(= starter-weapon 3)
(= praxisboss-ammo #t)
(= gun-blue-special #f)
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
)
(+! ammor-blue 1)
    (when 
    (and
    (= ammor-blue 300)
    )
    (when 
        (= p-upgrade-ammo #f)
        (when (!= (-> *game-info* gun-ammo 2) (-> *FACT-bank* ammo-blue-max))
            (send-event *target* 'get-pickup (pickup-type ammo-blue) 10.0)
        )
    )
    (when 
        (= p-upgrade-ammo #t)
        (when (!= (-> *game-info* gun-ammo 2) (+ (-> *FACT-bank* ammo-blue-max) 100.0))
            (send-event *target* 'get-pickup (pickup-type ammo-blue) 10.0)
        )
    )
        (set! ammor-blue 0)
    )
)

(when ;praxis boss w/ red gun
(and
(= in-hub? #f)
(= starter-weapon 1)
(= praxisboss-ammo #t)
(= gun-red-special #f)
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
)
(+! ammor-red 1)
    (when 
    (and 
    (= ammor-red 230)
    )
    (when (= p-upgrade-ammo #f)
        (when (!= (-> *game-info* gun-ammo 1) (-> *FACT-bank* ammo-red-max))
            (send-event *target* 'get-pickup (pickup-type ammo-red) 5.0)
        )
    )
    (when (= p-upgrade-ammo #t)
        (when (!= (-> *game-info* gun-ammo 1) (+ (-> *FACT-bank* ammo-red-max) 50.0))
            (send-event *target* 'get-pickup (pickup-type ammo-red) 5.0)
        )
    )
        (set! ammor-red 0)
    )
)

(when ;dark special reammunition
(and
(= in-hub? #f)
(= gun-dark-special #t)
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
)
(+! ammor-dark 1)
    (when 
    (and
    (= ammor-dark 150)
    )
        (when (= p-upgrade-ammo #f)
            (when (!= (-> *game-info* gun-ammo 3) (-> *FACT-bank* ammo-dark-max))
                (send-event *target* 'get-pickup (pickup-type ammo-dark) 1.0)
            )
        )
        (when (= p-upgrade-ammo #t)
            (when (!= (-> *game-info* gun-ammo 3) (+ (-> *FACT-bank* ammo-dark-max) 5.0))
                (send-event *target* 'get-pickup (pickup-type ammo-dark) 1.0)
            )
        )
        (set! ammor-dark 0)
    )
)




(when
(and
(= in-hub? #t)
(= vin-shop #f)
(= in-updateboard? #f)
(= in-frongmenu? #f)
(= in-menu #f)
(= vin-shop-wait #f)
(= ub-npc-wait #f)
(= ub-npc-kill #f)
(= frongmenu-wait #f)
(= start-stage #f)
(>= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 3)
(cpad-pressed? 0 l2)
)
    (set! frongmenu-wait #t)
)

(when
(and
(= in-hub? #t)
(= vin-shop #f)
(= in-updateboard? #f)
(= in-frongmenu? #t)
(= in-menu #f)
(= vin-shop-wait #f)
(= ub-npc-wait #f)
(= ub-npc-kill #f)
(= frongmenu-wait #f)
(= start-stage #f)
(cpad-pressed? 0 r2)
)
    (set! frongmenu-wait-exit #t)
)

(when (= frongmenu-wait #t)
    (+! frongi3 1)
    (when (= frongi3 2)
        (set-vector! (-> *target* control trans) (meters 745.7249) (meters 8.4005) (meters 874.6486) 1.0) ;teleports jak
        (persist-with-delay *setting-control* 'gun (seconds 0.5) 'gun #f 0.0 0)
    )
    (when (= frongi3 3)
        (kill-by-name "c-fodder" *default-pool*)
        (process-spawn c-fodder (new 'static 'vector :x (meters 745.3792) :y (meters 12) :z (meters 872.0936)))
        (send-event *camera* 'teleport-to-vector-start-string (new 'static 'vector :x (meters 746.3200) :y (meters 14.0) :z (meters 879.4559)))
        (set! (-> *target* cam-user-mode) 'fixed)
        (set-setting-by-param *setting-control* 'mode-name 'cam-really-fixed 0 0)
        (send-event *target* 'draw #f)
    )
    (when (= frongi3 30)
        (set! in-frongmenu? #t)
        (set! frongi3 0)
        (set! frongmenu-wait #f)
        (set! frongmenu-select 1)
        (process-grab? *target* #f)
    )
)

(when (= frongmenu-wait-exit #t)
    (+! frongi4 1)
    (when (= frongi4 2)
        ;(set-vector! (-> *target* control trans) (meters 754.0274) (meters 8.4005) (meters 864.5117) 1.0) ;teleports jak
        (set-vector! (-> *target* control trans) (meters 745.7249) (meters 8.4005) (meters 876.6486) 1.0)
        (set! camera-unlocked #t)
        (set! in-frongmenu? #f)
    )
    (when (= frongi4 40)
    (set! frongi4 0)
    (set! frongmenu-wait-exit #f)
    )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;FRONG MENU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;controls
(when 
(and
(= in-frongmenu? #t)
(cpad-pressed? 0 down)
)
(when (<= frongmenu-select 9)
    (+! frongmenu-select 1)
)
(when (= frongmenu-select 10)
    (set! frongmenu-select 1)
)
)

(when 
(and
(= in-frongmenu? #t)
(cpad-pressed? 0 up)
)
(when (>= frongmenu-select 1)
    (-! frongmenu-select 1)
)
(when (= frongmenu-select 0)
    (set! frongmenu-select 9)
)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MENU SELECTION;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(when 
    (and
    (= in-frongmenu? #t)
    (cpad-pressed? 0 x)
    )
        (until (= (/ (mod (-> *game-info* auto-save-count) 1000000000) 100000000) 9)
                (+! (-> *game-info* auto-save-count) 100000000)
            )
            (when (= (/ (mod (-> *game-info* auto-save-count) 1000000000) 100000000) 9)
                (-! (-> *game-info* auto-save-count) 900000000)
            )
        (when (and (= mode-rngmods? #f)(= frongmenu-select 1)(= unlock-lighteco? #t)(= mode-lighteco? #f))
            (+! (-> *game-info* auto-save-count) 100000000)
        )
        (when (and (= mode-rngmods? #f)(= frongmenu-select 2)(= unlock-rngmission? #t)(= mode-rngmission? #f))
            (+! (-> *game-info* auto-save-count) 200000000)
        )
        (when (and (= mode-rngmods? #f)(= frongmenu-select 3)(= unlock-challenge? #t)(= mode-challenge? #f))
            (+! (-> *game-info* auto-save-count) 300000000)
        )
        (when (and (= mode-rngmods? #f)(= frongmenu-select 4)(= unlock-allguns? #t)(= mode-allguns? #f))
            (+! (-> *game-info* auto-save-count) 400000000)
        )
        (when (and (= mode-rngmods? #f)(= frongmenu-select 5)(= unlock-apocalypse? #t)(= mode-apocalypse? #f))
            (+! (-> *game-info* auto-save-count) 500000000)
        )
        (when (and (= mode-rngmods? #f)(= frongmenu-select 6)(= unlock-randomshot? #t)(= mode-randomshot? #f))
            (+! (-> *game-info* auto-save-count) 600000000)
        )
        (when (and (= mode-rngmods? #f)(= frongmenu-select 7)(= unlock-barrels? #t)(= mode-barrels? #f))
            (+! (-> *game-info* auto-save-count) 700000000)
        )
        (when (and (= mode-rngmods? #f)(= frongmenu-select 8)(= unlock-rngmods? #t)(= mode-rngmods? #f))
            (+! (-> *game-info* auto-save-count) 800000000)
        )
        (when (= frongmenu-select 9)
            (set! frong-activemod "None")
        )
    )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MENU DRAWS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(when 
(and
(= in-frongmenu? #t)
(!= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 8)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>Frong's Modifiers~%<COLOR_ORANGE>Collected Modifiers: <COLOR_YELLOW>~d/8~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_GREEN>find more frong to collect more modje~%look in tight corners, and dark places. frong no~%want to be seen.~%<COLOR_CYAN>~s~%<COLOR_WHITE>R2: <COLOR_YELLOW>Exit"
    (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000)
    frong-hint
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 15 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and
(= in-frongmenu? #t)
(= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 8)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>Frong's Modifiers~%<COLOR_ORANGE>Collected Modifiers: <COLOR_YELLOW>~d/8~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%<COLOR_GREEN>thank u for getting my brothers. frong will rember. big friendje~%~%~%<COLOR_WHITE>R2: <COLOR_YELLOW>Exit"
    (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 15 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (= in-frongmenu? #t) ;FRONGMENU-SELECT = 1
    (when 
    (and
    (= frongmenu-select 1)
    )
    (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_GREEN>~s<COLOR_WHITE>~%~%~s~%~%~s~%~%~s~%~%~s~%~%~s"
        frong-display1
        frong-display2
        frong-display3
        frong-display4
        frong-display5
        frong-display6
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 150 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )

    (when 
    (and
    (= in-frongmenu? #t)
    (= frongmenu-select 1)
    )
    (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_WHITE>~s~%~%~s~%~%~s"
        frong-display7
        frong-display8
        frong-display9
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 268 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
)

(when (= in-frongmenu? #t) ;FRONGMENU-SELECT = 2
    (when 
    (and
    (= frongmenu-select 2)
    )
    (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_WHITE>~s~%~%<COLOR_GREEN>~s<COLOR_WHITE>~%~%~s~%~%~s~%~%~s~%~%~s"
        frong-display1
        frong-display2
        frong-display3
        frong-display4
        frong-display5
        frong-display6
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 150 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )

    (when 
    (and
    (= in-frongmenu? #t)
    (= frongmenu-select 2)
    )
    (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_WHITE>~s~%~%~s~%~%~s"
        frong-display7
        frong-display8
        frong-display9
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 268 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
)

(when (= in-frongmenu? #t) ;FRONGMENU-SELECT = 3
    (when 
    (and
    (= frongmenu-select 3)
    )
    (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_WHITE>~s~%~%~s~%~%<COLOR_GREEN>~s<COLOR_WHITE>~%~%~s~%~%~s~%~%~s"
        frong-display1
        frong-display2
        frong-display3
        frong-display4
        frong-display5
        frong-display6
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 150 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )

    (when 
    (and
    (= in-frongmenu? #t)
    (= frongmenu-select 3)
    )
    (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_WHITE>~s~%~%~s~%~%~s"
        frong-display7
        frong-display8
        frong-display9
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 268 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
)

(when (= in-frongmenu? #t) ;FRONGMENU-SELECT = 4
    (when 
    (and
    (= frongmenu-select 4)
    )
    (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_WHITE>~s~%~%~s~%~%~s~%~%<COLOR_GREEN>~s<COLOR_WHITE>~%~%~s~%~%~s"
        frong-display1
        frong-display2
        frong-display3
        frong-display4
        frong-display5
        frong-display6
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 150 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )

    (when 
    (and
    (= in-frongmenu? #t)
    (= frongmenu-select 4)
    )
    (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_WHITE>~s~%~%~s~%~%~s"
        frong-display7
        frong-display8
        frong-display9
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 268 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
)

(when (= in-frongmenu? #t) ;FRONGMENU-SELECT = 5
    (when 
    (and
    (= frongmenu-select 5)
    )
    (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_WHITE>~s~%~%~s~%~%~s~%~%~s~%~%<COLOR_GREEN>~s<COLOR_WHITE>~%~%~s"
        frong-display1
        frong-display2
        frong-display3
        frong-display4
        frong-display5
        frong-display6
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 150 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )

    (when 
    (and
    (= in-frongmenu? #t)
    (= frongmenu-select 5)
    )
    (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_WHITE>~s~%~%~s~%~%~s"
        frong-display7
        frong-display8
        frong-display9
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 268 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
)

(when (= in-frongmenu? #t) ;FRONGMENU-SELECT = 6
    (when 
    (and
    (= frongmenu-select 6)
    )
    (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_WHITE>~s~%~%~s~%~%~s~%~%~s~%~%~s~%~%<COLOR_GREEN>~s<COLOR_WHITE>"
        frong-display1
        frong-display2
        frong-display3
        frong-display4
        frong-display5
        frong-display6
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 150 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )

    (when 
    (and
    (= in-frongmenu? #t)
    (= frongmenu-select 6)
    )
    (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_WHITE>~s~%~%~s~%~%~s"
        frong-display7
        frong-display8
        frong-display9
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 268 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
)

(when (= in-frongmenu? #t) ;FRONGMENU-SELECT = 7
    (when 
    (and
    (= frongmenu-select 7)
    )
    (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_WHITE>~s~%~%~s~%~%~s~%~%~s~%~%~s~%~%~s"
        frong-display1
        frong-display2
        frong-display3
        frong-display4
        frong-display5
        frong-display6
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 150 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )

    (when 
    (and
    (= in-frongmenu? #t)
    (= frongmenu-select 7)
    )
    (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_WHITE><COLOR_GREEN>~s<COLOR_WHITE>~%~%~s~%~%~s"
        frong-display7
        frong-display8
        frong-display9
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 268 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
)


(when (= in-frongmenu? #t) ;FRONGMENU-SELECT = 8
    (when 
    (and
    (= frongmenu-select 8)
    )
    (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_WHITE>~s~%~%~s~%~%~s~%~%~s~%~%~s~%~%~s"
        frong-display1
        frong-display2
        frong-display3
        frong-display4
        frong-display5
        frong-display6
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 150 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )

    (when 
    (and
    (= in-frongmenu? #t)
    (= frongmenu-select 8)
    )
    (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_WHITE>~s~%~%<COLOR_GREEN>~s<COLOR_WHITE>~%~%~s"
        frong-display7
        frong-display8
        frong-display9
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 268 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
)

(when (= in-frongmenu? #t) ;FRONGMENU-SELECT = 9
    (when 
    (and
    (= frongmenu-select 9)
    )
    (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_WHITE>~s~%~%~s~%~%~s~%~%~s~%~%~s~%~%~s"
        frong-display1
        frong-display2
        frong-display3
        frong-display4
        frong-display5
        frong-display6
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 150 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )

    (when 
    (and
    (= in-frongmenu? #t)
    (= frongmenu-select 9)
    )
    (clear matt-str)
        (clear *pc-encoded-matt-str*)
        (format matt-str "<COLOR_WHITE>~s~%~%~s~%~%<COLOR_GREEN>~s<COLOR_WHITE>"
        frong-display7
        frong-display8
        frong-display9
        )
        (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        ;; reset bucket settings prior to drawing - font won't do self for us, and
        ;; draw-raw-image can sometimes mess them up. (intro sequence)
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 268 0.0 (font-color default) (font-flags middle shadow kerning large))))
            (set! (-> font-ctx scale) 0.325)
            (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
)





    
    (none)
)