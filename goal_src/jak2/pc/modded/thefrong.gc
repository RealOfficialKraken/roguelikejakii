;;-*-Lisp-*-
(in-package goal)

;; name: themachine.gc

(define 
    frong-current-pos 
        (new 'static 'vector 
            :x (meters 0.0) 
            :y (meters 0.0) 
            :z (meters 0.0) 
            :w 1.0
        )
    )

(define 
    forest-frong-spawn-pos 
        (new 'static 'vector 
            :x (meters -726.8942) 
            :y (meters 1.0) 
            :z (meters 648.1550) 
            :w 1.0
        )
    )
(define ;done
    sewer-frong-spawn-pos 
        (new 'static 'vector 
            :x (meters 1433.8206) 
            :y (meters -74.6075) 
            :z (meters 429.4915) 
            :w 1.0
        )
    )
(define 
    strip-frong-spawn-pos 
        (new 'static 'vector 
            :x (meters 2373.8669) 
            :y (meters 69.8985) 
            :z (meters -35.3681) 
            :w 1.0
        )
    )
(define ;done
    mountain-frong-spawn-pos 
        (new 'static 'vector 
            :x (meters -494.3472) 
            :y (meters 42.6749) 
            :z (meters 122.1508) 
            :w 1.0
        )
    )
(define 
    ruins-frong-spawn-pos ;done
        (new 'static 'vector 
            :x (meters 913.2606) 
            :y (meters 27.5770) 
            :z (meters -579.5979) 
            :w 1.0
        )
    )
(define ;done
    atoll-frong-spawn-pos 
        (new 'static 'vector 
            :x (meters 433.1818) 
            :y (meters 15.79) 
            :z (meters -1390.2536) 
            :w 1.0
        )
    )
(define ;done
    forest-frong-spawn-pos 
        (new 'static 'vector 
            :x (meters -598.8101) 
            :y (meters 30.8) 
            :z (meters 579.3311) 
            :w 1.0
        )
    )

(define frong-prompt? #f)
(define in-frong? #f)
(defun-extern frong-run (none))
(defun-extern frong-exit (none))
(define frongv-camera (new 'static 'vector :x (meters 0) :y (meters 7) :z (meters 10)))
(define frongv-cam-final frong-current-pos)
(define *frong-tracker* (the (pointer c-fodder) #f))
(define frong-win #f)
(define frongwi 0)


(defun frong-update ()
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;FRONG PARAMS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(when 
(and
(= in-hub? #f)
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
(ppointer->process *frong-tracker*)
(< (vector-vector-distance (target-pos 0) frong-current-pos) machine-interact-rad)
)
(set! frong-prompt? #t)
)

(when 
(and
(= in-hub? #f)
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
(ppointer->process *frong-tracker*)
(> (vector-vector-distance (target-pos 0) frong-current-pos) machine-interact-rad)
)
(set! frong-prompt? #f)
)

(when (= frong-prompt? #t)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>R3: <COLOR_GREEN>colect frong"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 245 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (= frong-win #t)
    (+! frongwi 1)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_GREEN>thank, friendje!~%u unlocked ~%<COLOR_CYAN>~s"
    frong-recievedmod
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 255 60 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    (when (= frongwi 600)
        (set! frongwi 0)
        (set! frong-win #f)
    )
)

(when 
(and
(= in-hub? #f)
*target*
(= (paused?) #f)
(= (pause-allowed?) #t)
(= frong-prompt? #t)
(cpad-pressed? 0 r3)
)
(set! frong-current-pos 
(new 'static 'vector 
            :x (meters 0.0) 
            :y (meters 0.0) 
            :z (meters 0.0) 
            :w 1.0
        )
)
(remove-setting-by-arg0 *setting-control* 'mode-name)
(kill-by-name "c-fodder" *default-pool*)
(+! (-> *game-info* auto-save-count) 10000000)
(set! frong-prompt? #f)
(set! frong-win #t)
(sound-play "ammo-pickup")
)


(when  ;start of when
    (and 
    (>= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 3)
    (< (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 8)
    )
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ATOLL SPAWN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(when (= (-> (level-get-target-inside *level*) name) 'atoll)
    (let 
        (
        (vec-pos atoll-frong-spawn-pos)
        )
        (when 
            (and
            (= in-hub? #f)
            *target*
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (not (ppointer->process *frong-tracker*))
            (< (vector-vector-distance (target-pos 0) vec-pos) machine-spawn-rad)
            (= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 3)
            )
            (print "|||||||FRONG SPAWNED SOMEWHERE")
            (set! frong-current-pos vec-pos)
            ;(process-spawn c-fodder frong-current-pos)
            (set! frong-recievedmod "All Weapons at Start")
            (set! *frong-tracker* (process-spawn c-fodder frong-current-pos))
            )

        (when 
            (and
            *target*
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (or 
                (> (vector-vector-distance (target-pos 0) frong-current-pos) machine-spawn-rad)
            )
            (>= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 3)
            (ppointer->process *frong-tracker*)
            )
                (print "|||||||FRONG DESPAWNED!")
                (kill-by-name "c-fodder" *default-pool*)
                (set! *frong-tracker* #f)
                (set! frong-current-pos 
                (new 'static 'vector 
                :x (meters 0.0) 
                :y (meters 0.0) 
                :z (meters 0.0) 
                :w 1.0
                        )
                )
            )
    )
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SEWERS SPAWN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(when (= (-> (level-get-target-inside *level*) name) 'sewer)
    (let 
        (
        (vec-pos sewer-frong-spawn-pos)
        )
        (when 
            (and
            (= in-hub? #f)
            *target*
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (not (ppointer->process *frong-tracker*))
            (< (vector-vector-distance (target-pos 0) vec-pos) machine-spawn-rad)
            (= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 4)
            )
            (print "|||||||FRONG SPAWNED SOMEWHERE")
            (set! frong-current-pos vec-pos)
            ;(process-spawn c-fodder frong-current-pos)
            (set! frong-recievedmod "Always Apocalypse")
            (set! *frong-tracker* (process-spawn c-fodder frong-current-pos))
            )

        (when 
            (and
            *target*
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (or 
                (> (vector-vector-distance (target-pos 0) frong-current-pos) machine-spawn-rad)
            )
            (>= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 4)
            (ppointer->process *frong-tracker*)
            )
                (print "|||||||FRONG DESPAWNED!")
                (kill-by-name "c-fodder" *default-pool*)
                (set! *frong-tracker* #f)
                (set! frong-current-pos 
                (new 'static 'vector 
                :x (meters 0.0) 
                :y (meters 0.0) 
                :z (meters 0.0) 
                :w 1.0
                        )
                )
            )
    )
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MOUNTAIN SPAWN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(when (= (-> (level-get-target-inside *level*) name) 'mountain)
    (let 
        (
        (vec-pos mountain-frong-spawn-pos)
        )
        (when 
            (and
            (= in-hub? #f)
            *target*
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (not (ppointer->process *frong-tracker*))
            (< (vector-vector-distance (target-pos 0) vec-pos) machine-spawn-rad)
            (= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 5)
            )
            (print "|||||||FRONG SPAWNED SOMEWHERE")
            (set! frong-current-pos vec-pos)
            ;(process-spawn c-fodder frong-current-pos)
            (set! frong-recievedmod "Everyone has Random Shot")
            (set! *frong-tracker* (process-spawn c-fodder frong-current-pos))
            )

        (when 
            (and
            *target*
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (or 
                (> (vector-vector-distance (target-pos 0) frong-current-pos) machine-spawn-rad)
            )
            (>= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 5)
            (ppointer->process *frong-tracker*)
            )
                (print "|||||||FRONG DESPAWNED!")
                (kill-by-name "c-fodder" *default-pool*)
                (set! *frong-tracker* #f)
                (set! frong-current-pos 
                (new 'static 'vector 
                :x (meters 0.0) 
                :y (meters 0.0) 
                :z (meters 0.0) 
                :w 1.0
                        )
                )
            )
    )
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;RUINS SPAWN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(when (= (-> (level-get-target-inside *level*) name) 'ruins)
    (let 
        (
        (vec-pos ruins-frong-spawn-pos)
        )
        (when 
            (and
            (= in-hub? #f)
            *target*
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (not (ppointer->process *frong-tracker*))
            (< (vector-vector-distance (target-pos 0) vec-pos) machine-spawn-rad)
            (= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 6)
            )
            (print "|||||||FRONG SPAWNED SOMEWHERE")
            (set! frong-current-pos vec-pos)
            ;(process-spawn c-fodder frong-current-pos)
            (set! frong-recievedmod "Always Raining Explosive Barrels")
            (set! *frong-tracker* (process-spawn c-fodder frong-current-pos))
            )

        (when 
            (and
            *target*
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (or 
                (> (vector-vector-distance (target-pos 0) frong-current-pos) machine-spawn-rad)
            )
            (>= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 6)
            (ppointer->process *frong-tracker*)
            )
                (print "|||||||FRONG DESPAWNED!")
                (kill-by-name "c-fodder" *default-pool*)
                (set! *frong-tracker* #f)
                (set! frong-current-pos 
                (new 'static 'vector 
                :x (meters 0.0) 
                :y (meters 0.0) 
                :z (meters 0.0) 
                :w 1.0
                        )
                )
            )
    )
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;FOREST SPAWN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(when (= (-> (level-get-target-inside *level*) name) 'forest)
    (let 
        (
        (vec-pos forest-frong-spawn-pos)
        )
        (when 
            (and
            (= in-hub? #f)
            *target*
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (not (ppointer->process *frong-tracker*))
            (< (vector-vector-distance (target-pos 0) vec-pos) machine-spawn-rad)
            (= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 7)
            )
            (print "|||||||FRONG SPAWNED SOMEWHERE")
            (set! frong-current-pos vec-pos)
            ;(process-spawn c-fodder frong-current-pos)
            (set! frong-recievedmod "Random Modifier Every Level~%<COLOR_ORANGE>u found them all! thank u!")
            (set! *frong-tracker* (process-spawn c-fodder frong-current-pos))
            )

        (when 
            (and
            *target*
            (= (paused?) #f)
            (= (pause-allowed?) #t)
            (or 
                (> (vector-vector-distance (target-pos 0) frong-current-pos) machine-spawn-rad)
            )
            (>= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 7)
            (ppointer->process *frong-tracker*)
            )
                (print "|||||||FRONG DESPAWNED!")
                (kill-by-name "c-fodder" *default-pool*)
                (set! *frong-tracker* #f)
                (set! frong-current-pos 
                (new 'static 'vector 
                :x (meters 0.0) 
                :y (meters 0.0) 
                :z (meters 0.0) 
                :w 1.0
                        )
                )
            )
    )
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
);end of when

(none)
)
