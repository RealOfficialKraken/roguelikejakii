(in-package goal)

#|
(define update-vers "(0.84)")
(define ub-color "<COLOR_GREEN>")
(define ub-1 "<COLOR_WHITE>< <COLOR_ORANGE>")
(define ub-2 "")
(define ub-3 "")
(define ub-4 "")
(define ub-5 "")
(define ub-6 "")
(define ub-7 "")
(define ub-8 "")
(define ub-9 "")
(define ub-10 "")
(define ub-11 "")
(define ub-12 "")
(define ub-13 "")
(define ub-14 "")
(define ub-15 "")
(define ub-16 "")
(define ub-17 "")
(define ub-18 "")
(define ub-19 "")
(define ub-20 "")
(define ub-21 "")
(define ub-22 "")
(define ub-23 "")
(define ub-24 "")
|#

(define ub-select 0) ;current page
(define ub-max 2) ;max number of pages

(define ub-npc-wait #f)
(define ub-shopi 0)
(define ub-npc-kill #f)
(define ub-npci 0)

(define update-vers "(0.90)")
(define ub-color "<COLOR_CYAN>")
;PAGE 1
(define ub-1 "<COLOR_WHITE>< <COLOR_ORANGE>Added a Challenge Machine to spice up runs with Tokens!")
(define ub-2 "")
(define ub-3 "<COLOR_WHITE>< <COLOR_ORANGE>1st <COLOR_RED>Praxis Boss<COLOR_ORANGE>, and Final Boss reworked")
(define ub-4 "")
(define ub-5 "<COLOR_WHITE>< <COLOR_ORANGE>2 New item additions to runs")
(define ub-6 "")
(define ub-7 "<COLOR_WHITE>< <COLOR_GREEN>Krew's Clones<COLOR_ORANGE> can be hit way more than they used to be")
(define ub-8 "")
(define ub-9 "<COLOR_WHITE>< <COLOR_ORANGE>Story progression reworked")
(define ub-10 "")
(define ub-11 "<COLOR_WHITE>< <COLOR_ORANGE>Added an <COLOR_YELLOW>Update Board")
(define ub-12 "")
(define ub-13 "<COLOR_WHITE>< <COLOR_ORANGE><COLOR_YELLOW>Double Shot <COLOR_ORANGE>is more integrated with Damage, and the Blue Gun")
(define ub-14 "")
(define ub-15 "<COLOR_WHITE>< <COLOR_ORANGE>Fixed a load of UI bugs, as well as made")
(define ub-16 "accessibility to support <COLOR_CYAN>PS2<COLOR_ORANGE> resolutions")
(define ub-17 "")
(define ub-18 "<COLOR_WHITE>< <COLOR_ORANGE>General bug fixes such as items disappearing from")
(define ub-19 "collecting the roll-randomitem jetboard, or <COLOR_YELLOW>Extra Life!<COLOR_ORANGE> not doing its job")
(define ub-20 "")
(define ub-21 "<COLOR_WHITE>< <COLOR_ORANGE>Fixed temp-skullgemamount wipe after dying, displaying<COLOR_YELLOW> 0")
(define ub-22 "<COLOR_YELLOW>skull gems <COLOR_ORANGE>converted to tokens every time")
(define ub-23 "")
(define ub-24 "")
;PAGE 2
(define ub-1-1 "<COLOR_WHITE>< <COLOR_ORANGE>Upgraded the <COLOR_YELLOW>Update Board<COLOR_ORANGE> with more pages and")
(define ub-2-1 "an NPC to compliment the polish of the hub area")
(define ub-3-1 "")
(define ub-4-1 "<COLOR_WHITE>< <COLOR_ORANGE>Added <COLOR_YELLOW>vin-npc<COLOR_ORANGE> to polish Vin's Shop")
(define ub-5-1 "")
(define ub-6-1 "<COLOR_WHITE>< <COLOR_ORANGE>Added a starter weapon to runs!")
(define ub-7-1 "Unlock new things in the game by beating Act 3")
(define ub-8-1 "with differnet starting weapons")
(define ub-9-1 "")
(define ub-10-1 "<COLOR_WHITE>< <COLOR_ORANGE>Added a whole new game mechanic. Modifiers are now added")
(define ub-11-1 "to completely change up a run, unlocked by beating Act 3")
(define ub-12-1 "with any starter weapon")
(define ub-13-1 "")
(define ub-14-1 "")
(define ub-15-1 "")
(define ub-16-1 "")
(define ub-17-1 "")
(define ub-18-1 "")
(define ub-19-1 "")
(define ub-20-1 "")
(define ub-21-1 "")
(define ub-22-1 "")
(define ub-23-1 "")
(define ub-24-1 "")
;PAGE 3
(define ub-1-2 "")
(define ub-2-2 "")
(define ub-3-2 "")
(define ub-4-2 "")
(define ub-5-2 "")
(define ub-6-2 "")
(define ub-7-2 "")
(define ub-8-2 "")
(define ub-9-2 "")
(define ub-10-2 "")
(define ub-11-2 "")
(define ub-12-2 "")
(define ub-13-2 "")
(define ub-14-2 "")
(define ub-15-2 "")
(define ub-16-2 "")
(define ub-17-2 "")
(define ub-18-2 "")
(define ub-19-2 "")
(define ub-20-2 "")
(define ub-21-2 "")
(define ub-22-2 "")
(define ub-23-2 "")
(define ub-24-2 "")
;PAGE 4
(define ub-1-3 "")
(define ub-2-3 "")
(define ub-3-3 "")
(define ub-4-3 "")
(define ub-5-3 "")
(define ub-6-3 "")
(define ub-7-3 "")
(define ub-8-3 "")
(define ub-9-3 "")
(define ub-10-3 "")
(define ub-11-3 "")
(define ub-12-3 "")
(define ub-13-3 "")
(define ub-14-3 "")
(define ub-15-3 "")
(define ub-16-3 "")
(define ub-17-3 "")
(define ub-18-3 "")
(define ub-19-3 "")
(define ub-20-3 "")
(define ub-21-3 "")
(define ub-22-3 "")
(define ub-23-3 "")
(define ub-24-3 "")




(defun check-update-info ()
(when 
(and
(= in-updateboard? #t)
(= in-hub? #t)
(= vin-shop #f)
(= in-menu #f)
(cpad-pressed? 0 r1)
(< ub-select ub-max)
)
(+! ub-select 1)
)
(when 
(and
(= in-updateboard? #t)
(= in-hub? #t)
(= vin-shop #f)
(= in-menu #f)
(cpad-pressed? 0 l1)
(> ub-select 1)
)
(-! ub-select 1)
)

(when 
(and 
(= in-updateboard? #f)
(= in-hub? #t)
(= vin-shop #f)
(= in-menu #f)
)
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>R1: <COLOR_ORANGE>Update Board ~s~s"
    ub-color
    update-vers
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 10 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when 
(and 
(= in-hub? #t)
(= vin-shop #f)
(= in-updateboard? #f)
(= in-menu #f)
(= ub-npc-wait #f)
(= wait-kill-vin #f)
(= ub-npc-kill #f)
(= vin-shop-wait #f)
(cpad-pressed? 0 r1)
)
(set! ub-npc-wait #t)
(set! ub-select 1)
)

(when
(and
(= in-hub? #t)
(= vin-shop #f)
(= in-updateboard? #t)
(= in-menu #f)
(cpad-pressed? 0 r2)
)
(set! in-updateboard? #f)
(set! camera-unlocked #t)
(set! ub-select 1)
(set! ub-npc-kill #t)
)

(when (= ub-npc-kill #t)
(+! ub-shopi 1)
(when (= ub-shopi 40)
  (kill-by-name "c-kid-npc" *default-pool*)
  (kill-by-name "manipy" *default-pool*)
  (set! ub-shopi 0)
  (set! ub-npc-kill #f)
)
)

(when (= ub-npc-wait #t)
  (+! ub-npci 1)
  (when (= ub-npci 1)
    (set-vector! (-> *target* control trans) (meters 746.0249) (meters 10.4005) (meters 872.6486) 1.0) ;teleports jak
    (send-event *target* 'draw #f)
    (persist-with-delay *setting-control* 'gun (seconds 0.5) 'gun #f 0.0 0)
  )
  (when (= ub-npci 5)
    ;(process-spawn c-kid-npc (new 'static 'vector :x (meters 744.3240) :y (meters 18.0) :z (meters 917.0076)))
    ;(process-spawn c-crocadog-npc (new 'static 'vector :x (meters 751.4117) :y (meters 18.2) :z (meters 903.3818)))
    (process-spawn manipy
                            :init
                            manipy-init
                            (new 'static 'vector :x (meters 751.4117) :y (meters 18.2) :z (meters 903.3818))
                            #f
                            (art-group-get-by-name *level* "skel-rapid-gunner" (the (pointer uint32) #f))
                            #f
                            0)
    (send-event *camera* 'teleport-to-vector-start-string (new 'static 'vector :x (meters 749.0048) :y (meters 22.5598) :z (meters 910.0965)))
    (set! (-> *target* cam-user-mode) 'fixed)
    (set-setting-by-param *setting-control* 'mode-name 'cam-really-fixed 0 0)
    (process-grab? *target* #f)
  )
  (when (= ub-npci 30)
    (set! in-updateboard? #t)
    (set! ub-npci 0)
    (set! ub-npc-wait #f)
  )
)

(when (and (= ub-select 1)(= in-updateboard? #t))
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>Rogue-Like Jak II ~s~s~%<COLOR_YELLOW>Update Board - PAGE ~d/~d (L1/R1)"
    ub-color
    update-vers
    ub-select
    ub-max
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 35 0.0 (font-color default) (font-flags large middle shadow kerning))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;
        ;
        ;
        (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>~%~%~%~s~%~s~%~s~%~s~%~s~%~s"
    ub-1
    ub-2
    ub-3
    ub-4
    ub-5
    ub-6
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 40 70 0.0 (font-color default) (font-flags large shadow kerning))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;
        ;
        ;
        (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>~%~%~%~%~%~%~%~%~%~s~%~s~%~s~%~s~%~s~%~s"
    ub-7
    ub-8
    ub-9
    ub-10
    ub-11
    ub-12
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 40 70 0.0 (font-color default) (font-flags large shadow kerning))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;
        ;
        ;
        (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~s~%~s~%~s~%~s~%~s~%~s"
    ub-13
    ub-14
    ub-15
    ub-16
    ub-17
    ub-18
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 40 70 0.0 (font-color default) (font-flags large shadow kerning))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;
        ;
        ;
        (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~s~%~s~%~s~%~s~%~s~%~s"
    ub-19
    ub-20
    ub-21
    ub-22
    ub-23
    ub-24
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 40 70 0.0 (font-color default) (font-flags large shadow kerning))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;
        ;
        ;
        (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%(<COLOR_WHITE>R2:<COLOR_ORANGE>): <COLOR_YELLOW>Exit~%~%<COLOR_WHITE>Check back for more additions in the future, or go to the <COLOR_ORANGE>Open<COLOR_YELLOW>GOAL<COLOR_WHITE>~%Discord for more info on updates"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 70 0.0 (font-color default) (font-flags large middle shadow kerning))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;
        ;
        ;
        
)

(when (and (= ub-select 2)(= in-updateboard? #t))
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>Rogue-Like Jak II ~s~s~%<COLOR_YELLOW>Update Board - PAGE ~d/~d (L1/R1)"
    ub-color
    update-vers
    ub-select
    ub-max
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 35 0.0 (font-color default) (font-flags large middle shadow kerning))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;
        ;
        ;
        (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>~%~%~%~s~%~s~%~s~%~s~%~s~%~s"
    ub-1-1
    ub-2-1
    ub-3-1
    ub-4-1
    ub-5-1
    ub-6-1
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 40 70 0.0 (font-color default) (font-flags large shadow kerning))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;
        ;
        ;
        (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>~%~%~%~%~%~%~%~%~%~s~%~s~%~s~%~s~%~s~%~s"
    ub-7-1
    ub-8-1
    ub-9-1
    ub-10-1
    ub-11-1
    ub-12-1
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 40 70 0.0 (font-color default) (font-flags large shadow kerning))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;
        ;
        ;
        (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~s~%~s~%~s~%~s~%~s~%~s"
    ub-13-1
    ub-14-1
    ub-15-1
    ub-16-1
    ub-17-1
    ub-18-1
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 40 70 0.0 (font-color default) (font-flags large shadow kerning))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;
        ;
        ;
        (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~s~%~s~%~s~%~s~%~s~%~s"
    ub-19-1
    ub-20-1
    ub-21-1
    ub-22-1
    ub-23-1
    ub-24-1
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 40 70 0.0 (font-color default) (font-flags large shadow kerning))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;
        ;
        ;
        (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%(<COLOR_WHITE>R2:<COLOR_ORANGE>): <COLOR_YELLOW>Exit~%~%<COLOR_WHITE>Check back for more additions in the future, or go to the <COLOR_ORANGE>Open<COLOR_YELLOW>GOAL<COLOR_WHITE>~%Discord for more info on updates"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 70 0.0 (font-color default) (font-flags large middle shadow kerning))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;
        ;
        ;
        
)

(when (and (= ub-select 3)(= in-updateboard? #t))
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>Rogue-Like Jak II ~s~s~%<COLOR_YELLOW>Update Board - PAGE ~d/~d (L1/R1)"
    ub-color
    update-vers
    ub-select
    ub-max
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 35 0.0 (font-color default) (font-flags large middle shadow kerning))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;
        ;
        ;
        (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>~%~%~%~s~%~s~%~s~%~s~%~s~%~s"
    ub-1-2
    ub-2-2
    ub-3-2
    ub-4-2
    ub-5-2
    ub-6-2
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 40 70 0.0 (font-color default) (font-flags large shadow kerning))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;
        ;
        ;
        (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>~%~%~%~%~%~%~%~%~%~s~%~s~%~s~%~s~%~s~%~s"
    ub-7-2
    ub-8-2
    ub-9-2
    ub-10-2
    ub-11-2
    ub-12-2
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 40 70 0.0 (font-color default) (font-flags large shadow kerning))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;
        ;
        ;
        (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~s~%~s~%~s~%~s~%~s~%~s"
    ub-13-2
    ub-14-2
    ub-15-2
    ub-16-2
    ub-17-2
    ub-18-2
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 40 70 0.0 (font-color default) (font-flags large shadow kerning))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;
        ;
        ;
        (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~s~%~s~%~s~%~s~%~s~%~s"
    ub-19-2
    ub-20-2
    ub-21-2
    ub-22-2
    ub-23-2
    ub-24-2
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 40 70 0.0 (font-color default) (font-flags large shadow kerning))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;
        ;
        ;
        (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%(<COLOR_WHITE>R2:<COLOR_ORANGE>): <COLOR_YELLOW>Exit~%~%<COLOR_WHITE>Check back for more additions in the future, or go to the <COLOR_ORANGE>Open<COLOR_YELLOW>GOAL<COLOR_WHITE>~%Discord for more info on updates"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 70 0.0 (font-color default) (font-flags large middle shadow kerning))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;
        ;
        ;
        
)

(when (and (= ub-select 4)(= in-updateboard? #t))
(clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>Rogue-Like Jak II ~s~s~%<COLOR_YELLOW>Update Board - PAGE ~d/~d (L1/R1)"
    ub-color
    update-vers
    ub-select
    ub-max
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 35 0.0 (font-color default) (font-flags large middle shadow kerning))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;
        ;
        ;
        (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>~%~%~%~s~%~s~%~s~%~s~%~s~%~s"
    ub-1-3
    ub-2-3
    ub-3-3
    ub-4-3
    ub-5-3
    ub-6-3
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 40 70 0.0 (font-color default) (font-flags large shadow kerning))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;
        ;
        ;
        (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>~%~%~%~%~%~%~%~%~%~s~%~s~%~s~%~s~%~s~%~s"
    ub-7-3
    ub-8-3
    ub-9-3
    ub-10-3
    ub-11-3
    ub-12-3
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 40 70 0.0 (font-color default) (font-flags large shadow kerning))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;
        ;
        ;
        (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~s~%~s~%~s~%~s~%~s~%~s"
    ub-13-3
    ub-14-3
    ub-15-3
    ub-16-3
    ub-17-3
    ub-18-3
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 40 70 0.0 (font-color default) (font-flags large shadow kerning))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;
        ;
        ;
        (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~s~%~s~%~s~%~s~%~s~%~s"
    ub-19-3
    ub-20-3
    ub-21-3
    ub-22-3
    ub-23-3
    ub-24-3
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 40 70 0.0 (font-color default) (font-flags large shadow kerning))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;
        ;
        ;
        (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_ORANGE>~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%(<COLOR_WHITE>R2:<COLOR_ORANGE>): <COLOR_YELLOW>Exit~%~%<COLOR_WHITE>Check back for more additions in the future, or go to the <COLOR_ORANGE>Open<COLOR_YELLOW>GOAL<COLOR_WHITE>~%Discord for more info on updates"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do self for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 250 70 0.0 (font-color default) (font-flags large middle shadow kerning))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        ;
        ;
        ;
        
)

(none)
)