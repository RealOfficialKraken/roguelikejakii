;;-*-Lisp-*-
(in-package goal)

;; name: themachine.gc


(define hideout-machine-spawn-pos (new 'static 'vector :x (meters 1136.4810) :y (meters 8.0) :z (meters 3.2301) :w 1.0))
(define hideout-machine-spawn-pos (new 'static 'vector :x (meters 1136.4810) :y (meters 8.0) :z (meters 3.2301) :w 1.0))


(declare-type whack-a-metal process-drawable)
(define-extern whack-a-metal-init (function entity-actor none :behavior whack-a-metal))



  (deftype chip-whack-a-metal (process-taskable)
  ()
  )

  (define *rift-tracker* (the (pointer rift-ring-ingame) #f))
  (define *machine-tracker* (the (pointer chip-whack-a-metal) #f))


(defskelgroup skel-hip-whack-a-metal hip-whack-a-metal hip-whack-a-metal-lod0-jg hip-whack-a-metal-idle-ja
              ((hip-whack-a-metal-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 -1 1 3.8)
              :origin-joint-index 3
              )



(defstate hide (chip-whack-a-metal)
  :virtual #t
  :enter #f
  :exit #f
  :code (behavior ()
    (ja-post)
    (sleep-code)
    )
  )

;; WARN: Return type mismatch draw-control vs none.
(defmethod init-art! ((this chip-whack-a-metal))
  "@see [[initialize-skeleton]]"
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-hip-whack-a-metal" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (none)
  )

(defmethod get-art-elem ((this chip-whack-a-metal))
  "Checks various things such the current actor, task status, etc to determine the right art-group data to use
@returns the appropriate [[art-element]] for the given NPC"
  (case (-> (get-current-task-event (-> this task)) action)
    (((game-task-action play))
     (set! (-> this talk-message) (text-id press-triangle-to-play))
     )
    (else
      (set! (-> this talk-message) (text-id press-triangle-to-talk))
      )
    )
  (-> this draw art-group data 2)
  )

(defstate play-game (chip-whack-a-metal)
  :virtual #t
  :code (behavior ((arg0 game-task-event))
    (set-setting! 'borrow '((hiphog 0 lwhack special)) 0.0 0)
    (process-taskable-anim-loop
      (the-as (function process-taskable object) (lambda () (!= (level-status *level* 'lwhack) 'active)))
      )
    (let ((gp-0 (get-process *default-dead-pool* whack-a-metal #x4000)))
      (set! (-> self slave)
            (ppointer->handle (when gp-0
                                (let ((t9-3 (method-of-type process activate)))
                                  (t9-3 gp-0 self (symbol->string (-> whack-a-metal symbol)) (the-as pointer #x70004000))
                                  )
                                (run-now-in-process gp-0 whack-a-metal-init (-> self entity))
                                (-> gp-0 ppointer)
                                )
                              )
            )
      )
    (process-taskable-anim-loop (lambda ((arg0 process-taskable)) (handle->process (-> arg0 slave))))
    (remove-setting! 'borrow)
    (go-virtual idle)
    )
  )

  (defbehavior chip-whack-a-metal-init-by-other chip-whack-a-metal ((vec vector))
  (stack-size-set! (-> self main-thread) 512)
  (process-taskable-method-31 self)
  (logior! (-> self mask) (process-mask actor-pause))
  (vector-copy! (-> self root trans) vec)
  (quaternion-identity! (-> self root quat))
  (vector-identity! (-> self root scale))
  (set! (-> self task) (new 'process 'game-task-control (game-task-actor whack-a-metal-hiphog)))
  (init-art! self)
  (process-taskable-method-32 self)
  (set! (-> self event-hook) (-> (method-of-object self idle) event))
  (go (method-of-object self hide))
  (none)
)



(defun machine-update ()
(when 
(and
(= machine-spawning? #t)
(not (ppointer->process *machine-tracker*))
(< (vector-vector-distance (target-pos 0) hideout-machine-spawn-pos) 400000.0)
)
(process-spawn chip-whack-a-metal hideout-machine-spawn-pos)
(set! *machine-tracker* (process-spawn chip-whack-a-metal hideout-machine-spawn-pos))
(format #t "
spawned process chip-whack-a-metal
")
)

(when 
(and
(= machine-spawning? #t)
(ppointer->process *machine-tracker*)
(> (vector-vector-distance (target-pos 0) hideout-machine-spawn-pos) 400000.0)
)
(kill-by-name "chip-whack-a-metal" *default-pool*)
(set! *machine-tracker* #f)
(format #t "
killed chip-whack-a-metal
")
)

(when 
(and
(ppointer->process *machine-tracker*)
(= machine-spawning? #f)
)
(kill-by-name "chip-whack-a-metal" *default-pool*)
(set! *machine-tracker* #f)
(format #t "
killed chip-whack-a-metal
")
)
(none)
)