(in-package goal)

;save-def.gc

(define mode-lighteco? #f)
(define mode-rngmission? #f)
(define mode-challenge? #f)
(define mode-allguns? #f)
(define mode-apocalypse? #f)
(define mode-randomshot? #f)
(define mode-barrels? #f)
(define mode-rngmods? #f)
(define mode-infiniteammo? #f)

(define unlock-lighteco? #f)
(define unlock-rngmission? #f)
(define unlock-challenge? #f)
(define unlock-allguns? #f)
(define unlock-apocalypse? #f)
(define unlock-randomshot? #f)
(define unlock-barrels? #f)
(define unlock-rngmods? #f)
(define unlock-infiniteammo? #f)


(defun item-refresh ()
  (set! item-ts1 "") ;set all of the lines blank
  (set! item-ts2 "")
  (set! item-ts3 "")
  (set! item-ts4 "")
  (set! item-ts5 "")
  (set! item-ts6 "")
  (set! item-ts7 "")
  (set! item-ts8 "")
  (set! item-ts9 "")
  (set! item-ts10 "")
  (set! item-ts11 "")
  (set! item-ts12 "")
  (set! item-ts13 "")
  (set! item-ts14 "")
  (set! item-ts15 "")
  (set! item-ts16 "")
  (set! item-ts17 "")
  (set! item-ts18 "")
  (set! item-ts19 "")
  (set! item-ts20 "")
  (set! item-ts21 "")
  (set! item-ts22 "")
  (set! item-ts23 "")
  (set! item-ts24 "")
  (set! item-ts25 "")
  (set! item-ts26 "")
  (set! item-ts27 "")
  (set! item-tss1 "")
  (set! item-tracker 0) ;set the list back to the first line
  (set! p-dark-gun #f) ;set all items to false, check-stat! will immediately set it back to true and list the item on the display
  (set! p-blue-gun #f)
  (set! p-red-gun #f)
  (set! p-upgrade-ammo #f)
  (set! p-upgrade-damage #f)
  (set! p-upgrade-red #f)
  (set! p-upgrade-vehicles #f)
  (set! p-double-shot #f)
  (set! p-explode-shot #f)
  (set! p-clover #f)
  (set! p-drinkable #f)
  (set! p-big-punch #f)
  (set! p-sage-yellow #f)
  (set! p-sage-blue #f)
  (set! p-sage-red #f)
  (set! p-sage-dark #f)
  (set! p-crit-hits #f)
  (set! p-actual-clone #f)
(none)
)

(defun reset-items ()
  (set! (-> *game-info* task-deaths) 1000000000)
  (set! (-> *game-info* continue-deaths) 1010000000)
  (set! (-> *game-info* auto-save-count) 1000000000)
  (item-refresh)
(none)
)

(defun check-stat! ()
    ;Check to ensure the number matches the gameplay variables listed under p-. If they dont, list the item on the display and set it to true
    (when 
    (and 
    (= p-red-gun #f)
    (= item-update #f)
    (= (/ (mod (-> *game-info* task-deaths) 10) 1) 1)
    )
        (set! p-red-gun #t)
        (set! item-tss1 "Scatter Gun")
        (set! item-update #t)
    )
    (when 
    (and 
    (= p-blue-gun #f)
    (= item-update #f)
    (= (/ (mod (-> *game-info* task-deaths) 100) 10) 1)
    )
        (set! p-blue-gun #t)
        (set! item-tss1 "Blue Gun")
        (set! item-update #t)
    )
    (when 
    (and 
    (= p-dark-gun #f)
    (= item-update #f)
    (= (/ (mod (-> *game-info* task-deaths) 1000) 100) 1)
    )
        (set! p-dark-gun #t)
        (set! item-tss1 "Peacemaker")
        (set! item-update #t)
    )
    (when 
    (and 
    (= p-upgrade-red #f)
    (= item-update #f)
    (= (/ (mod (-> *game-info* task-deaths) 10000) 1000) 1)
    )
        (set! p-upgrade-red #t)
        (set! item-tss1 "Scattergun ROF")
        (set! item-update #t)
    )
        (when 
    (and 
    (= p-upgrade-ammo #f)
    (= item-update #f)
    (= (/ (mod (-> *game-info* task-deaths) 100000) 10000) 1)
    )
        (set! p-upgrade-ammo #t)
        (set! item-tss1 "Upgraded Ammo")
        (set! item-update #t)
    )

        (when 
    (and 
    (= p-upgrade-damage #f)
    (= item-update #f)
    (= (/ (mod (-> *game-info* task-deaths) 1000000) 100000) 1)
    )
        (set! p-upgrade-damage #t)
        (set! item-tss1 "Upgraded Damage")
        (set! item-update #t)
    )
    (when 
    (and 
    (= p-upgrade-vehicles #f)
    (= item-update #f)
    (= (/ (mod (-> *game-info* task-deaths) 10000000) 1000000) 1)
    )
        (set! p-upgrade-vehicles #t)
        (= item-update #f)
        (set! item-tss1 "Upgraded Vehicles")
        (set! item-update #t)
    )
    (when 
    (and 
    (= p-double-shot #f)
    (= item-update #f)
    (= (/ (mod (-> *game-info* task-deaths) 100000000) 10000000) 1)
    )
        (set! p-double-shot #t)
        (= item-update #f)
        (set! item-tss1 "Double Shot")
        (set! item-update #t)
    )
    (when 
    (and 
    (= p-explode-shot #f)
    (= item-update #f)
    (= (/ (mod (-> *game-info* task-deaths) 1000000000) 100000000) 1)
    )
        (set! p-explode-shot #t)
        (set! item-tss1 "Explosive Yellow Shot")
        (set! item-update #t)
    )
    (when 
    (and 
    (= p-clover #f)
    (= item-update #f)
    (= (/ (mod (-> *game-info* continue-deaths) 10) 1) 1)
    )
        (set! p-clover #t)
        (set! item-tss1 "Four-Leaf Clover")
        (set! item-update #t)
    )
    (when 
    (and 
    (= p-drinkable #f)
    (= item-update #f)
    (= (/ (mod (-> *game-info* continue-deaths) 100) 10) 1)
    )
        (set! p-drinkable #t)
        (set! item-tss1 "+2HP Every Level")
        (set! item-update #t)
    )
    (when 
    (and 
    (= p-big-punch #f)
    (= item-update #f)
    (= (/ (mod (-> *game-info* continue-deaths) 1000) 100) 1)
    )
        (set! p-big-punch #t)
        (set! item-tss1 "Mar's Punch")
        (set! item-update #t)
    )
    (when 
    (and 
    (= p-sage-yellow #f)
    (= item-update #f)
    (= (/ (mod (-> *game-info* continue-deaths) 10000) 1000) 1)
    )
        (set! p-sage-yellow #t)
        (set! item-tss1 "Pocket Rift Gate")
        (set! item-update #t)
    )
    (when 
    (and 
    (= p-sage-blue #f)
    (= item-update #f)
    (= (/ (mod (-> *game-info* continue-deaths) 100000) 10000) 1)
    )
        (set! p-sage-blue #t)
        (set! item-tss1 "Training Weight")
        (set! item-update #t)
    )
    (when 
    (and 
    (= p-sage-red #f)
    (= item-update #f)
    (= (/ (mod (-> *game-info* continue-deaths) 1000000) 100000) 1)
    )
        (set! p-sage-red #t)
        (set! item-tss1 "Rapid Fire")
        (set! item-update #t)
    )
    (when 
    (and 
    (= p-sage-dark #f)
    (= item-update #f)
    (= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 1)
    )
        (set! p-sage-dark #t)
        (set! item-tss1 "Gol's Unbeknowngst")
        (set! item-update #t)
    )
    (when 
    (and 
    (= p-crit-hits #f)
    (= item-update #f)
    (= (/ (mod (-> *game-info* auto-save-count) 10) 1) 1)
    )
        (set! p-crit-hits #t)
        (set! item-tss1 "Red Sage's Blessing")
        (set! item-update #t)
    )
    (when 
    (and 
    (= p-actual-clone #f)
    (= item-update #f)
    (= (/ (mod (-> *game-info* auto-save-count) 100) 10) 1)
    )
        (set! p-actual-clone #t)
        (set! item-tss1 "Extra Life!")
        (set! item-update #t)
    )
    (when (= in-hub? #f)
        (when 
        (and 
        (not (logtest? (-> *game-info* features) (game-feature gun-red)))
        (or (= (/ (mod (-> *game-info* auto-save-count) 1000) 100) 1) (= (/ (mod (-> *game-info* auto-save-count) 1000) 100) 3))
        )
            (logior! (-> *game-info* features) (game-feature gun gun-red))
            (set! starter-weapon 1)
            (set! starter-display "<COLOR_RED>SCATTERGUN")
        )
        (when 
        (and 
        (not (logtest? (-> *game-info* features) (game-feature gun-yellow)))
        (or (= (/ (mod (-> *game-info* auto-save-count) 10000) 1000) 1) (= (/ (mod (-> *game-info* auto-save-count) 10000) 1000) 3))
        )
            (logior! (-> *game-info* features) (game-feature gun gun-yellow))
            (set! starter-weapon 2)
            (set! starter-display "<COLOR_YELLOW>BLASTER")
        )
        (when 
        (and 
        (not (logtest? (-> *game-info* features) (game-feature gun-blue)))
        (or (= (/ (mod (-> *game-info* auto-save-count) 100000) 10000) 1) (= (/ (mod (-> *game-info* auto-save-count) 100000) 10000) 3))
        )
            (logior! (-> *game-info* features) (game-feature gun gun-blue))
            (set! starter-weapon 3)
            (set! starter-display "<COLOR_CYAN>VULCAN")
        )
        (when 
        (and 
        (not (logtest? (-> *game-info* features) (game-feature gun-dark)))
        (or (= (/ (mod (-> *game-info* auto-save-count) 1000000) 100000) 1) (= (/ (mod (-> *game-info* auto-save-count) 1000000) 100000) 3))
        )
            (logior! (-> *game-info* features) (game-feature gun gun-dark))
            (set! starter-weapon 4)
            (set! starter-display "<COLOR_PINK>PEACEMAKER")
        )
    )
    (when
    (and
    (or
    (= (/ (mod (-> *game-info* auto-save-count) 1000) 100) 1)
    (= (/ (mod (-> *game-info* auto-save-count) 1000) 100) 3)
    )
    (not (string= starter-display "<COLOR_RED>SCATTERGUN"))
    )
        (set! starter-display "<COLOR_RED>SCATTERGUN")
    )
    (when
    (and
    (or
    (= (/ (mod (-> *game-info* auto-save-count) 10000) 1000) 1)
    (= (/ (mod (-> *game-info* auto-save-count) 10000) 1000) 3)
    )
    (not (string= starter-display "<COLOR_YELLOW>BLASTER"))
    )
        (set! starter-display "<COLOR_YELLOW>BLASTER")
    )
    (when
    (and
    (or
    (= (/ (mod (-> *game-info* auto-save-count) 100000) 10000) 1)
    (= (/ (mod (-> *game-info* auto-save-count) 100000) 10000) 3)
    )
    (not (string= starter-display "<COLOR_CYAN>VULCAN"))
    )
        (set! starter-display "<COLOR_CYAN>VULCAN")
    )
    (when
    (and
    (or
    (= (/ (mod (-> *game-info* auto-save-count) 1000000) 100000) 1)
    (= (/ (mod (-> *game-info* auto-save-count) 1000000) 100000) 3)
    )
    (not (string= starter-display "<COLOR_PINK>PEACEMAKER"))
    )
        (set! starter-display "<COLOR_PINK>PEACEMAKER")
    )
    (when 
        (or
        (= (/ (mod (-> *game-info* auto-save-count) 1000) 100) 2)
        (= (/ (mod (-> *game-info* auto-save-count) 1000) 100) 3)
        )
            (set! gun-red-special #t)
        )
        (when 
        (or
        (= (/ (mod (-> *game-info* auto-save-count) 10000) 1000) 2)
        (= (/ (mod (-> *game-info* auto-save-count) 10000) 1000) 3)
        )
            (set! gun-yellow-special #t)
        )
        (when 
        (or
        (= (/ (mod (-> *game-info* auto-save-count) 100000) 10000) 2)
        (= (/ (mod (-> *game-info* auto-save-count) 100000) 10000) 3)
        )
            (set! gun-blue-special #t)
        )
        (when 
        (or
        (= (/ (mod (-> *game-info* auto-save-count) 1000000) 100000) 2)
        (= (/ (mod (-> *game-info* auto-save-count) 1000000) 100000) 3)
        )
            (set! gun-dark-special #t)
        )
    (when 
        (and 
        (not (logtest? (-> *game-info* features) (game-feature gun-yellow)))
        (or
        (= (/ (mod (-> *game-info* auto-save-count) 10000000) 1000000) 1)
        )
        )
            (logior! (-> *game-info* features) (game-feature gun gun-yellow))
            (set! p-yellow-gun #t)
            (set! item-tss1 "Blaster")
            (set! item-update #t)
        )
        
        (when 
        (and 
        (= p-yellow-gun #t)
        (and
        (not (= (/ (mod (-> *game-info* auto-save-count) 10000000) 1000000) 1))
        )
        )
            (logclear! (-> *game-info* features) (game-feature gun gun-yellow))
            (set! p-yellow-gun #f)
        )

        ;(+! (-> *game-info* auto-save-count) 10000000)
        
        ;frong stuff 10000000's place
        (when 
        (and 
        (or 
            (or
            (= (/ (mod (-> *game-info* auto-save-count) 1000000) 100000) 2)
            (= (/ (mod (-> *game-info* auto-save-count) 1000000) 100000) 3)
            )
            (or
            (= (/ (mod (-> *game-info* auto-save-count) 100000) 10000) 2)
            (= (/ (mod (-> *game-info* auto-save-count) 100000) 10000) 3)
            )
            (or
            (= (/ (mod (-> *game-info* auto-save-count) 10000) 1000) 2)
            (= (/ (mod (-> *game-info* auto-save-count) 10000) 1000) 3)
            )
            (or
            (= (/ (mod (-> *game-info* auto-save-count) 1000) 100) 2)
            (= (/ (mod (-> *game-info* auto-save-count) 1000) 100) 3)
            )
        )
        (= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 0)
        )
            (+! (-> *game-info* auto-save-count) 10000000)
            (set! autosave-delayed #t)
        )

        (when 
        (and 
        (>= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 1)
        )
            (set! unlock-lighteco? #t)
            (set! frong-display1 "Endless Light Eco")
        )

        (when 
        (and 
        (>= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 2)
        )
            (set! unlock-rngmission? #t)
            (set! frong-display2 "All Random Missions")
        )

        (when 
        (and 
        (>= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 3)
        )
            (set! unlock-challenge? #t)
            (set! frong-display3 "All Challenge Levels")
        )
        
        (when 
        (and 
        (>= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 4)
        )
            (set! unlock-allguns? #t)
            (set! frong-display4 "All Weapons at Start")
        )

        (when 
        (and 
        (>= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 5)
        )
            (set! unlock-apocalypse? #t)
            (set! frong-display5 "Always Apocalypse")
        )

        (when 
        (and 
        (>= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 6)
        )
            (set! unlock-randomshot? #t)
            (set! frong-display6 "Everyone has Random Shot")
        )

        (when 
        (and 
        (>= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 7)
        )
            (set! unlock-barrels? #t)
            (set! frong-display7 "Always Raining Explosive Barrels")
        )

        (when 
        (and 
        (>= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 8)
        )
            (set! unlock-rngmods? #t)
            (set! frong-display8 "Random Modifier Every Level")
        )

        (when 
        (and 
        (>= (/ (mod (-> *game-info* auto-save-count) 100000000) 10000000) 9)
        )
            (set! unlock-infiniteammo? #t)
            (set! frong-display9 "Infinite Ammo")
        )


    ; Check to ensure the two variables match again but in reverse, taking the item away if they don't
    (when 
    (and 
    (= p-red-gun #t)
    (!= (/ (mod (-> *game-info* task-deaths) 10) 1) 1)
    )
        (set! p-red-gun #f)
    )
    (when 
    (and 
    (= p-blue-gun #t)
    (!= (/ (mod (-> *game-info* task-deaths) 100) 10) 1)
    )
        (set! p-blue-gun #f)
    )
    (when 
    (and 
    (= p-dark-gun #t)
    (!= (/ (mod (-> *game-info* task-deaths) 1000) 100) 1)
    )
        (set! p-dark-gun #f)
    )
    (when 
    (and 
    (= p-upgrade-red #t)
    (!= (/ (mod (-> *game-info* task-deaths) 10000) 1000) 1)
    )
        (set! p-upgrade-red #f)
    )
        (when 
    (and 
    (= p-upgrade-ammo #t)
    (!= (/ (mod (-> *game-info* task-deaths) 100000) 10000) 1)
    )
        (set! p-upgrade-ammo #f)
    )

        (when 
    (and 
    (= p-upgrade-damage #t)
    (!= (/ (mod (-> *game-info* task-deaths) 1000000) 100000) 1)
    )
        (set! p-upgrade-damage #f)
    )
    (when 
    (and 
    (= p-upgrade-vehicles #t)
    (!= (/ (mod (-> *game-info* task-deaths) 10000000) 1000000) 1)
    )
        (set! p-upgrade-vehicles #f)
    )
    (when 
    (and 
    (= p-double-shot #t)
    (!= (/ (mod (-> *game-info* task-deaths) 100000000) 10000000) 1)
    )
        (set! p-double-shot #f)
    )
    (when 
    (and 
    (= p-explode-shot #t)
    (!= (/ (mod (-> *game-info* task-deaths) 1000000000) 100000000) 1)
    )
        (set! p-explode-shot #f)
    )

    (when 
    (and 
    (= p-clover #t)
    (!= (/ (mod (-> *game-info* continue-deaths) 10) 1) 1)
    )
        (set! p-clover #f)
    )

    (when 
    (and 
    (= p-drinkable #t)
    (!= (/ (mod (-> *game-info* continue-deaths) 100) 10) 1)
    )
        (set! p-drinkable #f)
    )
    (when 
    (and 
    (= p-big-punch #t)
    (!= (/ (mod (-> *game-info* continue-deaths) 1000) 100) 1)
    )
        (set! p-big-punch #f)
    )
        (when 
    (and 
    (= p-sage-yellow #t)
    (!= (/ (mod (-> *game-info* continue-deaths) 10000) 1000) 1)
    )
        (set! p-sage-yellow #f)
    )
    (when 
    (and 
    (= p-sage-blue #t)
    (!= (/ (mod (-> *game-info* continue-deaths) 100000) 10000) 1)
    )
        (set! p-sage-blue #f)
    )
    (when 
    (and 
    (= p-sage-red #t)
    (!= (/ (mod (-> *game-info* continue-deaths) 1000000) 100000) 1)
    )
        (set! p-sage-red #f)
    )
    (when 
    (and 
    (= p-sage-dark #t)
    (!= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 1)
    )
        (set! p-sage-dark #f)
    )

    (when 
    (and 
    (= p-crit-hits #t)
    (!= (/ (mod (-> *game-info* auto-save-count) 10) 1) 1)
    )
        (set! p-crit-hits #f)
    )
    (when 
    (and 
    (= p-actual-clone #t)
    (!= (/ (mod (-> *game-info* auto-save-count) 100) 10) 1)
    )
        (set! p-actual-clone #f)
    )

    ;find luck and curse stat
    (when 
    (and 
    (!= curse 0.0)
    (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 0)
    )
        (set! curse 0.0)
        (set! curse-level 0)
    )
    (when 
    (and 
    (!= curse 0.03)
    (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 1)
    )
        (set! curse 0.03)
        (set! curse-level 1)
    )
    (when 
    (and 
    (!= curse 0.06)
    (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 2)
    )
        (set! curse 0.06)
        (set! curse-level 2)
    )
    (when 
    (and 
    (!= curse 0.1)
    (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 3)
    )
        (set! curse 0.1)
        (set! curse-level 3)
    )
    (when 
    (and 
    (!= curse 0.12)
    (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 4)
    )
        (set! curse 0.12)
        (set! curse-level 4)
    )
    (when 
    (and 
    (!= curse 0.18)
    (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 5)
    )
        (set! curse 0.18)
        (set! curse-level 5)
    )
    (when 
    (and 
    (!= curse 0.25)
    (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 6)
    )
        (set! curse 0.25)
        (set! curse-level 6)
    )
    (when 
    (and 
    (!= curse 0.35)
    (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 7)
    )
        (set! curse 0.35)
        (set! curse-level 7)
    )
    (when 
    (and 
    (!= curse 0.45)
    (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 8)
    )
        (set! curse 0.45)
        (set! curse-level 8)
    )
    (when 
    (and 
    (!= curse 1.0)
    (= (/ (mod (-> *game-info* continue-deaths) 1000000000) 100000000) 9)
    )
        (set! curse 1.0)
        (set! curse-level 9)
    )
    (when 
    (and 
    (!= luck 0.05)
    (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 0)
    )
        (set! luck 0.05)
    )
    (when 
    (and 
    (!= luck 0.1)
    (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 1)
    )
        (set! luck 0.1)
    )
    (when 
    (and 
    (!= luck 0.103)
    (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 2)
    )
        (set! luck 0.103)
    )
    (when 
    (and 
    (!= luck 0.107)
    (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 3)
    )
        (set! luck 0.107)
    )
    (when 
    (and 
    (!= luck 0.11)
    (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 4)
    )
        (set! luck 0.11)
    )
    (when 
    (and 
    (!= luck 0.13)
    (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 5)
    )
        (set! luck 0.13)
    )
    (when 
    (and 
    (!= luck 0.17)
    (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 6)
    )
        (set! luck 0.17)
    )
    (when 
    (and 
    (!= luck 0.2)
    (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 7)
    )
        (set! luck 0.2)
    )
    (when 
    (and 
    (!= luck 0.4)
    (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 8)
    )
        (set! luck 0.4)
    )
    (when 
    (and 
    (!= luck 0.6)
    (= (/ (mod (-> *game-info* continue-deaths) 100000000) 10000000) 9)
    )
        (set! luck 0.6)
    )
    (none)
)

(defun set-item ((arg0 string) (arg1 int))
(when 
(and
(not (string= arg0 "red"))
(not (string= arg0 "yellow"))
(not (string= arg0 "blue"))
(not (string= arg0 "dark"))
(not (string= arg0 "redrof"))
(not (string= arg0 "damage"))
(not (string= arg0 "ammo"))
(not (string= arg0 "vehicles"))
(not (string= arg0 "double"))
(not (string= arg0 "explosive"))
(not (string= arg0 "clover"))
(not (string= arg0 "2hp"))
(not (string= arg0 "mpunch"))
(not (string= arg0 "clone"))
(not (string= arg0 "weight"))
(not (string= arg0 "rapid"))
(not (string= arg0 "darkupgrade"))
(not (string= arg0 "redsage"))
(not (string= arg0 "extralife"))
)
(format #t "ERROR: Unknown Item. Please use: ~%red~%blue~%dark~%redrof~%ammo~%damage~%vehicles~%double~%explosive~%clover~%2hp~%mpunch~%clone~%weight~%rapid~%darkupgrade")
)
(when (and (!= arg1 1) (!= arg1 0))
(format #t "ERROR: Please choose either 0 or 1:~%1 = You have it~%0 = You don't have it")
)

(when 
(and 
(string= arg0 "red")
(= arg1 1)
(= (/ (mod (-> *game-info* task-deaths) 10) 1) 0)
)
 (+! (-> *game-info* task-deaths) 1)
)
(when 
(and 
(string= arg0 "red")
(= arg1 0)
(= (/ (mod (-> *game-info* task-deaths) 10) 1) 1)
)
 (-! (-> *game-info* task-deaths) 1)
)

(when 
(and 
(string= arg0 "yellow")
(= arg1 1)
(= (/ (mod (-> *game-info* task-deaths) 10) 1) 0)
)
 (+! (-> *game-info* auto-save-count) 1000000)
)
(when 
(and 
(string= arg0 "yellow")
(= arg1 0)
(= (/ (mod (-> *game-info* task-deaths) 10) 1) 1)
)
 (-! (-> *game-info* task-deaths) 1)
)

(when 
(and 
(string= arg0 "blue")
(= arg1 1)
(= (/ (mod (-> *game-info* task-deaths) 100) 10) 0)
)
 (+! (-> *game-info* task-deaths) 10)
)
(when 
(and 
(string= arg0 "blue")
(= arg1 0)
(= (/ (mod (-> *game-info* task-deaths) 100) 10) 1)
)
 (-! (-> *game-info* task-deaths) 10)
)

(when 
(and 
(string= arg0 "dark")
(= arg1 1)
(= (/ (mod (-> *game-info* task-deaths) 1000) 100) 0)
)
 (+! (-> *game-info* task-deaths) 100)
)
(when 
(and 
(string= arg0 "dark")
(= arg1 0)
(= (/ (mod (-> *game-info* task-deaths) 1000) 100) 1)
)
 (-! (-> *game-info* task-deaths) 100)
)

(when 
(and 
(string= arg0 "redrof")
(= arg1 1)
(= (/ (mod (-> *game-info* task-deaths) 10000) 1000) 0)
)
 (+! (-> *game-info* task-deaths) 1000)
)
(when 
(and 
(string= arg0 "redrof")
(= arg1 0)
(= (/ (mod (-> *game-info* task-deaths) 10000) 1000) 1)
)
 (-! (-> *game-info* task-deaths) 1000)
)

(when 
(and 
(string= arg0 "ammo")
(= arg1 1)
(= (/ (mod (-> *game-info* task-deaths) 100000) 10000) 0)
)
 (+! (-> *game-info* task-deaths) 10000)
)
(when 
(and 
(string= arg0 "ammo")
(= arg1 0)
(= (/ (mod (-> *game-info* task-deaths) 100000) 10000) 1)
)
 (-! (-> *game-info* task-deaths) 10000)
)

(when 
(and 
(string= arg0 "damage")
(= arg1 1)
(= (/ (mod (-> *game-info* task-deaths) 1000000) 100000) 0)
)
 (+! (-> *game-info* task-deaths) 100000)
)
(when 
(and 
(string= arg0 "damage")
(= arg1 0)
(= (/ (mod (-> *game-info* task-deaths) 1000000) 100000) 1)
)
 (-! (-> *game-info* task-deaths) 100000)
)

(when 
(and 
(string= arg0 "vehicles")
(= arg1 1)
(= (/ (mod (-> *game-info* task-deaths) 10000000) 1000000) 0)
)
 (+! (-> *game-info* task-deaths) 1000000)
)
(when 
(and 
(string= arg0 "vehicles")
(= arg1 0)
(= (/ (mod (-> *game-info* task-deaths) 10000000) 1000000) 1)
)
 (-! (-> *game-info* task-deaths) 1000000)
)

(when 
(and 
(string= arg0 "double")
(= arg1 1)
(= (/ (mod (-> *game-info* task-deaths) 100000000) 10000000) 0)
)
 (+! (-> *game-info* task-deaths) 10000000)
)
(when 
(and 
(string= arg0 "double")
(= arg1 0)
(= (/ (mod (-> *game-info* task-deaths) 100000000) 10000000) 1)
)
 (-! (-> *game-info* task-deaths) 10000000)
)

(when 
(and 
(string= arg0 "explosive")
(= arg1 1)
(= (/ (mod (-> *game-info* task-deaths) 1000000000) 100000000) 0)
)
 (+! (-> *game-info* task-deaths) 100000000)
)
(when 
(and 
(string= arg0 "explosive")
(= arg1 0)
(= (/ (mod (-> *game-info* task-deaths) 1000000000) 100000000) 1)
)
 (-! (-> *game-info* task-deaths) 100000000)
)


(when 
(and 
(string= arg0 "clover")
(= arg1 1)
(= (/ (mod (-> *game-info* continue-deaths) 10) 1) 0)
)
 (+! (-> *game-info* continue-deaths) 1)
)
(when 
(and 
(string= arg0 "clover")
(= arg1 0)
(= (/ (mod (-> *game-info* continue-deaths) 10) 1) 1)
)
 (-! (-> *game-info* continue-deaths) 1)
)

(when 
(and 
(string= arg0 "2hp")
(= arg1 1)
(= (/ (mod (-> *game-info* continue-deaths) 100) 10) 0)
)
 (+! (-> *game-info* continue-deaths) 10)
)
(when 
(and 
(string= arg0 "2hp")
(= arg1 0)
(= (/ (mod (-> *game-info* continue-deaths) 100) 10) 1)
)
 (-! (-> *game-info* continue-deaths) 10)
)

(when 
(and 
(string= arg0 "mpunch")
(= arg1 1)
(= (/ (mod (-> *game-info* continue-deaths) 1000) 100) 0)
)
 (+! (-> *game-info* continue-deaths) 100)
)
(when 
(and 
(string= arg0 "mpunch")
(= arg1 0)
(= (/ (mod (-> *game-info* continue-deaths) 1000) 100) 1)
)
 (-! (-> *game-info* continue-deaths) 100)
)

(when 
(and 
(string= arg0 "clone")
(= arg1 1)
(= (/ (mod (-> *game-info* continue-deaths) 10000) 1000) 0)
)
 (+! (-> *game-info* continue-deaths) 1000)
)
(when 
(and 
(string= arg0 "clone")
(= arg1 0)
(= (/ (mod (-> *game-info* continue-deaths) 10000) 1000) 1)
)
 (-! (-> *game-info* continue-deaths) 1000)
)

(when 
(and 
(string= arg0 "weight")
(= arg1 1)
(= (/ (mod (-> *game-info* continue-deaths) 100000) 10000) 0)
)
 (+! (-> *game-info* continue-deaths) 10000)
)
(when 
(and 
(string= arg0 "weight")
(= arg1 0)
(= (/ (mod (-> *game-info* continue-deaths) 100000) 10000) 1)
)
 (-! (-> *game-info* continue-deaths) 10000)
)

(when 
(and 
(string= arg0 "rapid")
(= arg1 1)
(= (/ (mod (-> *game-info* continue-deaths) 1000000) 100000) 0)
)
 (+! (-> *game-info* continue-deaths) 100000)
)
(when 
(and 
(string= arg0 "rapid")
(= arg1 0)
(= (/ (mod (-> *game-info* continue-deaths) 1000000) 100000) 1)
)
 (-! (-> *game-info* continue-deaths) 100000)
)

(when 
(and 
(string= arg0 "darkupgrade")
(= arg1 1)
(= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 0)
)
 (+! (-> *game-info* continue-deaths) 1000000)
)
(when 
(and 
(string= arg0 "darkupgrade")
(= arg1 0)
(= (/ (mod (-> *game-info* continue-deaths) 10000000) 1000000) 1)
)
 (-! (-> *game-info* continue-deaths) 1000000)
)

(when 
(and 
(string= arg0 "redsage")
(= arg1 1)
(= (/ (mod (-> *game-info*  auto-save-count) 10) 1) 0)
)
 (+! (-> *game-info*  auto-save-count) 1)
)
(when 
(and 
(string= arg0 "redsage")
(= arg1 0)
(= (/ (mod (-> *game-info* auto-save-count) 10) 1) 1)
)
 (-! (-> *game-info*  auto-save-count) 1)
)

(when 
(and 
(string= arg0 "extralife")
(= arg1 1)
(= (/ (mod (-> *game-info*  auto-save-count) 100) 10) 0)
)
 (+! (-> *game-info*  auto-save-count) 10)
)
(when 
(and 
(string= arg0 "extralife")
(= arg1 0)
(= (/ (mod (-> *game-info* auto-save-count) 100) 10) 1)
)
 (-! (-> *game-info*  auto-save-count) 10)
)
(item-refresh)
(none)
)